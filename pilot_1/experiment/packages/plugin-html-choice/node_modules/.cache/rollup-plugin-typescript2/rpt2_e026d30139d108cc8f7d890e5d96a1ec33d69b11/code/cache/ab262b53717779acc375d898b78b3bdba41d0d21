{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"html-choice\",\n    parameters: {\n        /** The HTML string to be displayed */\n        html_array: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /** How long to show the stimulus. */\n        stimulus_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus duration\",\n            default: null,\n        },\n        /** How long the trial lasts. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** If true, trial will end when subject makes a response. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /** values that can be assigned to choices. */\n        values: {\n            type: ParameterType.STRING,\n            pretty_name: \"Values\",\n            default: null,\n        },\n        /** Time the stimulus is shown after response (for example for animated feedback). */\n        time_after_response: {\n            type: ParameterType.INT,\n            pretty_name: \"Time after response\",\n            default: 0,\n        },\n    },\n};\n/**\n * html-choice\n * jsPsych plugin for displaying a stimulus and getting a choice\n * @author Younes Strittmatter\n */\nclass HtmlChoicePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        // check values:\n        let values;\n        if (!trial.values) {\n            values = Array(trial.html_array.length).fill(null);\n        }\n        else if (trial.values.length === trial.html_array.length) {\n            values = trial.values;\n        }\n        else {\n            throw new Error(\"array of html-choices does not have the same length as array of valuse\");\n        }\n        // display stimulus\n        var html = \"<div>\";\n        for (var i = 0; i < trial.html_array.length; i++) {\n            html +=\n                '<div class= \"jspsych-html-choice\" id=\"jspsych-html-choice-' +\n                    i +\n                    '\" data-choice=' +\n                    i +\n                    \" value=\" +\n                    values[i] +\n                    \">\";\n            html += trial.html_array[i];\n            html += \"</div>\";\n        }\n        html += \"</div>\";\n        display_element.innerHTML = html;\n        // start time\n        var start_time = performance.now();\n        // add event listeners to buttons\n        for (let i = 0; i < trial.html_array.length; i++) {\n            display_element.querySelector(\"#jspsych-html-choice-\" + i).addEventListener(\"click\", (e) => {\n                let element = e.currentTarget;\n                let choice = element.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n                let value = element.getAttribute(\"value\");\n                after_response(choice, value);\n            });\n        }\n        // store response\n        var response = {\n            rt: null,\n            choice: null,\n            value: null,\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // gather the data to store for the trial\n            var trial_data = {\n                rt: response.rt,\n                stimulus: trial.html_array,\n                response: response.choice,\n                value: response.value,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        const after_response = (choice, value) => {\n            // measure rt\n            var end_time = performance.now();\n            var rt = Math.round(end_time - start_time);\n            response.choice = parseInt(choice);\n            response.value = parseInt(value);\n            response.rt = rt;\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            display_element.querySelector(\"#jspsych-html-choice-\" + choice).className += \" responded\";\n            // disable all the buttons after a response\n            let elements = document.querySelectorAll(\".jspsych-html-choice\");\n            for (var i = 0; i < elements.length; i++) {\n                //btns[i].removeEventListener('click');\n                let el = elements[i];\n                el.style.pointerEvents = \"none\";\n            }\n            if (trial.response_ends_trial) {\n                this.jsPsych.pluginAPI.clearAllTimeouts();\n                this.jsPsych.pluginAPI.setTimeout(end_trial, trial.time_after_response);\n            }\n        };\n        // hide image if timing is set\n        if (trial.stimulus_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(() => {\n                display_element.querySelector(\"#jspsych-html-button-response-stimulus\").style.visibility = \"hidden\";\n            }, trial.stimulus_duration);\n        }\n        // end trial if time limit is set\n        if (trial.trial_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n        }\n    }\n}\nHtmlChoicePlugin.info = info;\nexport default HtmlChoicePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-html-choice/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"html-choice\";\n    readonly parameters: {\n        /** The HTML string to be displayed */\n        readonly html_array: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /** How long to show the stimulus. */\n        readonly stimulus_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus duration\";\n            readonly default: any;\n        };\n        /** How long the trial lasts. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** If true, trial will end when subject makes a response. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /** values that can be assigned to choices. */\n        readonly values: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Values\";\n            readonly default: any;\n        };\n        /** Time the stimulus is shown after response (for example for animated feedback). */\n        readonly time_after_response: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Time after response\";\n            readonly default: 0;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * html-choice\n * jsPsych plugin for displaying a stimulus and getting a choice\n * @author Younes Strittmatter\n */\ndeclare class HtmlChoicePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"html-choice\";\n        readonly parameters: {\n            /** The HTML string to be displayed */\n            readonly html_array: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /** How long to show the stimulus. */\n            readonly stimulus_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus duration\";\n                readonly default: any;\n            };\n            /** How long the trial lasts. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** If true, trial will end when subject makes a response. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /** values that can be assigned to choices. */\n            readonly values: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Values\";\n                readonly default: any;\n            };\n            /** Time the stimulus is shown after response (for example for animated feedback). */\n            readonly time_after_response: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Time after response\";\n                readonly default: 0;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n}\nexport default HtmlChoicePlugin;\n"}}
