{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-choice\",\n  parameters: {\n    /** The HTML string to be displayed */\n    html_array: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long the trial lasts. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** values that can be assigned to choices. */\n    values: {\n      type: ParameterType.STRING,\n      pretty_name: \"Values\",\n      default: null,\n    },\n    /** Time the stimulus is shown after response (for example for animated feedback). */\n    time_after_response: {\n      type: ParameterType.INT,\n      pretty_name: \"Time after response\",\n      default: 0,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * html-choice\n * jsPsych plugin for displaying a stimulus and getting a choice\n * @author Younes Strittmatter\n */\nclass HtmlChoicePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // check values:\n    let values;\n    if (!trial.values) {\n      values = Array(trial.html_array.length).fill(null);\n    } else if (trial.values.length === trial.html_array.length) {\n      values = trial.values;\n    } else {\n      throw new Error(\"array of html-choices does not have the same length as array of valuse\");\n    }\n    // display stimulus\n    var html = \"<div>\";\n    for (var i = 0; i < trial.html_array.length; i++) {\n      html +=\n        '<div class= \"jspsych-html-choice\" id=\"jspsych-html-choice-' +\n        i +\n        '\" data-choice=' +\n        i +\n        \" value=\" +\n        values[i] +\n        \">\";\n      html += trial.html_array[i];\n      html += \"</div>\";\n    }\n    html += \"</div>\";\n    display_element.innerHTML = html;\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (let i = 0; i < trial.html_array.length; i++) {\n      display_element.querySelector(\"#jspsych-html-choice-\" + i).addEventListener(\"click\", (e) => {\n        let element = e.currentTarget as HTMLElement;\n        let choice = element.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n        let value = element.getAttribute(\"value\");\n        after_response(choice, value);\n      });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      choice: null,\n      value: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.html_array,\n        response: response.choice,\n        value: response.value,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    const after_response = (choice, value) => {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.choice = parseInt(choice);\n      response.value = parseInt(value);\n      response.rt = rt;\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-choice-\" + choice).className += \" responded\";\n\n      // disable all the buttons after a response\n      let elements = document.querySelectorAll(\".jspsych-html-choice\");\n      for (var i = 0; i < elements.length; i++) {\n        //btns[i].removeEventListener('click');\n        let el = elements[i] as HTMLElement;\n        el.style.pointerEvents = \"none\";\n      }\n\n      if (trial.response_ends_trial) {\n        this.jsPsych.pluginAPI.clearAllTimeouts();\n        this.jsPsych.pluginAPI.setTimeout(end_trial, trial.time_after_response);\n      }\n    };\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-button-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if time limit is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n}\n\nexport default HtmlChoicePlugin;\n"],"names":["info","name","parameters","html_array","type","ParameterType","HTML_STRING","pretty_name","default","undefined","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","values","STRING","time_after_response","HtmlChoicePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","length","Error","Array","fill","html","i","innerHTML","start_time","performance","now","querySelector","addEventListener","e","element","currentTarget","choice","getAttribute","after_response","response","rt","end_trial","pluginAPI","clearAllTimeouts","trial_data","stimulus","finishTrial","end_time","Math","round","parseInt","className","elements","document","querySelectorAll","style","pointerEvents","setTimeout","visibility"],"mappings":"giBAEA,IAAMA,EAAc,CAClBC,KAAM,cACNC,WAAY,CAEVC,WAAY,CACVC,KAAMC,EAAaA,cAACC,YACpBC,YAAa,WACbC,aAASC,GAGXC,kBAAmB,CACjBN,KAAMC,EAAaA,cAACM,IACpBJ,YAAa,oBACbC,QAAS,MAGXI,eAAgB,CACdR,KAAMC,EAAaA,cAACM,IACpBJ,YAAa,iBACbC,QAAS,MAGXK,oBAAqB,CACnBT,KAAMC,EAAaA,cAACS,KACpBP,YAAa,sBACbC,SAAS,GAGXO,OAAQ,CACNX,KAAMC,EAAaA,cAACW,OACpBT,YAAa,SACbC,QAAS,MAGXS,oBAAqB,CACnBb,KAAMC,EAAaA,cAACM,IACpBJ,YAAa,sBACbC,QAAS,KAYTU,EAAgB,WAGpB,SAAAA,EAAoBC,gGAAgBC,MAAAF,GAAhBG,KAAOF,QAAPA,CAAmB,WA6GtC,SA7GuCD,KAAA,CAAA,CAAAI,IAAA,QAAAC,MAExC,SAAMC,EAA8BC,GAAsB,IAEpDV,EAFoDW,EAAAL,KAGxD,GAAKI,EAAMV,OAEJ,IAAIU,EAAMV,OAAOY,SAAWF,EAAMtB,WAAWwB,OAGlD,MAAM,IAAIC,MAAM,0EAFhBb,EAASU,EAAMV,MAGjB,MALEA,EAASc,MAAMJ,EAAMtB,WAAWwB,QAAQG,KAAK,MAQ/C,IADA,IAAIC,EAAO,QACFC,EAAI,EAAGA,EAAIP,EAAMtB,WAAWwB,OAAQK,IAC3CD,GACE,6DACAC,EACA,iBACAA,EACA,UACAjB,EAAOiB,GACP,IACFD,GAAQN,EAAMtB,WAAW6B,GACzBD,GAAQ,SAEVA,GAAQ,SACRP,EAAgBS,UAAYF,EAM5B,IAHA,IAAIG,EAAaC,YAAYC,MAGpBJ,EAAI,EAAGA,EAAIP,EAAMtB,WAAWwB,OAAQK,IAC3CR,EAAgBa,cAAc,wBAA0BL,GAAGM,iBAAiB,SAAS,SAACC,GACpF,IAAIC,EAAUD,EAAEE,cACZC,EAASF,EAAQG,aAAa,eAC9BpB,EAAQiB,EAAQG,aAAa,SACjCC,EAAeF,EAAQnB,EACzB,IAIF,IAAIsB,EAAW,CACbC,GAAI,KACJJ,OAAQ,KACRnB,MAAO,MAIHwB,EAAY,WAEhBrB,EAAKP,QAAQ6B,UAAUC,mBAGvB,IAAIC,EAAa,CACfJ,GAAID,EAASC,GACbK,SAAU1B,EAAMtB,WAChB0C,SAAUA,EAASH,OACnBnB,MAAOsB,EAAStB,OAIlBC,EAAgBS,UAAY,GAG5BP,EAAKP,QAAQiC,YAAYF,IAIrBN,EAAiB,SAACF,EAAQnB,GAE9B,IAAI8B,EAAWlB,YAAYC,MACvBU,EAAKQ,KAAKC,MAAMF,EAAWnB,GAC/BW,EAASH,OAASc,SAASd,GAC3BG,EAAStB,MAAQiC,SAASjC,GAC1BsB,EAASC,GAAKA,EAIdtB,EAAgBa,cAAc,wBAA0BK,GAAQe,WAAa,aAI7E,IADA,IAAIC,EAAWC,SAASC,iBAAiB,wBAChC5B,EAAI,EAAGA,EAAI0B,EAAS/B,OAAQK,IAE1B0B,EAAS1B,GACf6B,MAAMC,cAAgB,OAGvBrC,EAAMZ,sBACRa,EAAKP,QAAQ6B,UAAUC,mBACvBvB,EAAKP,QAAQ6B,UAAUe,WAAWhB,EAAWtB,EAAMR,uBAKvB,OAA5BQ,EAAMf,mBACRW,KAAKF,QAAQ6B,UAAUe,YAAW,WAChCvC,EAAgBa,cACd,0CACAwB,MAAMG,WAAa,QACvB,GAAGvC,EAAMf,mBAIkB,OAAzBe,EAAMb,gBACRS,KAAKF,QAAQ6B,UAAUe,WAAWhB,EAAWtB,EAAMb,eAEvD,oFAACM,CAAA,CAhHmB,UACbA,EAAIlB,KAAGA"}