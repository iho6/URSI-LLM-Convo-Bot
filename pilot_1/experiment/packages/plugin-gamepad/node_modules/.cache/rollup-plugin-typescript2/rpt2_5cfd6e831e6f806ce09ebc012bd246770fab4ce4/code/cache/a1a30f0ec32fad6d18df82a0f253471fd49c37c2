{"code":"import { ParameterType } from \"jspsych\";\nimport { GamepadModels } from \"./gamepad-model\";\nconst info = {\n    name: \"jspsych-gamepad\",\n    parameters: {\n        /**\n         * The size of the canvas element\n         */\n        canvas_size: {\n            type: ParameterType.INT,\n            default: [500, 500],\n            array: true,\n        },\n        /**\n         * Whether to display a minature gamepad on the page.\n         * If set to true, a minature gamepad would be rendered, which simultaneously reflects the button presses and\n         * joystick movements of the gamepad.\n         * This should only be used for debug purposes, though.\n         * Note: at the current stage, there is only limited support to this feature\n         */\n        display_minature_gamepad: {\n            type: ParameterType.BOOL,\n            default: false,\n        },\n        /**\n         * The function which, when returning true, would terminate the current trial.\n         * This function is called once every frame.\n         *\n         * @param {CanvasRenderingContext2D} context: The context to draw upon\n         * @param {Gamepad} gamepad: The gamepad object connected\n         * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n         * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n         */\n        end_trial: {\n            type: ParameterType.FUNCTION,\n            default: (_context, _gamepad, _time_stamp, _delta_time) => {\n                return _time_stamp > 2000;\n            },\n        },\n        /**\n         * The message to display above the canvas when no gamepad is connected or when connection is lost.\n         */\n        gamepad_connection_prompt: {\n            type: ParameterType.STRING,\n            default: \"Awaiting gamepad connection...\",\n        },\n        /**\n         * The function that runs in every frame update.\n         *\n         * @param {CanvasRenderingContext2D} context: The context to draw upon\n         * @param {Gamepad} gamepad: The gamepad object connected\n         * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n         * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n         */\n        on_frame_update: {\n            type: ParameterType.FUNCTION,\n            default: (_context, _gamepad, _time_stamp, _delta_time) => { },\n        },\n        /**\n         * The function to draw on the canvas.\n         * This function automatically takes a canvas context as its only argument\n         * The content of the stimulus is only drawn once in the first frame, and is then copy-pasted in subsequent frames.\n         * Therefore, this parameter is best suited for drawing contents that does not change throughout the entire trial.\n         * One can return a Promise object with the function, which will be automatically detected by the plugin.\n         */\n        stimulus: {\n            type: ParameterType.FUNCTION,\n            default: (_context) => { },\n        },\n    },\n};\n/**\n * **jspsych-gamepad**\n *\n * A jsPsych plugin for using gamepad in behavioral experiments.\n *\n * @author Shaobin Jiang\n */\nclass GamepadPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n        this.gamepad_is_connected = false;\n        this.minature_gamepad = null;\n        this.start_time_stamp = 0;\n        this.last_frame_time_stamp = 0;\n        this.animation_frame_id = -1;\n        this.frame_request_callback = (_time) => { };\n        this.gamepad_inputs = [];\n    }\n    find_gamepad() {\n        var _a;\n        this.gamepad = null;\n        this.gamepad_is_connected = false;\n        for (let gamepad of navigator.getGamepads()) {\n            if (gamepad instanceof Gamepad) {\n                let previous_gamepad_id = (_a = this.gamepad) === null || _a === void 0 ? void 0 : _a.id;\n                this.gamepad = gamepad;\n                this.gamepad_is_connected = true;\n                if (gamepad.id !== previous_gamepad_id) {\n                    this.minature_gamepad_wrapper.innerHTML = \"\";\n                    this.minature_gamepad = GamepadModels[gamepad.id](gamepad, this.minature_gamepad_wrapper);\n                }\n                break;\n            }\n        }\n    }\n    trial(display_element, trial, on_load) {\n        // Initialize the canvas element\n        let canvas = document.createElement(\"canvas\");\n        canvas.width = trial.canvas_size[0];\n        canvas.height = trial.canvas_size[1];\n        // Initialize the prompt element\n        let gamepad_connection_prompt = document.createElement(\"p\");\n        gamepad_connection_prompt.style.textAlign = \"center\";\n        gamepad_connection_prompt.innerHTML = trial.gamepad_connection_prompt;\n        display_element.appendChild(canvas);\n        display_element.appendChild(gamepad_connection_prompt);\n        this.minature_gamepad_wrapper = document.createElement(\"div\");\n        this.minature_gamepad_wrapper.id = \"gamepad-model-wrapper\";\n        this.minature_gamepad_wrapper.style.width = \"10%\";\n        this.minature_gamepad_wrapper.style.position = \"absolute\";\n        this.jsPsych.getDisplayContainerElement().appendChild(this.minature_gamepad_wrapper);\n        let context = canvas.getContext(\"2d\", { willReadFrequently: true });\n        let stimulus = trial.stimulus(context);\n        let promise;\n        if (stimulus instanceof Promise) {\n            promise = stimulus;\n        }\n        else {\n            promise = Promise.resolve(stimulus);\n        }\n        promise.then(() => {\n            let image_data = context.getImageData(0, 0, canvas.width, canvas.height);\n            this.frame_request_callback = (now) => {\n                var _a;\n                if (this.start_time_stamp === 0) {\n                    this.start_time_stamp = now;\n                }\n                this.find_gamepad();\n                // If gamepad_is_connected is true, then gamepad_connection_prompt should be empty and vice versa\n                gamepad_connection_prompt.style.visibility = this.gamepad_is_connected ? \"hidden\" : \"\";\n                let time_stamp = now - this.start_time_stamp;\n                let delta = this.last_frame_time_stamp === 0 ? 0 : now - this.last_frame_time_stamp;\n                context.putImageData(image_data, 0, 0);\n                trial.on_frame_update(context, this.gamepad, time_stamp, delta);\n                if (trial.display_minature_gamepad && this.minature_gamepad_wrapper !== null) {\n                    (_a = this.minature_gamepad) === null || _a === void 0 ? void 0 : _a.update(this.gamepad);\n                }\n                this.gamepad_inputs.push(this.gamepad);\n                if (trial.end_trial(context, this.gamepad, time_stamp, delta)) {\n                    finish_trial({\n                        rt: time_stamp,\n                        input: this.gamepad_inputs,\n                    });\n                }\n                this.last_frame_time_stamp = now;\n                this.animation_frame_id = window.requestAnimationFrame(this.frame_request_callback);\n            };\n            on_load();\n            this.animation_frame_id = window.requestAnimationFrame(this.frame_request_callback);\n        });\n        let finish_trial = (data) => {\n            window.cancelAnimationFrame(this.animation_frame_id);\n            display_element.innerHTML = \"\";\n            this.minature_gamepad_wrapper.remove();\n            this.jsPsych.finishTrial(data);\n        };\n    }\n}\nGamepadPlugin.info = info;\nexport default GamepadPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts","/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-gamepad/src/gamepad-model.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-gamepad/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"jspsych-gamepad\";\n    readonly parameters: {\n        /**\n         * The size of the canvas element\n         */\n        readonly canvas_size: {\n            readonly type: ParameterType.INT;\n            readonly default: readonly [500, 500];\n            readonly array: true;\n        };\n        /**\n         * Whether to display a minature gamepad on the page.\n         * If set to true, a minature gamepad would be rendered, which simultaneously reflects the button presses and\n         * joystick movements of the gamepad.\n         * This should only be used for debug purposes, though.\n         * Note: at the current stage, there is only limited support to this feature\n         */\n        readonly display_minature_gamepad: {\n            readonly type: ParameterType.BOOL;\n            readonly default: false;\n        };\n        /**\n         * The function which, when returning true, would terminate the current trial.\n         * This function is called once every frame.\n         *\n         * @param {CanvasRenderingContext2D} context: The context to draw upon\n         * @param {Gamepad} gamepad: The gamepad object connected\n         * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n         * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n         */\n        readonly end_trial: {\n            readonly type: ParameterType.FUNCTION;\n            readonly default: (_context: CanvasRenderingContext2D, _gamepad: Gamepad, _time_stamp: number, _delta_time: number) => boolean;\n        };\n        /**\n         * The message to display above the canvas when no gamepad is connected or when connection is lost.\n         */\n        readonly gamepad_connection_prompt: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"Awaiting gamepad connection...\";\n        };\n        /**\n         * The function that runs in every frame update.\n         *\n         * @param {CanvasRenderingContext2D} context: The context to draw upon\n         * @param {Gamepad} gamepad: The gamepad object connected\n         * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n         * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n         */\n        readonly on_frame_update: {\n            readonly type: ParameterType.FUNCTION;\n            readonly default: (_context: CanvasRenderingContext2D, _gamepad: Gamepad, _time_stamp: number, _delta_time: number) => void;\n        };\n        /**\n         * The function to draw on the canvas.\n         * This function automatically takes a canvas context as its only argument\n         * The content of the stimulus is only drawn once in the first frame, and is then copy-pasted in subsequent frames.\n         * Therefore, this parameter is best suited for drawing contents that does not change throughout the entire trial.\n         * One can return a Promise object with the function, which will be automatically detected by the plugin.\n         */\n        readonly stimulus: {\n            readonly type: ParameterType.FUNCTION;\n            readonly default: (_context: CanvasRenderingContext2D) => void;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **jspsych-gamepad**\n *\n * A jsPsych plugin for using gamepad in behavioral experiments.\n *\n * @author Shaobin Jiang\n */\ndeclare class GamepadPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"jspsych-gamepad\";\n        readonly parameters: {\n            /**\n             * The size of the canvas element\n             */\n            readonly canvas_size: {\n                readonly type: ParameterType.INT;\n                readonly default: readonly [500, 500];\n                readonly array: true;\n            };\n            /**\n             * Whether to display a minature gamepad on the page.\n             * If set to true, a minature gamepad would be rendered, which simultaneously reflects the button presses and\n             * joystick movements of the gamepad.\n             * This should only be used for debug purposes, though.\n             * Note: at the current stage, there is only limited support to this feature\n             */\n            readonly display_minature_gamepad: {\n                readonly type: ParameterType.BOOL;\n                readonly default: false;\n            };\n            /**\n             * The function which, when returning true, would terminate the current trial.\n             * This function is called once every frame.\n             *\n             * @param {CanvasRenderingContext2D} context: The context to draw upon\n             * @param {Gamepad} gamepad: The gamepad object connected\n             * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n             * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n             */\n            readonly end_trial: {\n                readonly type: ParameterType.FUNCTION;\n                readonly default: (_context: CanvasRenderingContext2D, _gamepad: Gamepad, _time_stamp: number, _delta_time: number) => boolean;\n            };\n            /**\n             * The message to display above the canvas when no gamepad is connected or when connection is lost.\n             */\n            readonly gamepad_connection_prompt: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"Awaiting gamepad connection...\";\n            };\n            /**\n             * The function that runs in every frame update.\n             *\n             * @param {CanvasRenderingContext2D} context: The context to draw upon\n             * @param {Gamepad} gamepad: The gamepad object connected\n             * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n             * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n             */\n            readonly on_frame_update: {\n                readonly type: ParameterType.FUNCTION;\n                readonly default: (_context: CanvasRenderingContext2D, _gamepad: Gamepad, _time_stamp: number, _delta_time: number) => void;\n            };\n            /**\n             * The function to draw on the canvas.\n             * This function automatically takes a canvas context as its only argument\n             * The content of the stimulus is only drawn once in the first frame, and is then copy-pasted in subsequent frames.\n             * Therefore, this parameter is best suited for drawing contents that does not change throughout the entire trial.\n             * One can return a Promise object with the function, which will be automatically detected by the plugin.\n             */\n            readonly stimulus: {\n                readonly type: ParameterType.FUNCTION;\n                readonly default: (_context: CanvasRenderingContext2D) => void;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    private gamepad;\n    private gamepad_is_connected;\n    private minature_gamepad;\n    private minature_gamepad_wrapper;\n    private start_time_stamp;\n    private last_frame_time_stamp;\n    private animation_frame_id;\n    private frame_request_callback;\n    private gamepad_inputs;\n    private find_gamepad;\n    trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: Function): void;\n}\nexport default GamepadPlugin;\n"}}
