{"code":"import { xbox_360_controller } from \"./gamepads/xbox_360_controller\";\nexport class GamepadModel {\n    constructor(gamepad, parent, size) {\n        this.gamepad = gamepad;\n        this.size = size;\n        this.draw_call_list = [];\n        this.draw_outline = (_context) => { };\n        this.canvas = document.createElement(\"canvas\");\n        this.canvas.width = this.size;\n        this.canvas.height = this.size;\n        this.canvas.style.width = \"100%\";\n        parent.appendChild(this.canvas);\n        this.context = this.canvas.getContext(\"2d\", { willReadFrequently: true });\n    }\n    // set button_id to -1 if the current component cannot be pressed\n    draw_component(component, axes_id, button_id) {\n        if (component instanceof Path2D) {\n            this.draw_call_list.push(() => {\n                var _a;\n                this.context.save();\n                this.context.fillStyle = `rgba(0, 0, 0, ${(_a = this.gamepad.buttons[button_id]) === null || _a === void 0 ? void 0 : _a.value})`;\n                this.context.lineWidth = 3;\n                this.context.stroke(component);\n                this.context.fill(component);\n                this.context.restore();\n            });\n        }\n        else {\n            this.draw_call_list.push(() => {\n                var _a;\n                let axes_1 = axes_id === -1 ? 0 : this.gamepad.axes[axes_id * 2];\n                let axes_2 = axes_id === -1 ? 0 : this.gamepad.axes[axes_id * 2 + 1];\n                let path = new Path2D();\n                path.arc(component.x + (axes_1 * component.radius) / 2, component.y + (axes_2 * component.radius) / 2, component.radius, 0, Math.PI * 2);\n                this.context.stroke(path);\n                this.context.save();\n                this.context.fillStyle = `rgba(0, 0, 0, ${(_a = this.gamepad.buttons[button_id]) === null || _a === void 0 ? void 0 : _a.value})`;\n                this.context.lineWidth = 3;\n                this.context.stroke(path);\n                this.context.fill(path);\n                this.context.restore();\n            });\n        }\n    }\n    update(gamepad) {\n        if (gamepad !== null) {\n            this.gamepad = gamepad;\n        }\n        this.context.clearRect(0, 0, this.size, this.size);\n        this.draw_outline(this.context);\n        for (let func of this.draw_call_list) {\n            func();\n        }\n    }\n}\nexport let GamepadModels = {\n    \"Xbox 360 Controller (XInput STANDARD GAMEPAD)\": xbox_360_controller,\n};\n//# sourceMappingURL=gamepad-model.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-gamepad/src/gamepads/xbox_360_controller.ts"],"map":"{\"version\":3,\"file\":\"gamepad-model.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/gamepad-model.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-gamepad/node_modules/.cache/rollup-plugin-typescript2/placeholder/gamepad-model.d.ts","writeByteOrderMark":false,"text":"export declare class GamepadModel {\n    private gamepad;\n    private size;\n    constructor(gamepad: Gamepad, parent: HTMLElement, size: number);\n    private canvas;\n    private context;\n    private draw_call_list;\n    draw_outline: (context: CanvasRenderingContext2D) => void;\n    draw_component(component: ComponentPath, axes_id: number, button_id: number): void;\n    update(gamepad: Gamepad | null): void;\n}\ntype ComponentPath = Path2D | {\n    x: number;\n    y: number;\n    radius: number;\n};\ntype GamepadTemplate = (gamepad: Gamepad, parent: HTMLElement) => GamepadModel;\nexport declare let GamepadModels: {\n    [prop: string]: GamepadTemplate;\n};\nexport {};\n"}}
