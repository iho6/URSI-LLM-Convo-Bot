{"version":3,"file":"index.browser.min.js","sources":["../src/gamepad-model.ts","../src/gamepads/xbox_360_controller.ts","../src/index.ts"],"sourcesContent":["import { xbox_360_controller } from \"./gamepads/xbox_360_controller\";\n\nexport class GamepadModel {\n  constructor(private gamepad: Gamepad, parent: HTMLElement, private size: number) {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.size;\n    this.canvas.height = this.size;\n    this.canvas.style.width = \"100%\";\n\n    parent.appendChild(this.canvas);\n\n    this.context = this.canvas.getContext(\"2d\", { willReadFrequently: true });\n  }\n\n  private canvas: HTMLCanvasElement;\n\n  private context: CanvasRenderingContext2D;\n\n  private draw_call_list: Array<Function> = [];\n\n  public draw_outline: (context: CanvasRenderingContext2D) => void = (\n    _context: CanvasRenderingContext2D\n  ) => {};\n\n  // set button_id to -1 if the current component cannot be pressed\n  public draw_component(component: ComponentPath, axes_id: number, button_id: number): void {\n    if (component instanceof Path2D) {\n      this.draw_call_list.push(() => {\n        this.context.save();\n        this.context.fillStyle = `rgba(0, 0, 0, ${this.gamepad.buttons[button_id]?.value})`;\n        this.context.lineWidth = 3;\n        this.context.stroke(component);\n        this.context.fill(component);\n        this.context.restore();\n      });\n    } else {\n      this.draw_call_list.push(() => {\n        let axes_1: number = axes_id === -1 ? 0 : this.gamepad.axes[axes_id * 2];\n        let axes_2: number = axes_id === -1 ? 0 : this.gamepad.axes[axes_id * 2 + 1];\n\n        let path: Path2D = new Path2D();\n        path.arc(\n          component.x + (axes_1 * component.radius) / 2,\n          component.y + (axes_2 * component.radius) / 2,\n          component.radius,\n          0,\n          Math.PI * 2\n        );\n\n        this.context.stroke(path);\n\n        this.context.save();\n        this.context.fillStyle = `rgba(0, 0, 0, ${this.gamepad.buttons[button_id]?.value})`;\n        this.context.lineWidth = 3;\n        this.context.stroke(path);\n        this.context.fill(path);\n        this.context.restore();\n      });\n    }\n  }\n\n  public update(gamepad: Gamepad | null): void {\n    if (gamepad !== null) {\n      this.gamepad = gamepad;\n    }\n    this.context.clearRect(0, 0, this.size, this.size);\n    this.draw_outline(this.context);\n    for (let func of this.draw_call_list) {\n      func();\n    }\n  }\n}\n\ntype ComponentPath = Path2D | { x: number; y: number; radius: number };\n\ntype GamepadTemplate = (gamepad: Gamepad, parent: HTMLElement) => GamepadModel;\n\nexport let GamepadModels: { [prop: string]: GamepadTemplate } = {\n  \"Xbox 360 Controller (XInput STANDARD GAMEPAD)\": xbox_360_controller,\n};\n","import { GamepadModel } from \"../gamepad-model\";\n\nexport function xbox_360_controller(gamepad: Gamepad, parent: HTMLElement): GamepadModel {\n  let model: GamepadModel = new GamepadModel(gamepad, parent, 441);\n\n  model.draw_outline = (context: CanvasRenderingContext2D) => {\n    context.save();\n    context.lineWidth = 3;\n\n    let outline_left: Path2D = new Path2D(\n      \"M220.5 323.5L150 323.5C105 323.5 81.5 407.5 49.5 407.5C17.5 407.5 4 392.9 4 346.5C4 300.1 43.5 194.5 55 166.5C66.5 138.5 95.5 121 128 121L220.5 121\"\n    );\n    let outline_right: Path2D = new Path2D(\n      \"M220.5 323.5L291 323.5C336 323.5 359.5 407.5 391.5 407.5C423.5 407.5 437 392.9 437 346.5C437 300.1 397.5 194.5 386 166.5C374.5 138.5 345.5 121 313 121L220.5 121\"\n    );\n    context.stroke(outline_left);\n    context.stroke(outline_right);\n\n    let ls_outline: Path2D = new Path2D();\n    ls_outline.arc(113, 189, 37.5, 0, Math.PI * 2);\n    context.stroke(ls_outline);\n\n    let rs_outline: Path2D = new Path2D();\n    rs_outline.arc(278, 267, 37.5, 0, Math.PI * 2);\n    context.stroke(rs_outline);\n\n    let d_outline: Path2D = new Path2D();\n    d_outline.arc(163, 267, 37.5, 0, Math.PI * 2);\n    context.stroke(d_outline);\n\n    context.restore();\n  };\n\n  model.draw_component({ x: 113, y: 189, radius: 30 }, 0, 10); // left stick\n  model.draw_component({ x: 278, y: 267, radius: 30 }, 1, 11); // right stick\n\n  model.draw_component({ x: 328, y: 207, radius: 8 }, -1, 0); // A\n  model.draw_component({ x: 346, y: 189, radius: 8 }, -1, 1); // B\n  model.draw_component({ x: 310, y: 189, radius: 8 }, -1, 2); // X\n  model.draw_component({ x: 328, y: 171, radius: 8 }, -1, 3); // Y\n\n  model.draw_component(\n    new Path2D(\n      \"M111.5 90.5L152.5 90.5C160 90.5 160 103.5 152.5 103.5L111.5 103.5C104 103.5 104 90.5 111.5 90.5\"\n    ),\n    -1,\n    4\n  ); // LB\n  model.draw_component(\n    new Path2D(\n      \"M329.5 90.5L288.5 90.5C281 90.5 281 103.5 288.5 103.5L329.5 103.5C337 103.5 337 90.5 329.5 90.5\"\n    ),\n    -1,\n    5\n  ); // RB\n\n  model.draw_component(\n    new Path2D(\n      \"M152.5 66C152.5 70 149 73.5 145 73.5H132C128 73.5 124.5 70 124.5 66V45.5C124.5 38 131 31.5 138.5 31.5C146 31.5 152.5 38 152.5 45.5V66Z\"\n    ),\n    -1,\n    6\n  ); // LT\n  model.draw_component(\n    new Path2D(\n      \"M288.5 66C289.5 70 292 73.5 296 73.5H309C313 73.5 316.5 70 316.5 66V45.5C316.5 38 310 31.5 302.5 31.5C295 31.5 288.5 38 288.5 45.5V66Z\"\n    ),\n    -1,\n    7\n  ); // RT\n\n  model.draw_component({ x: 185, y: 191, radius: 8 }, -1, 8); // Left meta\n  model.draw_component({ x: 259, y: 191, radius: 8 }, -1, 9); // Right meta\n\n  model.draw_component({ x: 163, y: 249, radius: 8 }, -1, 12); // DUp\n  model.draw_component({ x: 163, y: 285, radius: 8 }, -1, 13); // DDown\n  model.draw_component({ x: 145, y: 267, radius: 8 }, -1, 14); // DLeft\n  model.draw_component({ x: 181, y: 267, radius: 8 }, -1, 15); // DRight\n\n  return model;\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { GamepadModel, GamepadModels } from \"./gamepad-model\";\n\nconst info = <const>{\n  name: \"jspsych-gamepad\",\n  parameters: {\n    /**\n     * The size of the canvas element\n     */\n    canvas_size: {\n      type: ParameterType.INT,\n      default: [500, 500],\n      array: true,\n    },\n    /**\n     * Whether to display a minature gamepad on the page.\n     * If set to true, a minature gamepad would be rendered, which simultaneously reflects the button presses and\n     * joystick movements of the gamepad.\n     * This should only be used for debug purposes, though.\n     * Note: at the current stage, there is only limited support to this feature\n     */\n    display_minature_gamepad: {\n      type: ParameterType.BOOL,\n      default: false,\n    },\n    /**\n     * The function which, when returning true, would terminate the current trial.\n     * This function is called once every frame.\n     *\n     * @param {CanvasRenderingContext2D} context: The context to draw upon\n     * @param {Gamepad} gamepad: The gamepad object connected\n     * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n     * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n     */\n    end_trial: {\n      type: ParameterType.FUNCTION,\n      default: (\n        _context: CanvasRenderingContext2D,\n        _gamepad: Gamepad,\n        _time_stamp: number,\n        _delta_time: number\n      ) => {\n        return _time_stamp > 2000;\n      },\n    },\n    /**\n     * The message to display above the canvas when no gamepad is connected or when connection is lost.\n     */\n    gamepad_connection_prompt: {\n      type: ParameterType.STRING,\n      default: \"Awaiting gamepad connection...\",\n    },\n    /**\n     * The function that runs in every frame update.\n     *\n     * @param {CanvasRenderingContext2D} context: The context to draw upon\n     * @param {Gamepad} gamepad: The gamepad object connected\n     * @param {number} time_stamp: The milliseconds that have elapsed since the first frame\n     * @param {number} delta_time: The milliseconds that have elapsed since the last frame\n     */\n    on_frame_update: {\n      type: ParameterType.FUNCTION,\n      default: (\n        _context: CanvasRenderingContext2D,\n        _gamepad: Gamepad,\n        _time_stamp: number,\n        _delta_time: number\n      ) => {},\n    },\n    /**\n     * The function to draw on the canvas.\n     * This function automatically takes a canvas context as its only argument\n     * The content of the stimulus is only drawn once in the first frame, and is then copy-pasted in subsequent frames.\n     * Therefore, this parameter is best suited for drawing contents that does not change throughout the entire trial.\n     * One can return a Promise object with the function, which will be automatically detected by the plugin.\n     */\n    stimulus: {\n      type: ParameterType.FUNCTION,\n      default: (_context: CanvasRenderingContext2D) => {},\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **jspsych-gamepad**\n *\n * A jsPsych plugin for using gamepad in behavioral experiments.\n *\n * @author Shaobin Jiang\n */\nclass GamepadPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  private gamepad: Gamepad | null;\n  private gamepad_is_connected: boolean = false;\n\n  private minature_gamepad: GamepadModel | null = null;\n  private minature_gamepad_wrapper: HTMLDivElement;\n\n  private start_time_stamp: number = 0;\n  private last_frame_time_stamp: number = 0;\n\n  private animation_frame_id: number = -1;\n  private frame_request_callback: FrameRequestCallback = (_time: DOMHighResTimeStamp) => {};\n\n  private gamepad_inputs: Array<Gamepad> = [];\n\n  private find_gamepad(): void {\n    this.gamepad = null;\n    this.gamepad_is_connected = false;\n    for (let gamepad of navigator.getGamepads()) {\n      if (gamepad instanceof Gamepad) {\n        let previous_gamepad_id = this.gamepad?.id;\n\n        this.gamepad = gamepad;\n        this.gamepad_is_connected = true;\n\n        if (gamepad.id !== previous_gamepad_id) {\n          this.minature_gamepad_wrapper.innerHTML = \"\";\n          this.minature_gamepad = GamepadModels[gamepad.id](gamepad, this.minature_gamepad_wrapper);\n        }\n        break;\n      }\n    }\n  }\n\n  public trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: Function) {\n    // Initialize the canvas element\n    let canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n    canvas.width = trial.canvas_size[0];\n    canvas.height = trial.canvas_size[1];\n\n    // Initialize the prompt element\n    let gamepad_connection_prompt: HTMLParagraphElement = document.createElement(\"p\");\n    gamepad_connection_prompt.style.textAlign = \"center\";\n    gamepad_connection_prompt.innerHTML = trial.gamepad_connection_prompt;\n\n    display_element.appendChild(canvas);\n    display_element.appendChild(gamepad_connection_prompt);\n\n    this.minature_gamepad_wrapper = document.createElement(\"div\");\n    this.minature_gamepad_wrapper.id = \"gamepad-model-wrapper\";\n    this.minature_gamepad_wrapper.style.width = \"10%\";\n    this.minature_gamepad_wrapper.style.position = \"absolute\";\n    this.jsPsych.getDisplayContainerElement().appendChild(this.minature_gamepad_wrapper);\n\n    let context: CanvasRenderingContext2D = canvas.getContext(\"2d\", { willReadFrequently: true });\n\n    let stimulus: any = trial.stimulus(context);\n    let promise: Promise<any>;\n    if (stimulus instanceof Promise) {\n      promise = stimulus;\n    } else {\n      promise = Promise.resolve(stimulus);\n    }\n\n    promise.then(() => {\n      let image_data: ImageData = context.getImageData(0, 0, canvas.width, canvas.height);\n\n      this.frame_request_callback = (now: DOMHighResTimeStamp) => {\n        if (this.start_time_stamp === 0) {\n          this.start_time_stamp = now;\n        }\n\n        this.find_gamepad();\n\n        // If gamepad_is_connected is true, then gamepad_connection_prompt should be empty and vice versa\n        gamepad_connection_prompt.style.visibility = this.gamepad_is_connected ? \"hidden\" : \"\";\n\n        let time_stamp: number = now - this.start_time_stamp;\n        let delta: number = this.last_frame_time_stamp === 0 ? 0 : now - this.last_frame_time_stamp;\n\n        context.putImageData(image_data, 0, 0);\n        trial.on_frame_update(context, this.gamepad, time_stamp, delta);\n\n        if (trial.display_minature_gamepad && this.minature_gamepad_wrapper !== null) {\n          this.minature_gamepad?.update(this.gamepad);\n        }\n\n        this.gamepad_inputs.push(this.gamepad);\n\n        if (trial.end_trial(context, this.gamepad, time_stamp, delta)) {\n          finish_trial({\n            rt: time_stamp,\n            input: this.gamepad_inputs,\n          });\n        }\n\n        this.last_frame_time_stamp = now;\n\n        this.animation_frame_id = window.requestAnimationFrame(this.frame_request_callback);\n      };\n\n      on_load();\n\n      this.animation_frame_id = window.requestAnimationFrame(this.frame_request_callback);\n    });\n\n    let finish_trial: Function = (data: object) => {\n      window.cancelAnimationFrame(this.animation_frame_id);\n      display_element.innerHTML = \"\";\n      this.minature_gamepad_wrapper.remove();\n      this.jsPsych.finishTrial(data);\n    };\n  }\n}\n\nexport default GamepadPlugin;\n"],"names":["GamepadModel","gamepad","parent","size","_classCallCheck","this","draw_call_list","draw_outline","_context","canvas","document","createElement","width","height","style","appendChild","context","getContext","willReadFrequently","_createClass","key","value","component","axes_id","button_id","_this","Path2D","push","save","fillStyle","concat","buttons","_a","lineWidth","stroke","fill","restore","axes_1","axes","axes_2","path","arc","x","radius","y","Math","PI","clearRect","_step","_iterator","_createForOfIteratorHelper","s","n","done","func","err","e","f","GamepadModels","model","outline_left","outline_right","ls_outline","rs_outline","d_outline","draw_component","info","name","parameters","canvas_size","type","ParameterType","INT","default","array","display_minature_gamepad","BOOL","end_trial","FUNCTION","_gamepad","_time_stamp","_delta_time","gamepad_connection_prompt","STRING","on_frame_update","stimulus","GamepadPlugin","jsPsych","gamepad_is_connected","minature_gamepad","start_time_stamp","last_frame_time_stamp","animation_frame_id","frame_request_callback","_time","gamepad_inputs","navigator","getGamepads","Gamepad","previous_gamepad_id","id","minature_gamepad_wrapper","innerHTML","display_element","trial","on_load","textAlign","position","getDisplayContainerElement","Promise","resolve","then","image_data","getImageData","now","find_gamepad","visibility","time_stamp","delta","putImageData","update","finish_trial","rt","input","window","requestAnimationFrame","data","cancelAnimationFrame","remove","finishTrial"],"mappings":"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"}