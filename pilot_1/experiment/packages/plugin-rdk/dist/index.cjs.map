{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"rdk\",\n  parameters: {\n    /** Array containing the valid key(s) that the subject can press to indicate a response. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** Array containing the correct key(s) for that trial. */\n    correct_choice: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Correct choice\",\n      default: undefined,\n    },\n    /** The length of stimulus presentation. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: 500,\n    },\n    /** If true, then any valid key will end the trial. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** The number of RDK apertures (If more than one, make sure to separate them by setting aperture_center_x and aperture_center_y for each RDK). */\n    number_of_apertures: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of apertures\",\n      default: 1,\n    },\n    /** The number of dots per set in the stimulus. */\n    number_of_dots: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of dots\",\n      default: 300,\n    },\n    /** The number of sets of dots to cycle through. */\n    number_of_sets: {\n      type: ParameterType.INT,\n      pretty_name: \"Number of sets\",\n      default: 1,\n    },\n    /** The direction of coherent motion in degrees. */\n    coherent_direction: {\n      type: ParameterType.INT,\n      pretty_name: \"Coherent direction\",\n      default: 0,\n    },\n    /** The proportion of dots moving in the coherent direction. */\n    coherence: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Coherence\",\n      default: 0.5,\n    },\n    /** The proportion of dots moving in the direction opposite of the coherent direction. */\n    opposite_coherence: {\n      type: ParameterType.FLOAT,\n      pretty_name: \"Opposite coherence\",\n      default: 0,\n    },\n    /** The radius of the dots in pixels */\n    dot_radius: {\n      type: ParameterType.INT,\n      pretty_name: \"Dot radius\",\n      default: 2,\n    },\n    /** The length of the side of a dot in pixels (only when dot_shape is \"square\") */\n    dot_side_length: {\n      type: ParameterType.INT,\n      pretty_name: \"Dot side length\",\n      default: 1,\n    },\n    /** The number of frames that pass before each dot disappears and reappears somewhere else. */\n    dot_life: {\n      type: ParameterType.INT,\n      pretty_name: \"Dot life\",\n      default: -1,\n    },\n    /** The distance in pixels each dot moves per frame. */\n    move_distance: {\n      type: ParameterType.INT,\n      pretty_name: \"Move distance\",\n      default: 1,\n    },\n    /** The width of the aperture in pixels. */\n    aperture_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture width\",\n      default: 600,\n    },\n    /** The height of the aperture in pixels. */\n    aperture_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture height\",\n      default: 400,\n    },\n    /** The color of the dots. */\n    dot_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Dot color\",\n      default: \"white\",\n    },\n    /** The shape of the dots */\n    dot_shape: {\n      type: ParameterType.STRING,\n      pretty_name: \"Dot shape\",\n      default: \"circle\",\n    },\n    /** The background color of the stimulus. */\n    background_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Background color\",\n      default: \"gray\",\n    },\n    /** The type of RDK (refer to documentation for details). */\n    RDK_type: {\n      type: ParameterType.INT,\n      pretty_name: \"RDK type\",\n      default: 3,\n    },\n    /** The shape of the aperture. */\n    aperture_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture Type\",\n      default: 2,\n    },\n    /** The reinsertion rule for dots that move out of the aperture. */\n    reinsert_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Reinsert type\",\n      default: 2,\n    },\n    /** The x-coordinate of the center of the aperture. */\n    aperture_center_x: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture center X\",\n      default: window.innerWidth / 2,\n    },\n    /** The y-coordinate of the center of the aperture. */\n    aperture_center_y: {\n      type: ParameterType.INT,\n      pretty_name: \"Aperture center Y\",\n      default: window.innerHeight / 2,\n    },\n    /** If true, then a fixation cross will be present in the middle of the screen. */\n    fixation_cross: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Fixation cross\",\n      default: false,\n    },\n    /** The width of the fixation cross in pixels. */\n    fixation_cross_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Fixation cross width\",\n      default: 20,\n    },\n    /** The height of the fixation cross in pixels. */\n    fixation_cross_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Fixation cross height\",\n      default: 20,\n    },\n    /** The color of the fixation cross. */\n    fixation_cross_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Fixation cross color\",\n      default: \"black\",\n    },\n    /** The thickness of the fixation cross. */\n    fixation_cross_thickness: {\n      type: ParameterType.INT,\n      pretty_name: \"Fixation cross thickness\",\n      default: 1,\n    },\n    /** The presence of a border around the aperture. */\n    border: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Border\",\n      default: false,\n    },\n    /** The thickness of the border in pixels. */\n    border_thickness: {\n      type: ParameterType.INT,\n      pretty_name: \"Border width\",\n      default: 1,\n    },\n    /** The color of the border. */\n    border_color: {\n      type: ParameterType.STRING,\n      pretty_name: \"Border Color\",\n      default: 1,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **RDK**\n *\n * jsPsych plugin for showing a random-dot kinematogram stimulus and recording a keyboard response\n *\n * @author Sivananda Rajananda\n * @see {@link https://www.jspsych.org/plugins/jspsych-rdk/ RDK plugin documentation on jspsych.org}\n * @copyright\n *\n * This code was created in the Consciousness and Metacognition Lab at UCLA,\n * under the supervision of Brian Odegaard and Hakwan Lau\n *\n * We would appreciate it if you cited this paper when you use the RDK:\n * Rajananda, S., Lau, H. & Odegaard, B., (2018). A Random-Dot Kinematogram for Web-Based Vision Research. Journal of Open Research Software. 6(1), p.6. DOI: [http://doi.org/10.5334/jors.194]\n *\n * ----------------------\n *\n * Copyright (C) 2017  Sivananda Rajananda\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n */\nclass RdkPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    //--------------------------------------\n    //---------SET PARAMETERS BEGIN---------\n    //--------------------------------------\n\n    //Note on '||' logical operator: If the first option is 'undefined', it evalutes to 'false' and the second option is returned as the assignment\n    // Note: trial properties are now read-only, so these params have all been changed to separate variables here and throughout trial function\n    var choices = assignParameterValue(trial.choices, []);\n    var correct_choice = assignParameterValue(trial.correct_choice, undefined);\n    var trial_duration = assignParameterValue(trial.trial_duration, 500);\n    var response_ends_trial = assignParameterValue(trial.response_ends_trial, true);\n    var number_of_apertures = assignParameterValue(trial.number_of_apertures, 1);\n    var number_of_dots = assignParameterValue(trial.number_of_dots, 300);\n    var number_of_sets = assignParameterValue(trial.number_of_sets, 1);\n    var coherent_direction = assignParameterValue(trial.coherent_direction, 0);\n    var coherence = assignParameterValue(trial.coherence, 0.5);\n    var opposite_coherence = assignParameterValue(trial.opposite_coherence, 0);\n    var dot_radius = assignParameterValue(trial.dot_radius, 2);\n    var dot_side_length = assignParameterValue(trial.dot_side_length, 1);\n    var dot_life = assignParameterValue(trial.dot_life, -1);\n    var move_distance = assignParameterValue(trial.move_distance, 1);\n    var aperture_width = assignParameterValue(trial.aperture_width, 600);\n    var aperture_height = assignParameterValue(trial.aperture_height, 400);\n    var dot_color = assignParameterValue(trial.dot_color, \"white\");\n    var dot_shape = assignParameterValue(trial.dot_shape, \"circle\");\n    var background_color = assignParameterValue(trial.background_color, \"gray\");\n    var RDK_type = assignParameterValue(trial.RDK_type, 3);\n    var aperture_type = assignParameterValue(trial.aperture_type, 2);\n    var reinsert_type = assignParameterValue(trial.reinsert_type, 2);\n    var aperture_center_x = assignParameterValue(trial.aperture_center_x, window.innerWidth / 2);\n    var aperture_center_y = assignParameterValue(trial.aperture_center_y, window.innerHeight / 2);\n    var fixation_cross = assignParameterValue(trial.fixation_cross, false);\n    var fixation_cross_width = assignParameterValue(trial.fixation_cross_width, 20);\n    var fixation_cross_height = assignParameterValue(trial.fixation_cross_height, 20);\n    var fixation_cross_color = assignParameterValue(trial.fixation_cross_color, \"black\");\n    var fixation_cross_thickness = assignParameterValue(trial.fixation_cross_thickness, 1);\n    var border = assignParameterValue(trial.border, false);\n    var border_thickness = assignParameterValue(trial.border_thickness, 1);\n    var border_color = assignParameterValue(trial.border_color, \"black\");\n\n    //For square and circle, set the aperture height == aperture width\n    if (apertureType == 1 || apertureType == 3) {\n      aperture_height = aperture_width;\n    }\n\n    //Convert the parameter variables to those that the code below can use\n\n    var nApertures = number_of_apertures; //The number of apertures\n    var nDots = number_of_dots; //Number of dots per set (equivalent to number of dots per frame)\n    var nSets = number_of_sets; //Number of sets to cycle through per frame\n    var coherentDirection = coherent_direction; //The direction of the coherentDots in degrees. Starts at 3 o'clock and goes counterclockwise (0 == rightwards, 90 == upwards, 180 == leftwards, 270 == downwards), range 0 - 360\n    var coherence = coherence; //Proportion of dots to move together, range from 0 to 1\n    var oppositeCoherence = opposite_coherence; // The coherence for the dots going the opposite direction as the coherent dots\n    var dotRadius = dot_radius; //Radius of each dot in pixels\n    var dotSideLength = dot_side_length; // Length of dot side in pixels (only when dot_shape is \"square\")\n    var dotLife = dot_life; //How many frames a dot will keep following its trajectory before it is redrawn at a random location. -1 denotes infinite life (the dot will only be redrawn if it reaches the end of the aperture).\n    var moveDistance = move_distance; //How many pixels the dots move per frame\n    var apertureWidth = aperture_width; // How many pixels wide the aperture is. For square aperture this will be the both height and width. For circle, this will be the diameter.\n    var apertureHeight = aperture_height; //How many pixels high the aperture is. Only relevant for ellipse and rectangle apertures. For circle and square, this is ignored.\n    var dotColor = dot_color; //Color of the dots\n    var backgroundColor = background_color; //Color of the background\n    var apertureCenterX = aperture_center_x; // The x-coordinate of center of the aperture on the screen, in pixels\n    var apertureCenterY = aperture_center_y; // The y-coordinate of center of the aperture on the screen, in pixels\n\n    /** RDK type parameter\n      ** See Fig. 1 in Scase, Braddick, and Raymond (1996) for a visual depiction of these different signal selection rules and noise types\n\n      -------------------\n      SUMMARY:\n\n      Signal Selection rule:\n      -Same: Each dot is designated to be either a coherent dot (signal) or incoherent dot (noise) and will remain so throughout all frames in the display. Coherent dots will always move in the direction of coherent motion in all frames.\n      -Different: Each dot can be either a coherent dot (signal) or incoherent dot (noise) and will be designated randomly (weighted based on the coherence level) at each frame. Only the dots that are designated to be coherent dots will move in the direction of coherent motion, but only in that frame. In the next frame, each dot will be designated randomly again on whether it is a coherent or incoherent dot.\n\n      Noise Type:\n      -Random position: The incoherent dots appear in a random location in the aperture in each frame\n      -Random walk: The incoherent dots will move in a random direction (designated randomly in each frame) in each frame.\n      -Random direction: Each incoherent dot has its own alternative direction of motion (designated randomly at the beginning of the trial), and moves in that direction in each frame.\n\n      -------------------\n\n      1 - same && random position\n      2 - same && random walk\n      3 - same && random direction\n      4 - different && random position\n      5 - different && random walk\n      6 - different && random direction         */\n\n    var RDK = RDK_type;\n\n    /** \n      Shape of aperture\n      1 - Circle\n      2 - Ellipse\n      3 - Square\n      4 - Rectangle\n      */\n    var apertureType = aperture_type;\n\n    /**\n      Shape of dots\n      \"circle\" (default) or \"square\"\n      */\n    var dotShape = dot_shape;\n\n    /*\n      Out of Bounds Decision\n      How we reinsert a dot that has moved outside the edges of the aperture:\n      1 - Randomly appear anywhere in the aperture\n      2 - Appear on the opposite edge of the aperture (Random if square or rectangle, reflected about origin in circle and ellipse)\n      */\n    var reinsertType = reinsert_type;\n\n    //Fixation Cross Parameters\n    var fixationCross = fixation_cross; //To display or not to display the cross\n    var fixationCrossWidth = fixation_cross_width; //The width of the fixation cross in pixels\n    var fixationCrossHeight = fixation_cross_height; //The height of the fixation cross in pixels\n    var fixationCrossColor = fixation_cross_color; //The color of the fixation cross\n    var fixationCrossThickness = fixation_cross_thickness; //The thickness of the fixation cross, must be positive number above 1\n\n    //Border Parameters\n    var border = border; //To display or not to display the border\n    var borderThickness = border_thickness; //The width of the border in pixels\n    var borderColor = border_color; //The color of the border\n\n    //--------------------------------------\n    //----------SET PARAMETERS END----------\n    //--------------------------------------\n\n    //--------Set up Canvas begin-------\n\n    //Create a canvas element and append it to the DOM\n    var canvas = document.createElement(\"canvas\");\n    display_element.appendChild(canvas);\n\n    //The document body IS 'display_element' (i.e. <body class=\"jspsych-display-element\"> .... </body> )\n    var body = document.getElementsByClassName(\"jspsych-display-element\")[0] as HTMLElement;\n\n    //Save the current settings to be restored later\n    var originalMargin = body.style.margin;\n    var originalPadding = body.style.padding;\n    var originalBackgroundColor = body.style.backgroundColor;\n\n    //Remove the margins and paddings of the display_element\n    body.style.margin = \"0\";\n    body.style.padding = \"0\";\n    body.style.backgroundColor = backgroundColor; //Match the background of the display element to the background color of the canvas so that the removal of the canvas at the end of the trial is not noticed\n\n    //Remove the margins and padding of the canvas\n    canvas.style.margin = \"0\";\n    canvas.style.padding = \"0\";\n    // use absolute positioning in top left corner to get rid of scroll bars\n    canvas.style.position = \"absolute\";\n    canvas.style.top = \"0\";\n    canvas.style.left = \"0\";\n\n    //Get the context of the canvas so that it can be painted on.\n    var ctx = canvas.getContext(\"2d\");\n\n    //Declare variables for width and height, and also set the canvas width and height to the window width and height\n    var canvasWidth = (canvas.width = window.innerWidth);\n    var canvasHeight = (canvas.height = window.innerHeight);\n\n    //Set the canvas background color\n    canvas.style.backgroundColor = backgroundColor;\n\n    //--------Set up Canvas end-------\n\n    //--------RDK variables and function calls begin--------\n\n    //This is the main part of the trial that makes everything run\n\n    //Global variable for the current aperture number\n    var currentApertureNumber;\n\n    //3D Array to hold the dots (1st D is Apertures, 2nd D is Sets, 3rd D is Dots)\n    var dotArray3d = [];\n\n    //Variables for different apertures (initialized in setUpMultipleApertures function below)\n    var nDotsArray;\n    var nSetsArray;\n    var coherentDirectionArray;\n    var coherenceArray;\n    var oppositeCoherenceArray;\n    var dotRadiusArray;\n    var dotSideLengthArray;\n    var dotLifeArray;\n    var moveDistanceArray;\n    var apertureWidthArray;\n    var apertureHeightArray;\n    var dotColorArray;\n    var dotShapeArray;\n    var apertureCenterXArray;\n    var apertureCenterYArray;\n    var RDKArray;\n    var apertureTypeArray;\n    var reinsertTypeArray;\n    var fixationCrossArray;\n    var fixationCrossWidthArray;\n    var fixationCrossHeightArray;\n    var fixationCrossColorArray;\n    var fixationCrossThicknessArray;\n    var borderArray;\n    var borderThicknessArray;\n    var borderColorArray;\n\n    //Set up the variables for the apertures\n    const setUpMultipleApertures = () => {\n      nDotsArray = setParameter(nDots);\n      nSetsArray = setParameter(nSets);\n      coherentDirectionArray = setParameter(coherentDirection);\n      coherenceArray = setParameter(coherence);\n      oppositeCoherenceArray = setParameter(oppositeCoherence);\n      dotRadiusArray = setParameter(dotRadius);\n      dotSideLengthArray = setParameter(dotSideLength);\n      dotLifeArray = setParameter(dotLife);\n      moveDistanceArray = setParameter(moveDistance);\n      apertureWidthArray = setParameter(apertureWidth);\n      apertureHeightArray = setParameter(apertureHeight);\n      dotColorArray = setParameter(dotColor);\n      dotShapeArray = setParameter(dotShape);\n      apertureCenterXArray = setParameter(apertureCenterX);\n      apertureCenterYArray = setParameter(apertureCenterY);\n      RDKArray = setParameter(RDK);\n      apertureTypeArray = setParameter(apertureType);\n      reinsertTypeArray = setParameter(reinsertType);\n      fixationCrossArray = setParameter(fixationCross);\n      fixationCrossWidthArray = setParameter(fixationCrossWidth);\n      fixationCrossHeightArray = setParameter(fixationCrossHeight);\n      fixationCrossColorArray = setParameter(fixationCrossColor);\n      fixationCrossThicknessArray = setParameter(fixationCrossThickness);\n      borderArray = setParameter(border);\n      borderThicknessArray = setParameter(borderThickness);\n      borderColorArray = setParameter(borderColor);\n\n      currentSetArray = setParameter(0); //Always starts at zero\n\n      //Loop through the number of apertures to make the dots\n      for (currentApertureNumber = 0; currentApertureNumber < nApertures; currentApertureNumber++) {\n        //Initialize the parameters to make the 2d dot array (one for each aperture);\n        initializeCurrentApertureParameters(currentApertureNumber);\n\n        //Make each 2d array and push it into the 3d array\n        dotArray3d.push(makeDotArray2d());\n      }\n    };\n\n    // Set up multiple apertures\n    setUpMultipleApertures();\n\n    //Declare aperture parameters for initialization based on shape (used in initializeApertureDimensions function below)\n    var horizontalAxis;\n    var verticalAxis;\n\n    //Calculate the x and y jump sizes for coherent dots\n    var coherentJumpSizeX;\n    var coherentJumpSizeY;\n\n    //Calculate the number of coherent, opposite coherent, and incoherent dots\n    var nCoherentDots;\n    var nOppositeCoherentDots;\n    var nIncoherentDots;\n\n    //Make the array of arrays containing dot objects\n    var dotArray2d;\n\n    var dotArray; //Declare a global variable to hold the current array\n    var currentSetArray; //Declare and initialize a global variable to cycle through the dot arrays\n\n    //Initialize stopping condition for animateDotMotion function that runs in a loop\n    var stopDotMotion = false;\n\n    //Variable to control the frame rate, to ensure that the first frame is skipped because it follows a different timing\n    var firstFrame = true; //Used to skip the first frame in animate function below (in animateDotMotion function)\n\n    //Variable to start the timer when the time comes\n    var timerHasStarted = false;\n\n    //Initialize object to store the response data. Default values of -1 are used if the trial times out and the subject has not pressed a valid key\n    var response = {\n      rt: -1,\n      key: \"\",\n    };\n\n    //Declare a global timeout ID to be initialized below in animateDotMotion function and to be used in after_response function\n    var timeoutID;\n\n    //Declare global variable to be defined in startKeyboardListener function and to be used in end_trial function\n    var keyboardListener;\n\n    //Declare global variable to store the frame rate of the trial\n    var frameRate: number | number[] = []; //How often the monitor refreshes, in ms. Currently an array to store all the intervals. Will be converted into a single number (the average) in end_trial function.\n\n    //variable to store how many frames were presented.\n    var numberOfFrames = 0;\n\n    // set up dot-drawing abstractions\n    const pi2 = Math.PI * 2;\n    const circleFn = (x: number, y: number, rad: number) => {\n      ctx.arc(x, y, rad, 0, pi2);\n    };\n    const squareFn = (x: number, y: number, half_len: number) => {\n      const len = half_len * 2;\n      ctx.rect(x - half_len, y - half_len, len, len);\n    };\n\n    //Function to start the keyboard listener\n    const startKeyboardListener = () => {\n      //Start the response listener if there are choices for keys\n      if (choices != \"NO_KEYS\") {\n        //Create the keyboard listener to listen for subjects' key response\n        keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response, //Function to call once the subject presses a valid key\n          valid_responses: choices, //The keys that will be considered a valid response and cause the callback function to be called\n          rt_method: \"performance\", //The type of method to record timing information.\n          persist: false, //If set to false, keyboard listener will only trigger the first time a valid key is pressed. If set to true, it has to be explicitly cancelled by the cancelKeyboardResponse plugin API.\n          allow_held_key: false, //Only register the key once, after this getKeyboardResponse function is called. (Check JsPsych docs for better info under 'jsPsych.pluginAPI.getKeyboardResponse').\n        });\n      }\n    };\n\n    //Function to end the trial proper\n    const end_trial = () => {\n      //Stop the dot motion animation\n      stopDotMotion = true;\n\n      //Store the number of frames\n      numberOfFrames = (frameRate as number[]).length;\n\n      //Variable to store the frame rate array\n      var frameRateArray = frameRate;\n\n      //Calculate the average frame rate\n      if (numberOfFrames > 0) {\n        //Check to make sure that the array is not empty\n        frameRate =\n          (frameRate as number[]).reduce((total, current) => total + current) / numberOfFrames; //Sum up all the elements in the array\n      } else {\n        frameRate = 0; //Set to zero if the subject presses an answer before a frame is shown (i.e. if frameRate is an empty array)\n      }\n\n      //Kill the keyboard listener if keyboardListener has been defined\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      //Place all the data to be saved from this trial in one data object\n      var trial_data = {\n        rt: response.rt, //The response time\n        response: response.key, //The key that the subject pressed\n        correct: correctOrNot(), //If the subject response was correct\n        choices: choices, //The set of valid keys\n        correct_choice: correct_choice, //The correct choice(s)\n        trial_duration: trial_duration, //The trial duration\n        response_ends_trial: response_ends_trial, //If the response ends the trial\n        number_of_apertures: number_of_apertures,\n        number_of_dots: number_of_dots,\n        number_of_sets: number_of_sets,\n        coherent_direction: coherent_direction,\n        coherence: coherence,\n        opposite_coherence: opposite_coherence,\n        dot_radius: dot_radius,\n        dot_side_length: dot_side_length,\n        dot_life: dot_life,\n        move_distance: move_distance,\n        aperture_width: aperture_width,\n        aperture_height: aperture_height,\n        dot_color: dot_color,\n        dot_shape: dot_shape,\n        background_color: background_color,\n        RDK_type: RDK_type,\n        aperture_type: aperture_type,\n        reinsert_type: reinsert_type,\n        frame_rate: frameRate, //The average frame rate for the trial\n        frame_rate_array: frameRateArray, //The array of ms per frame in this trial\n        number_of_frames: numberOfFrames, //The number of frames in this trial\n        aperture_center_x: aperture_center_x,\n        aperture_center_y: aperture_center_y,\n        fixation_cross: fixation_cross,\n        fixation_cross_width: fixation_cross_width,\n        fixation_cross_height: fixation_cross_height,\n        fixation_cross_color: fixation_cross_color,\n        fixation_cross_thickness: fixation_cross_thickness,\n        border: border,\n        border_thickness: border_thickness,\n        border_color: border_color,\n        canvas_width: canvasWidth,\n        canvas_height: canvasHeight,\n      };\n\n      //Remove the canvas as the child of the display_element element\n      display_element.innerHTML = \"\";\n\n      //Restore the settings to JsPsych defaults\n      body.style.margin = originalMargin;\n      body.style.padding = originalPadding;\n      body.style.backgroundColor = originalBackgroundColor;\n\n      //End this trial and move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    }; //End of end_trial\n\n    //This runs the dot motion simulation, updating it according to the frame refresh rate of the screen.\n    animateDotMotion();\n\n    //--------RDK variables and function calls end--------\n\n    //-------------------------------------\n    //-----------FUNCTIONS BEGIN-----------\n    //-------------------------------------\n\n    //----JsPsych Functions Begin----\n\n    //Function to record the first response by the subject\n    function after_response(info) {\n      //If the response has not been recorded, record it\n      if (response.key == \"\") {\n        response = info; //Replace the response object created above\n      }\n\n      //If the parameter is set such that the response ends the trial, then kill the timeout and end the trial\n      if (response_ends_trial) {\n        window.clearTimeout(timeoutID);\n        end_trial();\n      }\n    } //End of after_response\n\n    //Function that determines if the response is correct\n    const correctOrNot = () => {\n      //Check that the correct_choice has been defined and that it is an array\n      if (typeof correct_choice !== \"undefined\" && correct_choice.constructor === Array) {\n        if (typeof correct_choice[0] === \"string\" || correct_choice[0] instanceof String) {\n          var key_in_choices = correct_choice.every((x: string) => {\n            return this.jsPsych.pluginAPI.compareKeys(x, response.key);\n          });\n          return key_in_choices; //If the response is included in the correct_choice array, return true. Else, return false.\n        } else if (typeof correct_choice[0] === \"number\") {\n          // the elements are numbers (javascript character codes)\n          console.error(\n            \"Error in RDK plugin: elements in the correct_choice array must be key characters (strings).\"\n          );\n          return false; // added due to TS error: not all code paths return a value\n        } else {\n          console.error(\n            \"Error in RDK plugin: elements in the correct_choice array must be key characters (strings).\"\n          );\n          return false; // added due to TS error: not all code paths return a value\n        }\n      } else {\n        console.error(\n          \"Error in RDK plugin: you must specify an array of key characters for the correct_choice parameter.\"\n        );\n        return false; // added due to TS error: not all code paths return a value\n      }\n    };\n\n    //----JsPsych Functions End----\n\n    //----RDK Functions Begin----\n\n    //Function to set the parameters of the array\n    //@ts-expect-error \"not all code paths return a value\"\n    function setParameter(originalVariable) {\n      //Check if it is an array and its length matches the aperture then return the original array\n      if (originalVariable.constructor === Array && originalVariable.length === nApertures) {\n        return originalVariable;\n      }\n      //Else if it is not an array, we make it an array with duplicate values\n      else if (originalVariable.constructor !== Array) {\n        var tempArray = [];\n\n        //Make a for loop and duplicate the values\n        for (var i = 0; i < nApertures; i++) {\n          tempArray.push(originalVariable);\n        }\n        return tempArray;\n      }\n      //Else if the array is not long enough, then print out that error message\n      else if (originalVariable.constructor === Array && originalVariable.length !== nApertures) {\n        console.error(\n          \"If you have more than one aperture, please ensure that arrays that are passed in as parameters are the same length as the number of apertures. Else you can use a single value without the array\"\n        );\n      }\n      //Else print a generic error\n      else {\n        console.error(\n          \"A parameter is incorrectly set. Please ensure that the nApertures parameter is set to the correct value (if using more than one aperture), and all others parameters are set correctly.\"\n        );\n      }\n    }\n\n    //Function to set the global variables to the current aperture so that the correct dots are updated and drawn\n    function initializeCurrentApertureParameters(currentApertureNumber?) {\n      //Set the global variables to that relevant to the current aperture\n      nDots = nDotsArray[currentApertureNumber];\n      nSets = nSetsArray[currentApertureNumber];\n      coherentDirection = coherentDirectionArray[currentApertureNumber];\n      coherence = coherenceArray[currentApertureNumber];\n      oppositeCoherence = oppositeCoherenceArray[currentApertureNumber];\n      dotRadius = dotRadiusArray[currentApertureNumber];\n      dotSideLength = dotSideLengthArray[currentApertureNumber];\n      dotLife = dotLifeArray[currentApertureNumber];\n      moveDistance = moveDistanceArray[currentApertureNumber];\n      apertureWidth = apertureWidthArray[currentApertureNumber];\n      apertureHeight = apertureHeightArray[currentApertureNumber];\n      dotColor = dotColorArray[currentApertureNumber];\n      dotShape = dotShapeArray[currentApertureNumber];\n      apertureCenterX = apertureCenterXArray[currentApertureNumber];\n      apertureCenterY = apertureCenterYArray[currentApertureNumber];\n      RDK = RDKArray[currentApertureNumber];\n      apertureType = apertureTypeArray[currentApertureNumber];\n      reinsertType = reinsertTypeArray[currentApertureNumber];\n      fixationCross = fixationCrossArray[currentApertureNumber];\n      fixationCrossWidth = fixationCrossWidthArray[currentApertureNumber];\n      fixationCrossHeight = fixationCrossHeightArray[currentApertureNumber];\n      fixationCrossColor = fixationCrossColorArray[currentApertureNumber];\n      fixationCrossThickness = fixationCrossThicknessArray[currentApertureNumber];\n      border = borderArray[currentApertureNumber];\n      borderThickness = borderThicknessArray[currentApertureNumber];\n      borderColor = borderColorArray[currentApertureNumber];\n\n      //Calculate the x and y jump sizes for coherent dots\n      coherentJumpSizeX = calculateCoherentJumpSizeX(coherentDirection);\n      coherentJumpSizeY = calculateCoherentJumpSizeY(coherentDirection);\n\n      //Initialize the aperture parameters\n      initializeApertureDimensions();\n\n      //Calculate the number of coherent, opposite coherent, and incoherent dots\n      nCoherentDots = nDots * coherence;\n      nOppositeCoherentDots = nDots * oppositeCoherence;\n      nIncoherentDots = nDots - (nCoherentDots + nOppositeCoherentDots);\n\n      //If the 3d array has been made, then choose the 2d array and the current set\n      dotArray2d = dotArray3d.length !== 0 ? dotArray3d[currentApertureNumber] : undefined;\n    } // End of initializeCurrentApertureParameters\n\n    //Calculate coherent jump size in the x direction\n    function calculateCoherentJumpSizeX(coherentDirection) {\n      var angleInRadians = (coherentDirection * Math.PI) / 180;\n      return moveDistance * Math.cos(angleInRadians);\n    }\n\n    //Calculate coherent jump size in the y direction\n    function calculateCoherentJumpSizeY(coherentDirection) {\n      var angleInRadians = (-coherentDirection * Math.PI) / 180; //Negative sign because the y-axis is flipped on screen\n      return moveDistance * Math.sin(angleInRadians);\n    }\n\n    //Initialize the parameters for the aperture for further calculation\n    function initializeApertureDimensions() {\n      //For circle and square\n      if (apertureType == 1 || apertureType == 3) {\n        horizontalAxis = verticalAxis = apertureWidth / 2;\n      }\n      //For ellipse and rectangle\n      else if (apertureType == 2 || apertureType == 4) {\n        horizontalAxis = apertureWidth / 2;\n        verticalAxis = apertureHeight / 2;\n      }\n    }\n\n    //Make the 2d array, which is an array of array of dots\n    function makeDotArray2d() {\n      //Declare an array to hold the sets of dot arrays\n      var tempArray = [];\n      //Loop for each set of dot array\n      for (var i = 0; i < nSets; i++) {\n        tempArray.push(makeDotArray()); //Make a dot array and push it into the 2d array\n      }\n      return tempArray;\n    }\n\n    //Make the dot array\n    function makeDotArray() {\n      var tempArray = [];\n      for (var i = 0; i < nDots; i++) {\n        //Initialize a dot to be modified and inserted into the array\n        var dot = {\n          x: 0, //x coordinate\n          y: 0, //y coordinate\n          vx: 0, //coherent x jumpsize (if any)\n          vy: 0, //coherent y jumpsize (if any)\n          vx2: 0, //incoherent (random) x jumpsize (if any)\n          vy2: 0, //incoherent (random) y jumpsize (if any)\n          latestXMove: 0, //Stores the latest x move direction for the dot (to be used in reinsertOnOppositeEdge function below)\n          latestYMove: 0, //Stores the latest y move direction for the dot (to be used in reinsertOnOppositeEdge function below)\n          lifeCount: Math.floor(randomNumberBetween(0, dotLife)), //Counter for the dot's life. Updates every time it is shown in a frame\n          updateType: \"\", //String to determine how this dot is updated\n        };\n\n        //randomly set the x and y coordinates\n        dot = resetLocation(dot);\n\n        //For the same && random position RDK type\n        if (RDK == 1) {\n          //For coherent dots\n          if (i < nCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"constant direction\";\n          }\n          //For opposite coherent dots\n          else if (i >= nCoherentDots && i < nCoherentDots + nOppositeCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"opposite direction\";\n          }\n          //For incoherent dots\n          else {\n            dot.updateType = \"random position\";\n          }\n        } //End of RDK==1\n\n        //For the same && random walk RDK type\n        if (RDK == 2) {\n          //For coherent dots\n          if (i < nCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"constant direction\";\n          }\n          //For opposite coherent dots\n          else if (i >= nCoherentDots && i < nCoherentDots + nOppositeCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"opposite direction\";\n          }\n          //For incoherent dots\n          else {\n            dot.updateType = \"random walk\";\n          }\n        } //End of RDK==2\n\n        //For the same && random direction RDK type\n        if (RDK == 3) {\n          //For coherent dots\n          if (i < nCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"constant direction\";\n          }\n          //For opposite coherent dots\n          else if (i >= nCoherentDots && i < nCoherentDots + nOppositeCoherentDots) {\n            dot = setvxvy(dot); // Set dot.vx and dot.vy\n            dot.updateType = \"opposite direction\";\n          }\n          //For incoherent dots\n          else {\n            setvx2vy2(dot); // Set dot.vx2 and dot.vy2\n            dot.updateType = \"random direction\";\n          }\n        } //End of RDK==3\n\n        //For the different && random position RDK type\n        if (RDK == 4) {\n          //For all dots\n          dot = setvxvy(dot); // Set dot.vx and dot.vy\n          dot.updateType = \"constant direction or opposite direction or random position\";\n        } //End of RDK==4\n\n        //For the different && random walk RDK type\n        if (RDK == 5) {\n          //For all dots\n          dot = setvxvy(dot); // Set dot.vx and dot.vy\n          dot.updateType = \"constant direction or opposite direction or random walk\";\n        } //End of RDK==5\n\n        //For the different && random direction RDK type\n        if (RDK == 6) {\n          //For all dots\n          dot = setvxvy(dot); // Set dot.vx and dot.vy\n          //Each dot will have its own alternate direction of motion\n          setvx2vy2(dot); // Set dot.vx2 and dot.vy2\n          dot.updateType = \"constant direction or opposite direction or random direction\";\n        } //End of RDK==6\n\n        tempArray.push(dot);\n      } //End of for loop\n      return tempArray;\n    }\n\n    //Function to update all the dots all the apertures and then draw them\n    function updateAndDraw() {\n      //Three for loops that do things in sequence: clear, update, and draw dots.\n\n      // Clear all the current dots\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      // Update all the relevant dots\n      for (currentApertureNumber = 0; currentApertureNumber < nApertures; currentApertureNumber++) {\n        //Initialize the variables for each parameter\n        initializeCurrentApertureParameters(currentApertureNumber);\n\n        //Update the dots\n        updateDots();\n      }\n\n      // Draw all the relevant dots on the canvas\n      for (currentApertureNumber = 0; currentApertureNumber < nApertures; currentApertureNumber++) {\n        //Initialize the variables for each parameter\n        initializeCurrentApertureParameters(currentApertureNumber);\n\n        //Draw on the canvas\n        draw();\n      }\n      //Draw the fixation cross if we want it\n      if (fixationCross === true) {\n        //Horizontal line\n        ctx.beginPath();\n        ctx.lineWidth = fixationCrossThickness;\n        ctx.moveTo(canvasWidth / 2 - fixationCrossWidth, canvasHeight / 2);\n        ctx.lineTo(canvasWidth / 2 + fixationCrossWidth, canvasHeight / 2);\n\n        //Vertical line\n        ctx.moveTo(canvasWidth / 2, canvasHeight / 2 - fixationCrossHeight);\n        ctx.lineTo(canvasWidth / 2, canvasHeight / 2 + fixationCrossHeight);\n        ctx.strokeStyle = fixationCrossColor;\n        ctx.stroke();\n      }\n    }\n\n    //Draw the dots on the canvas after they're updated\n    function draw() {\n      //Load in the current set of dot array for easy handling\n      const dotArray = dotArray2d[currentSetArray[currentApertureNumber]];\n\n      let drawFn;\n      let dot_size;\n      if (dotShape == \"square\") {\n        drawFn = squareFn;\n        dot_size = dotSideLength * 0.5;\n      } else {\n        drawFn = circleFn;\n        dot_size = dotRadius;\n      }\n\n      //Loop through the dots one by one and draw them\n      ctx.fillStyle = dotColor;\n      ctx.beginPath();\n      for (let i = 0; i < nDots; i++) {\n        const dot = dotArray[i];\n        ctx.moveTo(dot.x + dot_size, dot.y);\n        drawFn(dot.x, dot.y, dot_size);\n      }\n      ctx.fill();\n\n      //Draw the border if we want it\n      if (border === true) {\n        //For circle and ellipse\n        if (apertureType === 1 || apertureType === 2) {\n          ctx.lineWidth = borderThickness;\n          ctx.strokeStyle = borderColor;\n          ctx.beginPath();\n          ctx.ellipse(\n            apertureCenterX,\n            apertureCenterY,\n            horizontalAxis + borderThickness / 2,\n            verticalAxis + borderThickness / 2,\n            0,\n            0,\n            pi2\n          );\n          ctx.stroke();\n        } //End of if circle or ellipse\n\n        //For square and rectangle\n        if (apertureType === 3 || apertureType === 4) {\n          ctx.lineWidth = borderThickness;\n          ctx.strokeStyle = borderColor;\n          ctx.strokeRect(\n            apertureCenterX - horizontalAxis - borderThickness / 2,\n            apertureCenterY - verticalAxis - borderThickness / 2,\n            horizontalAxis * 2 + borderThickness,\n            verticalAxis * 2 + borderThickness\n          );\n        } //End of if square or\n      } //End of if border === true\n    } //End of draw\n\n    //Update the dots with their new location\n    function updateDots() {\n      //Cycle through to the next set of dots\n      if (currentSetArray[currentApertureNumber] == nSets - 1) {\n        currentSetArray[currentApertureNumber] = 0;\n      } else {\n        currentSetArray[currentApertureNumber] = currentSetArray[currentApertureNumber] + 1;\n      }\n\n      //Load in the current set of dot array for easy handling\n      var dotArray = dotArray2d[currentSetArray[currentApertureNumber]];\n\n      //Loop through the dots one by one and update them accordingly\n      for (var i = 0; i < nDots; i++) {\n        var dot = dotArray[i]; //Load the current dot into the variable for easy handling\n\n        //Generate a random value\n        var randomValue = Math.random();\n\n        //Update based on the dot's update type\n        if (dot.updateType == \"constant direction\") {\n          dot = constantDirectionUpdate(dot);\n        } else if (dot.updateType == \"opposite direction\") {\n          dot = oppositeDirectionUpdate(dot);\n        } else if (dot.updateType == \"random position\") {\n          dot = resetLocation(dot);\n        } else if (dot.updateType == \"random walk\") {\n          dot = randomWalkUpdate(dot);\n        } else if (dot.updateType == \"random direction\") {\n          dot = randomDirectionUpdate(dot);\n        } else if (\n          dot.updateType == \"constant direction or opposite direction or random position\"\n        ) {\n          //Randomly select if the dot goes in a constant direction or random position, weighted based on the coherence level\n          if (randomValue < coherence) {\n            dot = constantDirectionUpdate(dot);\n          } else if (randomValue >= coherence && randomValue < coherence + oppositeCoherence) {\n            dot = oppositeDirectionUpdate(dot);\n          } else {\n            dot = resetLocation(dot);\n          }\n        } else if (dot.updateType == \"constant direction or opposite direction or random walk\") {\n          //Randomly select if the dot goes in a constant direction or random walk, weighted based on the coherence level\n          if (randomValue < coherence) {\n            dot = constantDirectionUpdate(dot);\n          } else if (randomValue >= coherence && randomValue < coherence + oppositeCoherence) {\n            dot = oppositeDirectionUpdate(dot);\n          } else {\n            dot = randomWalkUpdate(dot);\n          }\n        } else if (\n          dot.updateType == \"constant direction or opposite direction or random direction\"\n        ) {\n          //Randomly select if the dot goes in a constant direction or random direction, weighted based on the coherence level\n          if (randomValue < coherence) {\n            dot = constantDirectionUpdate(dot);\n          } else if (randomValue >= coherence && randomValue < coherence + oppositeCoherence) {\n            dot = oppositeDirectionUpdate(dot);\n          } else {\n            dot = randomDirectionUpdate(dot);\n          }\n        } //End of if dot.updateType == ...\n\n        //Increment the life count\n        dot.lifeCount++;\n\n        //Check if out of bounds or if life ended\n        if (lifeEnded(dot)) {\n          dot = resetLocation(dot);\n        }\n\n        //If it goes out of bounds, do what is necessary (reinsert randomly or reinsert on the opposite edge) based on the parameter chosen\n        if (outOfBounds(dot)) {\n          switch (reinsertType) {\n            case 1:\n              dot = resetLocation(dot);\n              break;\n            case 2:\n              dot = reinsertOnOppositeEdge(dot);\n              break;\n          } //End of switch statement\n        } //End of if\n      } //End of for loop\n    } //End of updateDots function\n\n    //Function to check if dot life has ended\n    function lifeEnded(dot) {\n      //If we want infinite dot life\n      if (dotLife < 0) {\n        dot.lifeCount = 0; //resetting to zero to save memory. Otherwise it might increment to huge numbers.\n        return false;\n      }\n      //Else if the dot's life has reached its end\n      else if (dot.lifeCount >= dotLife) {\n        dot.lifeCount = 0;\n        return true;\n      }\n      //Else the dot's life has not reached its end\n      else {\n        return false;\n      }\n    }\n\n    //Function to check if dot is out of bounds\n    //@ts-expect-error \"not all code paths return a value\"\n    function outOfBounds(dot) {\n      //For circle and ellipse\n      if (apertureType == 1 || apertureType == 2) {\n        if (\n          dot.x < xValueNegative(dot.y) ||\n          dot.x > xValuePositive(dot.y) ||\n          dot.y < yValueNegative(dot.x) ||\n          dot.y > yValuePositive(dot.x)\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      //For square and rectangle\n      if (apertureType == 3 || apertureType == 4) {\n        if (\n          dot.x < apertureCenterX - horizontalAxis ||\n          dot.x > apertureCenterX + horizontalAxis ||\n          dot.y < apertureCenterY - verticalAxis ||\n          dot.y > apertureCenterY + verticalAxis\n        ) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }\n\n    //Set the vx and vy for the dot to the coherent jump sizes of the X and Y directions\n    function setvxvy(dot) {\n      dot.vx = coherentJumpSizeX;\n      dot.vy = coherentJumpSizeY;\n      return dot;\n    }\n\n    //Set the vx2 and vy2 based on a random angle\n    function setvx2vy2(dot) {\n      //Generate a random angle of movement\n      var theta = randomNumberBetween(-Math.PI, Math.PI);\n      //Update properties vx2 and vy2 with the alternate directions\n      dot.vx2 = Math.cos(theta) * moveDistance;\n      dot.vy2 = -Math.sin(theta) * moveDistance;\n      return dot;\n    }\n\n    //Updates the x and y coordinates by moving it in the x and y coherent directions\n    function constantDirectionUpdate(dot) {\n      dot.x += dot.vx;\n      dot.y += dot.vy;\n      dot.latestXMove = dot.vx;\n      dot.latestYMove = dot.vy;\n      return dot;\n    }\n\n    //Updates the x and y coordinates by moving it in the opposite x and y coherent directions\n    function oppositeDirectionUpdate(dot) {\n      dot.x -= dot.vx;\n      dot.y -= dot.vy;\n      dot.latestXMove = -dot.vx;\n      dot.latestYMove = -dot.vy;\n      return dot;\n    }\n\n    //Creates a new angle to move towards and updates the x and y coordinates\n    function randomWalkUpdate(dot) {\n      //Generate a random angle of movement\n      var theta = randomNumberBetween(-Math.PI, Math.PI);\n      //Generate the movement from the angle\n      dot.latestXMove = Math.cos(theta) * moveDistance;\n      dot.latestYMove = -Math.sin(theta) * moveDistance;\n      //Update x and y coordinates with the new location\n      dot.x += dot.latestXMove;\n      dot.y += dot.latestYMove;\n      return dot;\n    }\n\n    //Updates the x and y coordinates with the alternative move direction\n    function randomDirectionUpdate(dot) {\n      dot.x += dot.vx2;\n      dot.y += dot.vy2;\n      dot.latestXMove = dot.vx2;\n      dot.latestYMove = dot.vy2;\n      return dot;\n    }\n\n    //Calculates a random position on the opposite edge to reinsert the dot\n    function reinsertOnOppositeEdge(dot) {\n      //If it is a circle or ellipse\n      if (apertureType == 1 || apertureType == 2) {\n        //Bring the dot back into the aperture by moving back one step\n        dot.x -= dot.latestXMove;\n        dot.y -= dot.latestYMove;\n\n        //Move the dot to the position relative to the origin to be reflected about the origin\n        dot.x -= apertureCenterX;\n        dot.y -= apertureCenterY;\n\n        //Reflect the dot about the origin\n        dot.x = -dot.x;\n        dot.y = -dot.y;\n\n        //Move the dot back to the center of the screen\n        dot.x += apertureCenterX;\n        dot.y += apertureCenterY;\n      } //End of if apertureType == 1 | == 2\n\n      //If it is a square or rectangle, re-insert on one of the opposite edges\n      if (apertureType == 3 || apertureType == 4) {\n        /** The formula for calculating whether a dot appears from the vertical edge (left or right edges) is dependent on the direction of the dot and the ratio of the vertical and horizontal edge lengths.\n          E.g.  \n          Aperture is 100 px high and 200px wide\n          Dot is moving 3 px in x direction and 4px in y direction\n          Weight on vertical edge (sides)           = (100/(100+200)) * (|3| / (|3| + |4|)) = 1/7\n          Weight on horizontal edge (top or bottom) = (200/(100+200)) * (|4| / (|3| + |4|)) = 8/21\n        \n          The weights above are the ratios to one another.\n          E.g. (cont.)\n          Ratio (vertical edge : horizontal edge) == (1/7 : 8/21)\n          Total probability space = 1/7 + 8/21 = 11/21\n          Probability that dot appears on vertical edge   = (1/7)/(11/21) = 3/11\n          Probability that dot appears on horizontal edge = (8/21)/(11/21) = 8/11\n          */\n\n        //Get the absolute values of the latest X and Y moves and store them in variables for easy handling.\n        var absX = Math.abs(dot.latestXMove);\n        var absY = Math.abs(dot.latestYMove);\n        //Calculate the direction weights based on direction the dot was moving\n        var weightInXDirection = absX / (absX + absY);\n        var weightInYDirection = absY / (absX + absY);\n        //Calculate the weight of the edge the dot should appear from, based on direction of dot and ratio of the aperture edges\n        var weightOnVerticalEdge =\n          (verticalAxis / (verticalAxis + horizontalAxis)) * weightInXDirection;\n        var weightOnHorizontalEdge =\n          (horizontalAxis / (verticalAxis + horizontalAxis)) * weightInYDirection;\n\n        //Generate a bounded random number to determine if the dot should appear on the vertical edge or the horizontal edge\n        if (\n          weightOnVerticalEdge >\n          (weightOnHorizontalEdge + weightOnVerticalEdge) * Math.random()\n        ) {\n          //If yes, appear on the left or right edge (vertical edge)\n          if (dot.latestXMove < 0) {\n            //If dots move left, appear on right edge\n            dot.x = apertureCenterX + horizontalAxis;\n            dot.y = randomNumberBetween(\n              apertureCenterY - verticalAxis,\n              apertureCenterY + verticalAxis\n            );\n          } else {\n            //Else dots move right, so they should appear on the left edge\n            dot.x = apertureCenterX - horizontalAxis;\n            dot.y = randomNumberBetween(\n              apertureCenterY - verticalAxis,\n              apertureCenterY + verticalAxis\n            );\n          }\n        } else {\n          //Else appear on the top or bottom edge (horizontal edge)\n          if (dot.latestYMove < 0) {\n            //If dots move upwards, then appear on bottom edge\n            dot.y = apertureCenterY + verticalAxis;\n            dot.x = randomNumberBetween(\n              apertureCenterX - horizontalAxis,\n              apertureCenterX + horizontalAxis\n            );\n          } else {\n            //If dots move downwards, then appear on top edge\n            dot.y = apertureCenterY - verticalAxis;\n            dot.x = randomNumberBetween(\n              apertureCenterX - horizontalAxis,\n              apertureCenterX + horizontalAxis\n            );\n          }\n        }\n      } //End of apertureType == 3\n      return dot;\n    } //End of reinsertOnOppositeEdge\n\n    //Calculate the POSITIVE y value of a point on the edge of the ellipse given an x-value\n    function yValuePositive(x: number) {\n      x = x - apertureCenterX; //Bring it back to the (0,0) center to calculate accurately (ignore the y-coordinate because it is not necessary for calculation)\n      return (\n        verticalAxis * Math.sqrt(1 - Math.pow(x, 2) / Math.pow(horizontalAxis, 2)) + apertureCenterY\n      ); //Calculated the positive y value and added apertureCenterY to recenter it on the screen\n    }\n\n    //Calculate the NEGATIVE y value of a point on the edge of the ellipse given an x-value\n    function yValueNegative(x: number) {\n      x = x - apertureCenterX; //Bring it back to the (0,0) center to calculate accurately (ignore the y-coordinate because it is not necessary for calculation)\n      return (\n        -verticalAxis * Math.sqrt(1 - Math.pow(x, 2) / Math.pow(horizontalAxis, 2)) +\n        apertureCenterY\n      ); //Calculated the negative y value and added apertureCenterY to recenter it on the screen\n    }\n\n    //Calculate the POSITIVE x value of a point on the edge of the ellipse given a y-value\n    function xValuePositive(y: number) {\n      y = y - apertureCenterY; //Bring it back to the (0,0) center to calculate accurately (ignore the x-coordinate because it is not necessary for calculation)\n      return (\n        horizontalAxis * Math.sqrt(1 - Math.pow(y, 2) / Math.pow(verticalAxis, 2)) + apertureCenterX\n      ); //Calculated the positive x value and added apertureCenterX to recenter it on the screen\n    }\n\n    //Calculate the NEGATIVE x value of a point on the edge of the ellipse given a y-value\n    function xValueNegative(y: number) {\n      y = y - apertureCenterY; //Bring it back to the (0,0) center to calculate accurately (ignore the x-coordinate because it is not necessary for calculation)\n      return (\n        -horizontalAxis * Math.sqrt(1 - Math.pow(y, 2) / Math.pow(verticalAxis, 2)) +\n        apertureCenterX\n      ); //Calculated the negative x value and added apertureCenterX to recenter it on the screen\n    }\n\n    //Calculate a random x and y coordinate in the ellipse\n    function resetLocation(dot) {\n      //For circle and ellipse\n      if (apertureType == 1 || apertureType == 2) {\n        var phi = randomNumberBetween(-Math.PI, Math.PI);\n        var rho = Math.random();\n\n        var x = Math.sqrt(rho) * Math.cos(phi);\n        var y = Math.sqrt(rho) * Math.sin(phi);\n\n        x = x * horizontalAxis + apertureCenterX;\n        y = y * verticalAxis + apertureCenterY;\n\n        dot.x = x;\n        dot.y = y;\n      }\n      //For square and rectangle\n      else if (apertureType == 3 || apertureType == 4) {\n        dot.x = randomNumberBetween(\n          apertureCenterX - horizontalAxis,\n          apertureCenterX + horizontalAxis\n        ); //Between the left and right edges of the square / rectangle\n        dot.y = randomNumberBetween(apertureCenterY - verticalAxis, apertureCenterY + verticalAxis); //Between the top and bottom edges of the square / rectangle\n      }\n\n      return dot;\n    }\n\n    //Generates a random number (with decimals) between 2 values\n    function randomNumberBetween(lowerBound, upperBound) {\n      return lowerBound + Math.random() * (upperBound - lowerBound);\n    }\n\n    //Function to make the dots move on the canvas\n    function animateDotMotion() {\n      //frameRequestID saves a long integer that is the ID of this frame request. The ID is then used to terminate the request below.\n      var frameRequestID = window.requestAnimationFrame(animate);\n\n      //Start to listen to subject's key responses\n      startKeyboardListener();\n\n      //Delare a timestamp\n      var previousTimestamp;\n\n      function animate() {\n        //If stopping condition has been reached, then stop the animation\n        if (stopDotMotion) {\n          window.cancelAnimationFrame(frameRequestID); //Cancels the frame request\n        }\n        //Else continue with another frame request\n        else {\n          frameRequestID = window.requestAnimationFrame(animate); //Calls for another frame request\n\n          //If the timer has not been started and it is set, then start the timer\n          if (!timerHasStarted && trial_duration > 0) {\n            //If the trial duration is set, then set a timer to count down and call the end_trial function when the time is up\n            //(If the subject did not press a valid keyboard response within the trial duration, then this will end the trial)\n            timeoutID = window.setTimeout(end_trial, trial_duration); //This timeoutID is then used to cancel the timeout should the subject press a valid key\n            //The timer has started, so we set the variable to true so it does not start more timers\n            timerHasStarted = true;\n          }\n\n          updateAndDraw(); //Update and draw each of the dots in their respective apertures\n\n          //If this is before the first frame, then start the timestamp\n          if (previousTimestamp === undefined) {\n            previousTimestamp = performance.now();\n          }\n          //Else calculate the time and push it into the array\n          else {\n            var currentTimeStamp = performance.now(); //Variable to hold current timestamp\n            (frameRate as number[]).push(Math.round(currentTimeStamp - previousTimestamp)); //Push the interval into the frameRate array\n            previousTimestamp = currentTimeStamp; //Reset the timestamp\n          }\n        }\n      }\n    }\n\n    //----RDK Functions End----\n\n    //----General Functions Begin//----\n\n    //Function to assign the default values for the staircase parameters\n    function assignParameterValue(argument, defaultValue) {\n      return typeof argument !== \"undefined\" ? argument : defaultValue;\n    }\n\n    //----General Functions End//----\n\n    //-------------------------------------\n    //-----------FUNCTIONS END-------------\n    //-------------------------------------\n  }\n}\n\nexport default RdkPlugin;\n"],"names":["ParameterType"],"mappings":";;;;AAEA,MAAM,IAAI,GAAU;AAClB,IAAA,IAAI,EAAE,KAAK;AACX,IAAA,UAAU,EAAE;;AAEV,QAAA,OAAO,EAAE;YACP,IAAI,EAAEA,qBAAa,CAAC,IAAI;AACxB,YAAA,WAAW,EAAE,SAAS;AACtB,YAAA,OAAO,EAAE,UAAU;AACpB,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,IAAI;AACxB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,SAAS;AACnB,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;;AAED,QAAA,mBAAmB,EAAE;YACnB,IAAI,EAAEA,qBAAa,CAAC,IAAI;AACxB,YAAA,WAAW,EAAE,qBAAqB;AAClC,YAAA,OAAO,EAAE,IAAI;AACd,SAAA;;AAED,QAAA,mBAAmB,EAAE;YACnB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,qBAAqB;AAClC,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,kBAAkB,EAAE;YAClB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,oBAAoB;AACjC,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,SAAS,EAAE;YACT,IAAI,EAAEA,qBAAa,CAAC,KAAK;AACzB,YAAA,WAAW,EAAE,WAAW;AACxB,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;;AAED,QAAA,kBAAkB,EAAE;YAClB,IAAI,EAAEA,qBAAa,CAAC,KAAK;AACzB,YAAA,WAAW,EAAE,oBAAoB;AACjC,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,UAAU,EAAE;YACV,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,YAAY;AACzB,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,eAAe,EAAE;YACf,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,iBAAiB;AAC9B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,QAAQ,EAAE;YACR,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,UAAU;YACvB,OAAO,EAAE,CAAC,CAAC;AACZ,SAAA;;AAED,QAAA,aAAa,EAAE;YACb,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,eAAe;AAC5B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;;AAED,QAAA,eAAe,EAAE;YACf,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,iBAAiB;AAC9B,YAAA,OAAO,EAAE,GAAG;AACb,SAAA;;AAED,QAAA,SAAS,EAAE;YACT,IAAI,EAAEA,qBAAa,CAAC,MAAM;AAC1B,YAAA,WAAW,EAAE,WAAW;AACxB,YAAA,OAAO,EAAE,OAAO;AACjB,SAAA;;AAED,QAAA,SAAS,EAAE;YACT,IAAI,EAAEA,qBAAa,CAAC,MAAM;AAC1B,YAAA,WAAW,EAAE,WAAW;AACxB,YAAA,OAAO,EAAE,QAAQ;AAClB,SAAA;;AAED,QAAA,gBAAgB,EAAE;YAChB,IAAI,EAAEA,qBAAa,CAAC,MAAM;AAC1B,YAAA,WAAW,EAAE,kBAAkB;AAC/B,YAAA,OAAO,EAAE,MAAM;AAChB,SAAA;;AAED,QAAA,QAAQ,EAAE;YACR,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,UAAU;AACvB,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,aAAa,EAAE;YACb,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,eAAe;AAC5B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,aAAa,EAAE;YACb,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,eAAe;AAC5B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,iBAAiB,EAAE;YACjB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,mBAAmB;AAChC,YAAA,OAAO,EAAE,MAAM,CAAC,UAAU,GAAG,CAAC;AAC/B,SAAA;;AAED,QAAA,iBAAiB,EAAE;YACjB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,mBAAmB;AAChC,YAAA,OAAO,EAAE,MAAM,CAAC,WAAW,GAAG,CAAC;AAChC,SAAA;;AAED,QAAA,cAAc,EAAE;YACd,IAAI,EAAEA,qBAAa,CAAC,IAAI;AACxB,YAAA,WAAW,EAAE,gBAAgB;AAC7B,YAAA,OAAO,EAAE,KAAK;AACf,SAAA;;AAED,QAAA,oBAAoB,EAAE;YACpB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,sBAAsB;AACnC,YAAA,OAAO,EAAE,EAAE;AACZ,SAAA;;AAED,QAAA,qBAAqB,EAAE;YACrB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,uBAAuB;AACpC,YAAA,OAAO,EAAE,EAAE;AACZ,SAAA;;AAED,QAAA,oBAAoB,EAAE;YACpB,IAAI,EAAEA,qBAAa,CAAC,MAAM;AAC1B,YAAA,WAAW,EAAE,sBAAsB;AACnC,YAAA,OAAO,EAAE,OAAO;AACjB,SAAA;;AAED,QAAA,wBAAwB,EAAE;YACxB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,0BAA0B;AACvC,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,MAAM,EAAE;YACN,IAAI,EAAEA,qBAAa,CAAC,IAAI;AACxB,YAAA,WAAW,EAAE,QAAQ;AACrB,YAAA,OAAO,EAAE,KAAK;AACf,SAAA;;AAED,QAAA,gBAAgB,EAAE;YAChB,IAAI,EAAEA,qBAAa,CAAC,GAAG;AACvB,YAAA,WAAW,EAAE,cAAc;AAC3B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;;AAED,QAAA,YAAY,EAAE;YACZ,IAAI,EAAEA,qBAAa,CAAC,MAAM;AAC1B,YAAA,WAAW,EAAE,cAAc;AAC3B,YAAA,OAAO,EAAE,CAAC;AACX,SAAA;AACF,KAAA;CACF,CAAC;AAIF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BG;AACH,MAAM,SAAS,CAAA;AAGb,IAAA,WAAA,CAAoB,OAAgB,EAAA;QAAhB,IAAO,CAAA,OAAA,GAAP,OAAO,CAAS;KAAI;IAExC,KAAK,CAAC,eAA4B,EAAE,KAAsB,EAAA;;;;;;QAOxD,IAAI,OAAO,GAAG,oBAAoB,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACtD,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAC3E,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;QACrE,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAChF,IAAI,mBAAmB,GAAG,oBAAoB,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;QAC7E,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;QACrE,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;QACnE,IAAI,kBAAkB,GAAG,oBAAoB,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAI,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;QAC3D,IAAI,kBAAkB,GAAG,oBAAoB,CAAC,KAAK,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;QAC3E,IAAI,UAAU,GAAG,oBAAoB,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;QAC3D,IAAI,eAAe,GAAG,oBAAoB,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;QACrE,IAAI,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;QACxD,IAAI,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QACjE,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;QACrE,IAAI,eAAe,GAAG,oBAAoB,CAAC,KAAK,CAAC,eAAe,EAAE,GAAG,CAAC,CAAC;QACvE,IAAI,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;QAC/D,IAAI,SAAS,GAAG,oBAAoB,CAAC,KAAK,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;QAChE,IAAI,gBAAgB,GAAG,oBAAoB,CAAC,KAAK,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC5E,IAAI,QAAQ,GAAG,oBAAoB,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACvD,IAAI,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QACjE,IAAI,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;AACjE,QAAA,IAAI,iBAAiB,GAAG,oBAAoB,CAAC,KAAK,CAAC,iBAAiB,EAAE,MAAM,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;AAC7F,QAAA,IAAI,iBAAiB,GAAG,oBAAoB,CAAC,KAAK,CAAC,iBAAiB,EAAE,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC;QAC9F,IAAI,cAAc,GAAG,oBAAoB,CAAC,KAAK,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;QACvE,IAAI,oBAAoB,GAAG,oBAAoB,CAAC,KAAK,CAAC,oBAAoB,EAAE,EAAE,CAAC,CAAC;QAChF,IAAI,qBAAqB,GAAG,oBAAoB,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC;QAClF,IAAI,oBAAoB,GAAG,oBAAoB,CAAC,KAAK,CAAC,oBAAoB,EAAE,OAAO,CAAC,CAAC;QACrF,IAAI,wBAAwB,GAAG,oBAAoB,CAAC,KAAK,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC;QACvF,IAAI,MAAM,GAAG,oBAAoB,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACvD,IAAI,gBAAgB,GAAG,oBAAoB,CAAC,KAAK,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;QACvE,IAAI,YAAY,GAAG,oBAAoB,CAAC,KAAK,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;;QAGrE,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;YAC1C,eAAe,GAAG,cAAc,CAAC;SAClC;;AAID,QAAA,IAAI,UAAU,GAAG,mBAAmB,CAAC;AACrC,QAAA,IAAI,KAAK,GAAG,cAAc,CAAC;AAC3B,QAAA,IAAI,KAAK,GAAG,cAAc,CAAC;AAC3B,QAAA,IAAI,iBAAiB,GAAG,kBAAkB,CAAC;AAC3C,QAAA,IAAI,SAAS,GAAG,SAAS,CAAC;AAC1B,QAAA,IAAI,iBAAiB,GAAG,kBAAkB,CAAC;AAC3C,QAAA,IAAI,SAAS,GAAG,UAAU,CAAC;AAC3B,QAAA,IAAI,aAAa,GAAG,eAAe,CAAC;AACpC,QAAA,IAAI,OAAO,GAAG,QAAQ,CAAC;AACvB,QAAA,IAAI,YAAY,GAAG,aAAa,CAAC;AACjC,QAAA,IAAI,aAAa,GAAG,cAAc,CAAC;AACnC,QAAA,IAAI,cAAc,GAAG,eAAe,CAAC;AACrC,QAAA,IAAI,QAAQ,GAAG,SAAS,CAAC;AACzB,QAAA,IAAI,eAAe,GAAG,gBAAgB,CAAC;AACvC,QAAA,IAAI,eAAe,GAAG,iBAAiB,CAAC;AACxC,QAAA,IAAI,eAAe,GAAG,iBAAiB,CAAC;AAExC;;;;;;;;;;;;;;;;;;;;;;AAsB8C;QAE9C,IAAI,GAAG,GAAG,QAAQ,CAAC;AAEnB;;;;;;AAMI;QACJ,IAAI,YAAY,GAAG,aAAa,CAAC;AAEjC;;;AAGI;QACJ,IAAI,QAAQ,GAAG,SAAS,CAAC;AAEzB;;;;;AAKI;QACJ,IAAI,YAAY,GAAG,aAAa,CAAC;;AAGjC,QAAA,IAAI,aAAa,GAAG,cAAc,CAAC;AACnC,QAAA,IAAI,kBAAkB,GAAG,oBAAoB,CAAC;AAC9C,QAAA,IAAI,mBAAmB,GAAG,qBAAqB,CAAC;AAChD,QAAA,IAAI,kBAAkB,GAAG,oBAAoB,CAAC;AAC9C,QAAA,IAAI,sBAAsB,GAAG,wBAAwB,CAAC;;AAGtD,QAAA,IAAI,MAAM,GAAG,MAAM,CAAC;AACpB,QAAA,IAAI,eAAe,GAAG,gBAAgB,CAAC;AACvC,QAAA,IAAI,WAAW,GAAG,YAAY,CAAC;;;;;;QAS/B,IAAI,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;AAC9C,QAAA,eAAe,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;;QAGpC,IAAI,IAAI,GAAG,QAAQ,CAAC,sBAAsB,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAgB,CAAC;;AAGxF,QAAA,IAAI,cAAc,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;AACvC,QAAA,IAAI,eAAe,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;AACzC,QAAA,IAAI,uBAAuB,GAAG,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;;AAGzD,QAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;AACxB,QAAA,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;QACzB,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;;AAG7C,QAAA,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,CAAC;AAC1B,QAAA,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,GAAG,CAAC;;AAE3B,QAAA,MAAM,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;AACnC,QAAA,MAAM,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB,QAAA,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG,CAAC;;QAGxB,IAAI,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;;QAGlC,IAAI,WAAW,IAAI,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;QACrD,IAAI,YAAY,IAAI,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC;;AAGxD,QAAA,MAAM,CAAC,KAAK,CAAC,eAAe,GAAG,eAAe,CAAC;;;;;AAS/C,QAAA,IAAI,qBAAqB,CAAC;;QAG1B,IAAI,UAAU,GAAG,EAAE,CAAC;;AAGpB,QAAA,IAAI,UAAU,CAAC;AACf,QAAA,IAAI,UAAU,CAAC;AACf,QAAA,IAAI,sBAAsB,CAAC;AAC3B,QAAA,IAAI,cAAc,CAAC;AACnB,QAAA,IAAI,sBAAsB,CAAC;AAC3B,QAAA,IAAI,cAAc,CAAC;AACnB,QAAA,IAAI,kBAAkB,CAAC;AACvB,QAAA,IAAI,YAAY,CAAC;AACjB,QAAA,IAAI,iBAAiB,CAAC;AACtB,QAAA,IAAI,kBAAkB,CAAC;AACvB,QAAA,IAAI,mBAAmB,CAAC;AACxB,QAAA,IAAI,aAAa,CAAC;AAClB,QAAA,IAAI,aAAa,CAAC;AAClB,QAAA,IAAI,oBAAoB,CAAC;AACzB,QAAA,IAAI,oBAAoB,CAAC;AACzB,QAAA,IAAI,QAAQ,CAAC;AACb,QAAA,IAAI,iBAAiB,CAAC;AACtB,QAAA,IAAI,iBAAiB,CAAC;AACtB,QAAA,IAAI,kBAAkB,CAAC;AACvB,QAAA,IAAI,uBAAuB,CAAC;AAC5B,QAAA,IAAI,wBAAwB,CAAC;AAC7B,QAAA,IAAI,uBAAuB,CAAC;AAC5B,QAAA,IAAI,2BAA2B,CAAC;AAChC,QAAA,IAAI,WAAW,CAAC;AAChB,QAAA,IAAI,oBAAoB,CAAC;AACzB,QAAA,IAAI,gBAAgB,CAAC;;QAGrB,MAAM,sBAAsB,GAAG,MAAK;AAClC,YAAA,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AACjC,YAAA,UAAU,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;AACjC,YAAA,sBAAsB,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAC;AACzD,YAAA,cAAc,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,YAAA,sBAAsB,GAAG,YAAY,CAAC,iBAAiB,CAAC,CAAC;AACzD,YAAA,cAAc,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC;AACzC,YAAA,kBAAkB,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;AACjD,YAAA,YAAY,GAAG,YAAY,CAAC,OAAO,CAAC,CAAC;AACrC,YAAA,iBAAiB,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;AAC/C,YAAA,kBAAkB,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;AACjD,YAAA,mBAAmB,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;AACnD,YAAA,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AACvC,YAAA,aAAa,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC;AACvC,YAAA,oBAAoB,GAAG,YAAY,CAAC,eAAe,CAAC,CAAC;AACrD,YAAA,oBAAoB,GAAG,YAAY,CAAC,eAAe,CAAC,CAAC;AACrD,YAAA,QAAQ,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;AAC7B,YAAA,iBAAiB,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;AAC/C,YAAA,iBAAiB,GAAG,YAAY,CAAC,YAAY,CAAC,CAAC;AAC/C,YAAA,kBAAkB,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;AACjD,YAAA,uBAAuB,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC;AAC3D,YAAA,wBAAwB,GAAG,YAAY,CAAC,mBAAmB,CAAC,CAAC;AAC7D,YAAA,uBAAuB,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC;AAC3D,YAAA,2BAA2B,GAAG,YAAY,CAAC,sBAAsB,CAAC,CAAC;AACnE,YAAA,WAAW,GAAG,YAAY,CAAC,MAAM,CAAC,CAAC;AACnC,YAAA,oBAAoB,GAAG,YAAY,CAAC,eAAe,CAAC,CAAC;AACrD,YAAA,gBAAgB,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;AAE7C,YAAA,eAAe,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;;YAGlC,KAAK,qBAAqB,GAAG,CAAC,EAAE,qBAAqB,GAAG,UAAU,EAAE,qBAAqB,EAAE,EAAE;;gBAE3F,mCAAmC,CAAC,qBAAqB,CAAC,CAAC;;AAG3D,gBAAA,UAAU,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aACnC;AACH,SAAC,CAAC;;AAGF,QAAA,sBAAsB,EAAE,CAAC;;AAGzB,QAAA,IAAI,cAAc,CAAC;AACnB,QAAA,IAAI,YAAY,CAAC;;AAGjB,QAAA,IAAI,iBAAiB,CAAC;AACtB,QAAA,IAAI,iBAAiB,CAAC;;AAGtB,QAAA,IAAI,aAAa,CAAC;AAClB,QAAA,IAAI,qBAAqB,CAAC;;AAI1B,QAAA,IAAI,UAAU,CAAC;QAGf,IAAI,eAAe,CAAC;;QAGpB,IAAI,aAAa,GAAG,KAAK,CAAC;;QAM1B,IAAI,eAAe,GAAG,KAAK,CAAC;;AAG5B,QAAA,IAAI,QAAQ,GAAG;YACb,EAAE,EAAE,CAAC,CAAC;AACN,YAAA,GAAG,EAAE,EAAE;SACR,CAAC;;AAGF,QAAA,IAAI,SAAS,CAAC;;AAGd,QAAA,IAAI,gBAAgB,CAAC;;AAGrB,QAAA,IAAI,SAAS,GAAsB,EAAE,CAAC;;QAGtC,IAAI,cAAc,GAAG,CAAC,CAAC;;AAGvB,QAAA,MAAM,GAAG,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;QACxB,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,GAAW,KAAI;AACrD,YAAA,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC7B,SAAC,CAAC;QACF,MAAM,QAAQ,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,QAAgB,KAAI;AAC1D,YAAA,MAAM,GAAG,GAAG,QAAQ,GAAG,CAAC,CAAC;AACzB,YAAA,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,QAAQ,EAAE,CAAC,GAAG,QAAQ,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACjD,SAAC,CAAC;;QAGF,MAAM,qBAAqB,GAAG,MAAK;;AAEjC,YAAA,IAAI,OAAO,IAAI,SAAS,EAAE;;gBAExB,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,mBAAmB,CAAC;oBAC5D,iBAAiB,EAAE,cAAc;oBACjC,eAAe,EAAE,OAAO;oBACxB,SAAS,EAAE,aAAa;oBACxB,OAAO,EAAE,KAAK;oBACd,cAAc,EAAE,KAAK;AACtB,iBAAA,CAAC,CAAC;aACJ;AACH,SAAC,CAAC;;QAGF,MAAM,SAAS,GAAG,MAAK;;YAErB,aAAa,GAAG,IAAI,CAAC;;AAGrB,YAAA,cAAc,GAAI,SAAsB,CAAC,MAAM,CAAC;;YAGhD,IAAI,cAAc,GAAG,SAAS,CAAC;;AAG/B,YAAA,IAAI,cAAc,GAAG,CAAC,EAAE;;gBAEtB,SAAS;AACN,oBAAA,SAAsB,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,OAAO,KAAK,KAAK,GAAG,OAAO,CAAC,GAAG,cAAc,CAAC;aACxF;iBAAM;AACL,gBAAA,SAAS,GAAG,CAAC,CAAC;aACf;;AAGD,YAAA,IAAI,OAAO,gBAAgB,KAAK,WAAW,EAAE;gBAC3C,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAC;aACjE;;AAGD,YAAA,IAAI,UAAU,GAAG;AACf,gBAAA,EAAE,EAAE,QAAQ,CAAC,EAAE;AACf,gBAAA,QAAQ,EAAE,QAAQ,CAAC,GAAG;AACtB,gBAAA,OAAO,EAAE,YAAY,EAAE;gBACvB,OAAO,EAAE,OAAO;gBAChB,cAAc,EAAE,cAAc;gBAC9B,cAAc,EAAE,cAAc;gBAC9B,mBAAmB,EAAE,mBAAmB;AACxC,gBAAA,mBAAmB,EAAE,mBAAmB;AACxC,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,kBAAkB,EAAE,kBAAkB;AACtC,gBAAA,SAAS,EAAE,SAAS;AACpB,gBAAA,kBAAkB,EAAE,kBAAkB;AACtC,gBAAA,UAAU,EAAE,UAAU;AACtB,gBAAA,eAAe,EAAE,eAAe;AAChC,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,aAAa,EAAE,aAAa;AAC5B,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,eAAe,EAAE,eAAe;AAChC,gBAAA,SAAS,EAAE,SAAS;AACpB,gBAAA,SAAS,EAAE,SAAS;AACpB,gBAAA,gBAAgB,EAAE,gBAAgB;AAClC,gBAAA,QAAQ,EAAE,QAAQ;AAClB,gBAAA,aAAa,EAAE,aAAa;AAC5B,gBAAA,aAAa,EAAE,aAAa;gBAC5B,UAAU,EAAE,SAAS;gBACrB,gBAAgB,EAAE,cAAc;gBAChC,gBAAgB,EAAE,cAAc;AAChC,gBAAA,iBAAiB,EAAE,iBAAiB;AACpC,gBAAA,iBAAiB,EAAE,iBAAiB;AACpC,gBAAA,cAAc,EAAE,cAAc;AAC9B,gBAAA,oBAAoB,EAAE,oBAAoB;AAC1C,gBAAA,qBAAqB,EAAE,qBAAqB;AAC5C,gBAAA,oBAAoB,EAAE,oBAAoB;AAC1C,gBAAA,wBAAwB,EAAE,wBAAwB;AAClD,gBAAA,MAAM,EAAE,MAAM;AACd,gBAAA,gBAAgB,EAAE,gBAAgB;AAClC,gBAAA,YAAY,EAAE,YAAY;AAC1B,gBAAA,YAAY,EAAE,WAAW;AACzB,gBAAA,aAAa,EAAE,YAAY;aAC5B,CAAC;;AAGF,YAAA,eAAe,CAAC,SAAS,GAAG,EAAE,CAAC;;AAG/B,YAAA,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,cAAc,CAAC;AACnC,YAAA,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,eAAe,CAAC;AACrC,YAAA,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,uBAAuB,CAAC;;AAGrD,YAAA,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;SACtC,CAAC;;AAGF,QAAA,gBAAgB,EAAE,CAAC;;;;;;;QAWnB,SAAS,cAAc,CAAC,IAAI,EAAA;;AAE1B,YAAA,IAAI,QAAQ,CAAC,GAAG,IAAI,EAAE,EAAE;AACtB,gBAAA,QAAQ,GAAG,IAAI,CAAC;aACjB;;YAGD,IAAI,mBAAmB,EAAE;AACvB,gBAAA,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAC/B,gBAAA,SAAS,EAAE,CAAC;aACb;AACH,SAAC;;QAGD,MAAM,YAAY,GAAG,MAAK;;YAExB,IAAI,OAAO,cAAc,KAAK,WAAW,IAAI,cAAc,CAAC,WAAW,KAAK,KAAK,EAAE;AACjF,gBAAA,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,cAAc,CAAC,CAAC,CAAC,YAAY,MAAM,EAAE;oBAChF,IAAI,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC,CAAS,KAAI;AACtD,wBAAA,OAAO,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC7D,qBAAC,CAAC,CAAC;oBACH,OAAO,cAAc,CAAC;iBACvB;qBAAM,IAAI,OAAO,cAAc,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;;AAEhD,oBAAA,OAAO,CAAC,KAAK,CACX,6FAA6F,CAC9F,CAAC;oBACF,OAAO,KAAK,CAAC;iBACd;qBAAM;AACL,oBAAA,OAAO,CAAC,KAAK,CACX,6FAA6F,CAC9F,CAAC;oBACF,OAAO,KAAK,CAAC;iBACd;aACF;iBAAM;AACL,gBAAA,OAAO,CAAC,KAAK,CACX,oGAAoG,CACrG,CAAC;gBACF,OAAO,KAAK,CAAC;aACd;AACH,SAAC,CAAC;;;;;QAQF,SAAS,YAAY,CAAC,gBAAgB,EAAA;;AAEpC,YAAA,IAAI,gBAAgB,CAAC,WAAW,KAAK,KAAK,IAAI,gBAAgB,CAAC,MAAM,KAAK,UAAU,EAAE;AACpF,gBAAA,OAAO,gBAAgB,CAAC;aACzB;;AAEI,iBAAA,IAAI,gBAAgB,CAAC,WAAW,KAAK,KAAK,EAAE;gBAC/C,IAAI,SAAS,GAAG,EAAE,CAAC;;AAGnB,gBAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;AACnC,oBAAA,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;iBAClC;AACD,gBAAA,OAAO,SAAS,CAAC;aAClB;;AAEI,iBAAA,IAAI,gBAAgB,CAAC,WAAW,KAAK,KAAK,IAAI,gBAAgB,CAAC,MAAM,KAAK,UAAU,EAAE;AACzF,gBAAA,OAAO,CAAC,KAAK,CACX,kMAAkM,CACnM,CAAC;aACH;;iBAEI;AACH,gBAAA,OAAO,CAAC,KAAK,CACX,yLAAyL,CAC1L,CAAC;aACH;SACF;;QAGD,SAAS,mCAAmC,CAAC,qBAAsB,EAAA;;AAEjE,YAAA,KAAK,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;AAC1C,YAAA,KAAK,GAAG,UAAU,CAAC,qBAAqB,CAAC,CAAC;AAC1C,YAAA,iBAAiB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AAClE,YAAA,SAAS,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAC;AAClD,YAAA,iBAAiB,GAAG,sBAAsB,CAAC,qBAAqB,CAAC,CAAC;AAClE,YAAA,SAAS,GAAG,cAAc,CAAC,qBAAqB,CAAC,CAAC;AAClD,YAAA,aAAa,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;AAC1D,YAAA,OAAO,GAAG,YAAY,CAAC,qBAAqB,CAAC,CAAC;AAC9C,YAAA,YAAY,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;AACxD,YAAA,aAAa,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;AAC1D,YAAA,cAAc,GAAG,mBAAmB,CAAC,qBAAqB,CAAC,CAAC;AAC5D,YAAA,QAAQ,GAAG,aAAa,CAAC,qBAAqB,CAAC,CAAC;AAChD,YAAA,QAAQ,GAAG,aAAa,CAAC,qBAAqB,CAAC,CAAC;AAChD,YAAA,eAAe,GAAG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;AAC9D,YAAA,eAAe,GAAG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;AAC9D,YAAA,GAAG,GAAG,QAAQ,CAAC,qBAAqB,CAAC,CAAC;AACtC,YAAA,YAAY,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;AACxD,YAAA,YAAY,GAAG,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;AACxD,YAAA,aAAa,GAAG,kBAAkB,CAAC,qBAAqB,CAAC,CAAC;AAC1D,YAAA,kBAAkB,GAAG,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;AACpE,YAAA,mBAAmB,GAAG,wBAAwB,CAAC,qBAAqB,CAAC,CAAC;AACtE,YAAA,kBAAkB,GAAG,uBAAuB,CAAC,qBAAqB,CAAC,CAAC;AACpE,YAAA,sBAAsB,GAAG,2BAA2B,CAAC,qBAAqB,CAAC,CAAC;AAC5E,YAAA,MAAM,GAAG,WAAW,CAAC,qBAAqB,CAAC,CAAC;AAC5C,YAAA,eAAe,GAAG,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;AAC9D,YAAA,WAAW,GAAG,gBAAgB,CAAC,qBAAqB,CAAC,CAAC;;AAGtD,YAAA,iBAAiB,GAAG,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;AAClE,YAAA,iBAAiB,GAAG,0BAA0B,CAAC,iBAAiB,CAAC,CAAC;;AAGlE,YAAA,4BAA4B,EAAE,CAAC;;AAG/B,YAAA,aAAa,GAAG,KAAK,GAAG,SAAS,CAAC;AAClC,YAAA,qBAAqB,GAAG,KAAK,GAAG,iBAAiB,CAAC;;AAIlD,YAAA,UAAU,GAAG,UAAU,CAAC,MAAM,KAAK,CAAC,GAAG,UAAU,CAAC,qBAAqB,CAAC,GAAG,SAAS,CAAC;AACvF,SAAC;;QAGD,SAAS,0BAA0B,CAAC,iBAAiB,EAAA;YACnD,IAAI,cAAc,GAAG,CAAC,iBAAiB,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC;YACzD,OAAO,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SAChD;;QAGD,SAAS,0BAA0B,CAAC,iBAAiB,EAAA;AACnD,YAAA,IAAI,cAAc,GAAG,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC,EAAE,IAAI,GAAG,CAAC;YAC1D,OAAO,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;SAChD;;AAGD,QAAA,SAAS,4BAA4B,GAAA;;YAEnC,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC1C,gBAAA,cAAc,GAAG,YAAY,GAAG,aAAa,GAAG,CAAC,CAAC;aACnD;;iBAEI,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC/C,gBAAA,cAAc,GAAG,aAAa,GAAG,CAAC,CAAC;AACnC,gBAAA,YAAY,GAAG,cAAc,GAAG,CAAC,CAAC;aACnC;SACF;;AAGD,QAAA,SAAS,cAAc,GAAA;;YAErB,IAAI,SAAS,GAAG,EAAE,CAAC;;AAEnB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC9B,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;aAChC;AACD,YAAA,OAAO,SAAS,CAAC;SAClB;;AAGD,QAAA,SAAS,YAAY,GAAA;YACnB,IAAI,SAAS,GAAG,EAAE,CAAC;AACnB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;;AAE9B,gBAAA,IAAI,GAAG,GAAG;oBACR,CAAC,EAAE,CAAC;oBACJ,CAAC,EAAE,CAAC;oBACJ,EAAE,EAAE,CAAC;oBACL,EAAE,EAAE,CAAC;oBACL,GAAG,EAAE,CAAC;oBACN,GAAG,EAAE,CAAC;oBACN,WAAW,EAAE,CAAC;oBACd,WAAW,EAAE,CAAC;AACd,oBAAA,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;oBACtD,UAAU,EAAE,EAAE;iBACf,CAAC;;AAGF,gBAAA,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;;AAGzB,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,IAAI,CAAC,GAAG,aAAa,EAAE;AACrB,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,GAAG,aAAa,GAAG,qBAAqB,EAAE;AACxE,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI;AACH,wBAAA,GAAG,CAAC,UAAU,GAAG,iBAAiB,CAAC;qBACpC;AACH,iBAAC;;AAGD,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,IAAI,CAAC,GAAG,aAAa,EAAE;AACrB,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,GAAG,aAAa,GAAG,qBAAqB,EAAE;AACxE,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI;AACH,wBAAA,GAAG,CAAC,UAAU,GAAG,aAAa,CAAC;qBAChC;AACH,iBAAC;;AAGD,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,IAAI,CAAC,GAAG,aAAa,EAAE;AACrB,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI,IAAI,CAAC,IAAI,aAAa,IAAI,CAAC,GAAG,aAAa,GAAG,qBAAqB,EAAE;AACxE,wBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,wBAAA,GAAG,CAAC,UAAU,GAAG,oBAAoB,CAAC;qBACvC;;yBAEI;AACH,wBAAA,SAAS,CAAC,GAAG,CAAC,CAAC;AACf,wBAAA,GAAG,CAAC,UAAU,GAAG,kBAAkB,CAAC;qBACrC;AACH,iBAAC;;AAGD,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,oBAAA,GAAG,CAAC,UAAU,GAAG,6DAA6D,CAAC;AACjF,iBAAC;;AAGD,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;AACnB,oBAAA,GAAG,CAAC,UAAU,GAAG,yDAAyD,CAAC;AAC7E,iBAAC;;AAGD,gBAAA,IAAI,GAAG,IAAI,CAAC,EAAE;;AAEZ,oBAAA,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;;AAEnB,oBAAA,SAAS,CAAC,GAAG,CAAC,CAAC;AACf,oBAAA,GAAG,CAAC,UAAU,GAAG,8DAA8D,CAAC;AAClF,iBAAC;AAED,gBAAA,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACtB,aAAC;AACD,YAAA,OAAO,SAAS,CAAC;SAClB;;AAGD,QAAA,SAAS,aAAa,GAAA;;;AAIpB,YAAA,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC;;YAGjD,KAAK,qBAAqB,GAAG,CAAC,EAAE,qBAAqB,GAAG,UAAU,EAAE,qBAAqB,EAAE,EAAE;;gBAE3F,mCAAmC,CAAC,qBAAqB,CAAC,CAAC;;AAG3D,gBAAA,UAAU,EAAE,CAAC;aACd;;YAGD,KAAK,qBAAqB,GAAG,CAAC,EAAE,qBAAqB,GAAG,UAAU,EAAE,qBAAqB,EAAE,EAAE;;gBAE3F,mCAAmC,CAAC,qBAAqB,CAAC,CAAC;;AAG3D,gBAAA,IAAI,EAAE,CAAC;aACR;;AAED,YAAA,IAAI,aAAa,KAAK,IAAI,EAAE;;gBAE1B,GAAG,CAAC,SAAS,EAAE,CAAC;AAChB,gBAAA,GAAG,CAAC,SAAS,GAAG,sBAAsB,CAAC;AACvC,gBAAA,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,kBAAkB,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC;AACnE,gBAAA,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,GAAG,kBAAkB,EAAE,YAAY,GAAG,CAAC,CAAC,CAAC;;AAGnE,gBAAA,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,GAAG,mBAAmB,CAAC,CAAC;AACpE,gBAAA,GAAG,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,YAAY,GAAG,CAAC,GAAG,mBAAmB,CAAC,CAAC;AACpE,gBAAA,GAAG,CAAC,WAAW,GAAG,kBAAkB,CAAC;gBACrC,GAAG,CAAC,MAAM,EAAE,CAAC;aACd;SACF;;AAGD,QAAA,SAAS,IAAI,GAAA;;YAEX,MAAM,QAAQ,GAAG,UAAU,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC,CAAC;AAEpE,YAAA,IAAI,MAAM,CAAC;AACX,YAAA,IAAI,QAAQ,CAAC;AACb,YAAA,IAAI,QAAQ,IAAI,QAAQ,EAAE;gBACxB,MAAM,GAAG,QAAQ,CAAC;AAClB,gBAAA,QAAQ,GAAG,aAAa,GAAG,GAAG,CAAC;aAChC;iBAAM;gBACL,MAAM,GAAG,QAAQ,CAAC;gBAClB,QAAQ,GAAG,SAAS,CAAC;aACtB;;AAGD,YAAA,GAAG,CAAC,SAAS,GAAG,QAAQ,CAAC;YACzB,GAAG,CAAC,SAAS,EAAE,CAAC;AAChB,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;AAC9B,gBAAA,MAAM,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACxB,gBAAA,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;aAChC;YACD,GAAG,CAAC,IAAI,EAAE,CAAC;;AAGX,YAAA,IAAI,MAAM,KAAK,IAAI,EAAE;;gBAEnB,IAAI,YAAY,KAAK,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE;AAC5C,oBAAA,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC;AAChC,oBAAA,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;oBAC9B,GAAG,CAAC,SAAS,EAAE,CAAC;oBAChB,GAAG,CAAC,OAAO,CACT,eAAe,EACf,eAAe,EACf,cAAc,GAAG,eAAe,GAAG,CAAC,EACpC,YAAY,GAAG,eAAe,GAAG,CAAC,EAClC,CAAC,EACD,CAAC,EACD,GAAG,CACJ,CAAC;oBACF,GAAG,CAAC,MAAM,EAAE,CAAC;AACf,iBAAC;;gBAGD,IAAI,YAAY,KAAK,CAAC,IAAI,YAAY,KAAK,CAAC,EAAE;AAC5C,oBAAA,GAAG,CAAC,SAAS,GAAG,eAAe,CAAC;AAChC,oBAAA,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC;AAC9B,oBAAA,GAAG,CAAC,UAAU,CACZ,eAAe,GAAG,cAAc,GAAG,eAAe,GAAG,CAAC,EACtD,eAAe,GAAG,YAAY,GAAG,eAAe,GAAG,CAAC,EACpD,cAAc,GAAG,CAAC,GAAG,eAAe,EACpC,YAAY,GAAG,CAAC,GAAG,eAAe,CACnC,CAAC;AACJ,iBAAC;AACH,aAAC;AACH,SAAC;;AAGD,QAAA,SAAS,UAAU,GAAA;;YAEjB,IAAI,eAAe,CAAC,qBAAqB,CAAC,IAAI,KAAK,GAAG,CAAC,EAAE;AACvD,gBAAA,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;aAC5C;iBAAM;gBACL,eAAe,CAAC,qBAAqB,CAAC,GAAG,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,CAAC;aACrF;;YAGD,IAAI,QAAQ,GAAG,UAAU,CAAC,eAAe,CAAC,qBAAqB,CAAC,CAAC,CAAC;;AAGlE,YAAA,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAI,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAGtB,gBAAA,IAAI,WAAW,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;;AAGhC,gBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,oBAAoB,EAAE;AAC1C,oBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;iBACpC;AAAM,qBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,oBAAoB,EAAE;AACjD,oBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;iBACpC;AAAM,qBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,iBAAiB,EAAE;AAC9C,oBAAA,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;iBAC1B;AAAM,qBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,aAAa,EAAE;AAC1C,oBAAA,GAAG,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;iBAC7B;AAAM,qBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,kBAAkB,EAAE;AAC/C,oBAAA,GAAG,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;iBAClC;AAAM,qBAAA,IACL,GAAG,CAAC,UAAU,IAAI,6DAA6D,EAC/E;;AAEA,oBAAA,IAAI,WAAW,GAAG,SAAS,EAAE;AAC3B,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM,IAAI,WAAW,IAAI,SAAS,IAAI,WAAW,GAAG,SAAS,GAAG,iBAAiB,EAAE;AAClF,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM;AACL,wBAAA,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;qBAC1B;iBACF;AAAM,qBAAA,IAAI,GAAG,CAAC,UAAU,IAAI,yDAAyD,EAAE;;AAEtF,oBAAA,IAAI,WAAW,GAAG,SAAS,EAAE;AAC3B,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM,IAAI,WAAW,IAAI,SAAS,IAAI,WAAW,GAAG,SAAS,GAAG,iBAAiB,EAAE;AAClF,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM;AACL,wBAAA,GAAG,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;qBAC7B;iBACF;AAAM,qBAAA,IACL,GAAG,CAAC,UAAU,IAAI,8DAA8D,EAChF;;AAEA,oBAAA,IAAI,WAAW,GAAG,SAAS,EAAE;AAC3B,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM,IAAI,WAAW,IAAI,SAAS,IAAI,WAAW,GAAG,SAAS,GAAG,iBAAiB,EAAE;AAClF,wBAAA,GAAG,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;qBACpC;yBAAM;AACL,wBAAA,GAAG,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;qBAClC;AACH,iBAAC;;gBAGD,GAAG,CAAC,SAAS,EAAE,CAAC;;AAGhB,gBAAA,IAAI,SAAS,CAAC,GAAG,CAAC,EAAE;AAClB,oBAAA,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;iBAC1B;;AAGD,gBAAA,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;oBACpB,QAAQ,YAAY;AAClB,wBAAA,KAAK,CAAC;AACJ,4BAAA,GAAG,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;4BACzB,MAAM;AACR,wBAAA,KAAK,CAAC;AACJ,4BAAA,GAAG,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC;4BAClC,MAAM;AACV,qBAAC;AACH,iBAAC;AACH,aAAC;AACH,SAAC;;QAGD,SAAS,SAAS,CAAC,GAAG,EAAA;;AAEpB,YAAA,IAAI,OAAO,GAAG,CAAC,EAAE;AACf,gBAAA,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;AAClB,gBAAA,OAAO,KAAK,CAAC;aACd;;AAEI,iBAAA,IAAI,GAAG,CAAC,SAAS,IAAI,OAAO,EAAE;AACjC,gBAAA,GAAG,CAAC,SAAS,GAAG,CAAC,CAAC;AAClB,gBAAA,OAAO,IAAI,CAAC;aACb;;iBAEI;AACH,gBAAA,OAAO,KAAK,CAAC;aACd;SACF;;;QAID,SAAS,WAAW,CAAC,GAAG,EAAA;;YAEtB,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;gBAC1C,IACE,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC;oBAC7B,GAAG,CAAC,CAAC,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,EAC7B;AACA,oBAAA,OAAO,IAAI,CAAC;iBACb;qBAAM;AACL,oBAAA,OAAO,KAAK,CAAC;iBACd;aACF;;YAED,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC1C,gBAAA,IACE,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,cAAc;AACxC,oBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,cAAc;AACxC,oBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,YAAY;AACtC,oBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,YAAY,EACtC;AACA,oBAAA,OAAO,IAAI,CAAC;iBACb;qBAAM;AACL,oBAAA,OAAO,KAAK,CAAC;iBACd;aACF;SACF;;QAGD,SAAS,OAAO,CAAC,GAAG,EAAA;AAClB,YAAA,GAAG,CAAC,EAAE,GAAG,iBAAiB,CAAC;AAC3B,YAAA,GAAG,CAAC,EAAE,GAAG,iBAAiB,CAAC;AAC3B,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,SAAS,CAAC,GAAG,EAAA;;AAEpB,YAAA,IAAI,KAAK,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;;YAEnD,GAAG,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AACzC,YAAA,GAAG,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AAC1C,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,uBAAuB,CAAC,GAAG,EAAA;AAClC,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;AAChB,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;AAChB,YAAA,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC;AACzB,YAAA,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,EAAE,CAAC;AACzB,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,uBAAuB,CAAC,GAAG,EAAA;AAClC,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;AAChB,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC;AAChB,YAAA,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;AAC1B,YAAA,GAAG,CAAC,WAAW,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC;AAC1B,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,gBAAgB,CAAC,GAAG,EAAA;;AAE3B,YAAA,IAAI,KAAK,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;;YAEnD,GAAG,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;AACjD,YAAA,GAAG,CAAC,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,YAAY,CAAC;;AAElD,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;AACzB,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;AACzB,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,qBAAqB,CAAC,GAAG,EAAA;AAChC,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC;AACjB,YAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,GAAG,CAAC;AACjB,YAAA,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;AAC1B,YAAA,GAAG,CAAC,WAAW,GAAG,GAAG,CAAC,GAAG,CAAC;AAC1B,YAAA,OAAO,GAAG,CAAC;SACZ;;QAGD,SAAS,sBAAsB,CAAC,GAAG,EAAA;;YAEjC,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;;AAE1C,gBAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;AACzB,gBAAA,GAAG,CAAC,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC;;AAGzB,gBAAA,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC;AACzB,gBAAA,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC;;AAGzB,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;AACf,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;;AAGf,gBAAA,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC;AACzB,gBAAA,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC;AAC3B,aAAC;;YAGD,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC1C;;;;;;;;;;;;;AAaI;;gBAGJ,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;gBACrC,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;;gBAErC,IAAI,kBAAkB,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC;gBAC9C,IAAI,kBAAkB,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC;;AAE9C,gBAAA,IAAI,oBAAoB,GACtB,CAAC,YAAY,IAAI,YAAY,GAAG,cAAc,CAAC,IAAI,kBAAkB,CAAC;AACxE,gBAAA,IAAI,sBAAsB,GACxB,CAAC,cAAc,IAAI,YAAY,GAAG,cAAc,CAAC,IAAI,kBAAkB,CAAC;;AAG1E,gBAAA,IACE,oBAAoB;oBACpB,CAAC,sBAAsB,GAAG,oBAAoB,IAAI,IAAI,CAAC,MAAM,EAAE,EAC/D;;AAEA,oBAAA,IAAI,GAAG,CAAC,WAAW,GAAG,CAAC,EAAE;;AAEvB,wBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,cAAc,CAAC;AACzC,wBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CACzB,eAAe,GAAG,YAAY,EAC9B,eAAe,GAAG,YAAY,CAC/B,CAAC;qBACH;yBAAM;;AAEL,wBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,cAAc,CAAC;AACzC,wBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CACzB,eAAe,GAAG,YAAY,EAC9B,eAAe,GAAG,YAAY,CAC/B,CAAC;qBACH;iBACF;qBAAM;;AAEL,oBAAA,IAAI,GAAG,CAAC,WAAW,GAAG,CAAC,EAAE;;AAEvB,wBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,YAAY,CAAC;AACvC,wBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CACzB,eAAe,GAAG,cAAc,EAChC,eAAe,GAAG,cAAc,CACjC,CAAC;qBACH;yBAAM;;AAEL,wBAAA,GAAG,CAAC,CAAC,GAAG,eAAe,GAAG,YAAY,CAAC;AACvC,wBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CACzB,eAAe,GAAG,cAAc,EAChC,eAAe,GAAG,cAAc,CACjC,CAAC;qBACH;iBACF;AACH,aAAC;AACD,YAAA,OAAO,GAAG,CAAC;AACb,SAAC;;QAGD,SAAS,cAAc,CAAC,CAAS,EAAA;AAC/B,YAAA,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;AACxB,YAAA,QACE,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,GAAG,eAAe,EAC5F;SACH;;QAGD,SAAS,cAAc,CAAC,CAAS,EAAA;AAC/B,YAAA,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;YACxB,QACE,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;gBAC3E,eAAe,EACf;SACH;;QAGD,SAAS,cAAc,CAAC,CAAS,EAAA;AAC/B,YAAA,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;AACxB,YAAA,QACE,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,GAAG,eAAe,EAC5F;SACH;;QAGD,SAAS,cAAc,CAAC,CAAS,EAAA;AAC/B,YAAA,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;YACxB,QACE,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;gBAC3E,eAAe,EACf;SACH;;QAGD,SAAS,aAAa,CAAC,GAAG,EAAA;;YAExB,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC1C,gBAAA,IAAI,GAAG,GAAG,mBAAmB,CAAC,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;AACjD,gBAAA,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;AAExB,gBAAA,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AACvC,gBAAA,IAAI,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;AAEvC,gBAAA,CAAC,GAAG,CAAC,GAAG,cAAc,GAAG,eAAe,CAAC;AACzC,gBAAA,CAAC,GAAG,CAAC,GAAG,YAAY,GAAG,eAAe,CAAC;AAEvC,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;AACV,gBAAA,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;aACX;;iBAEI,IAAI,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,EAAE;AAC/C,gBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CACzB,eAAe,GAAG,cAAc,EAChC,eAAe,GAAG,cAAc,CACjC,CAAC;AACF,gBAAA,GAAG,CAAC,CAAC,GAAG,mBAAmB,CAAC,eAAe,GAAG,YAAY,EAAE,eAAe,GAAG,YAAY,CAAC,CAAC;aAC7F;AAED,YAAA,OAAO,GAAG,CAAC;SACZ;;AAGD,QAAA,SAAS,mBAAmB,CAAC,UAAU,EAAE,UAAU,EAAA;AACjD,YAAA,OAAO,UAAU,GAAG,IAAI,CAAC,MAAM,EAAE,IAAI,UAAU,GAAG,UAAU,CAAC,CAAC;SAC/D;;AAGD,QAAA,SAAS,gBAAgB,GAAA;;YAEvB,IAAI,cAAc,GAAG,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;;AAG3D,YAAA,qBAAqB,EAAE,CAAC;;AAGxB,YAAA,IAAI,iBAAiB,CAAC;AAEtB,YAAA,SAAS,OAAO,GAAA;;gBAEd,IAAI,aAAa,EAAE;AACjB,oBAAA,MAAM,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAC;iBAC7C;;qBAEI;oBACH,cAAc,GAAG,MAAM,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;;AAGvD,oBAAA,IAAI,CAAC,eAAe,IAAI,cAAc,GAAG,CAAC,EAAE;;;wBAG1C,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;;wBAEzD,eAAe,GAAG,IAAI,CAAC;qBACxB;oBAED,aAAa,EAAE,CAAC;;AAGhB,oBAAA,IAAI,iBAAiB,KAAK,SAAS,EAAE;AACnC,wBAAA,iBAAiB,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;qBACvC;;yBAEI;wBACH,IAAI,gBAAgB,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AACxC,wBAAA,SAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,iBAAiB,CAAC,CAAC,CAAC;AAC/E,wBAAA,iBAAiB,GAAG,gBAAgB,CAAC;qBACtC;iBACF;aACF;SACF;;;;AAOD,QAAA,SAAS,oBAAoB,CAAC,QAAQ,EAAE,YAAY,EAAA;AAClD,YAAA,OAAO,OAAO,QAAQ,KAAK,WAAW,GAAG,QAAQ,GAAG,YAAY,CAAC;SAClE;;;;;KAOF;;AArqCM,SAAI,CAAA,IAAA,GAAG,IAAI;;;;"}