"use strict";function _typeof(a){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,_toPropertyKey(c.key),c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),Object.defineProperty(a,"prototype",{writable:!1}),a}function _toPropertyKey(a){var b=_toPrimitive(a,"string");return"symbol"==_typeof(b)?b:b+""}function _toPrimitive(a,b){if("object"!=_typeof(a)||!a)return a;var c=a[Symbol.toPrimitive];if(void 0!==c){var d=c.call(a,b||"default");if("object"!=_typeof(d))return d;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===b?String:Number)(a)}var jsPsychLibetIntentionalBinding=function(a){"use strict";var b=Math.PI,c={name:"libet-intentional-binding",parameters:{cond:{type:a.ParameterType.STRING,pretty_name:"Condition",default:"baseline-key",description:"Specifies whether condition (\"baseline-key\", \"baseline-tone\", \"operant-key\", or \"operant-tone\"."},est_wo_keypress:{type:a.ParameterType.BOOL,pretty_name:"Estimate of urge without button press",default:!1,description:"Specifies whether you want participants to report the urge if they did not press the button."},tone_file:{type:a.ParameterType.AUDIO,pretty_name:"Tone file",default:null,description:"The audio file to be played."},choices:{type:a.ParameterType.KEYS,pretty_name:"Choices",default:"ALL_KEYS",description:"The keys a participant can press."},tone_delay_ms:{type:a.ParameterType.INT,pretty_name:"Tone delay",default:250,description:"The time after the key press or the beginning of the clock animation that the tone is played, if applicable."},hand_est:{type:a.ParameterType.BOOL,pretty_name:"",default:!0,description:"Specifies whether the participant moves the hand to estimate an angle."},instructions:{type:a.ParameterType.HTML_STRING,pretty_name:"",default:"",description:"The instructions shown to the participant during estimation."},instructions_wo_keypress:{type:a.ParameterType.HTML_STRING,pretty_name:"",default:"",description:"The instructions shown to the participant during estimation if they did not make a keypress. E.g., \"When did you feel the urge to make a keypress?\". Only applicable if hand_est and est_wo_keypress are set to true. If left undefined, the parameter takes on the same value as instructions."},feedback:{type:a.ParameterType.BOOL,pretty_name:"Feedback",default:!1,description:"If true (and if hand_est is true), the participant sees feedback."},feedback_ms:{type:a.ParameterType.INT,pretty_name:"Feedback length",default:2e3,description:"Number of milliseconds to display feedback, if applicable."},pre_estimation_ms:{type:a.ParameterType.INT,pretty_name:"Pre-estimation delay",default:1e3,description:"The length of time, in ms, that the clock hand disappears before reappearing to be moved by the participant."},hand_inc:{type:a.ParameterType.FLOAT,pretty_name:"Clock hand increment",default:2*b/120,description:"The minimum number of radians a participant can rotate the clock hand."},offset_range:{type:a.ParameterType.FLOAT,pretty_name:"Offset range",default:[b/4,b/3],description:"When the participant is able to move the clock hand, its initial angle will be offset from the correct angle by an absolute amount drawn from this range (in radians). Half the time the initial angle will be offset a positive amount, half the time a negative amount."},fixation_ms:{type:a.ParameterType.INT,pretty_name:"Fixation duration",default:400,description:"Duration of the pre-trial fixation cross in ms."},clock_period:{type:a.ParameterType.INT,pretty_name:"Clock period",default:2560,description:"The period of the clock in ms."},early_ms:{type:a.ParameterType.INT,pretty_name:"Earliest keypress",default:2560,description:"The earliest allowable keypress, measured in milliseconds since the clock hand begins rotating."},early_fcn:{type:a.ParameterType.FUNCTION,pretty_name:"Early keypress function",default:function _default(){},description:"Function called when the participant responds too early."},timeout_ms:{type:a.ParameterType.INT,pretty_name:"Max trial length",default:4e3,description:"The maximum length of a trial, in milliseconds."},timeout_fcn:{type:a.ParameterType.FUNCTION,pretty_name:"Timeout function",default:function _default(){},description:"Function called when a trial times out."},spin_continue_ms:{type:a.ParameterType.INT,pretty_name:"Residual spinning length",default:1e3,description:"The length of time, in ms, after the \"critical event\" (key press or tone, whichever comes later) that the clock animation continues."},clock_diam:{type:a.ParameterType.INT,pretty_name:"Clock diameter",default:200,description:"The diameter of the clock in pixels."},n_maj_ticks:{type:a.ParameterType.INT,pretty_name:"Number of major ticks",default:60,description:"The number of major ticks to draw on the clock face."},maj_tick_len:{type:a.ParameterType.INT,pretty_name:"Major tick length",default:12,description:"Length of major ticks in pixels."},maj_tick_start:{type:a.ParameterType.FLOAT,pretty_name:"Major tick start",default:0,description:"Where to draw the first major tick, in radians."},n_min_ticks:{type:a.ParameterType.INT,pretty_name:"Number of minor ticks",default:60,description:"The number of minor ticks to draw on the clock face."},min_tick_len:{type:a.ParameterType.INT,pretty_name:"Minor tick length",default:6,description:"Length of minor ticks in pixels."},min_tick_start:{type:a.ParameterType.FLOAT,pretty_name:"Minor tick start",default:2*b/120,description:"Where to draw the first minor tick, in radians."},num:{type:a.ParameterType.INT,pretty_name:"Numbers",default:[60,55,50,45,40,35,30,25,20,15,10,5],description:"The numbers to draw around the clock face."},num_start:{type:a.ParameterType.INT,pretty_name:"",default:b/2,description:"Where to draw the first number, in radians."},num_font:{type:a.ParameterType.STRING,pretty_name:"",default:"5mm Arial",description:"The font for the numbers."},num_dist:{type:a.ParameterType.INT,pretty_name:"",default:30,description:"Distance of the numbers from the outer circle of the clock, in pixels."},hand_len:{type:a.ParameterType.INT,pretty_name:"Hand length",default:80,description:"Length of the clock hand in pixels"}}},d=/*#__PURE__*/function(){function a(b){_classCallCheck(this,a),this.jsPsych=b}return _createClass(a,[{key:"trial",value:function trial(a,c){function f(){q.clearRect(0,0,o.width,o.height)}// clock object
// rotator object, which responds to keyboard input and moves the clock hand
function g(a){var b=0;"left"==a?b=1:"right"==a&&(b=-1);var d=b*c.hand_inc;v.update_theta(d),f(),v.draw_face(),v.draw_fix(),v.draw_hand()}// load audio
// If you did not specify the tone file, the tone loading will be skipped.
function h(a){"start trial"==a?(f(),v.fix_col="yellow",v.draw_face(),v.draw_fix(),v.theta=2*(Math.random()*b),u.theta={spin_start:v.theta},setTimeout(function(){v.fix_col="black",v.hand_col="black",window.requestAnimationFrame(v.animate),t.key_press?(c.timeout_ms&&jsPsych.pluginAPI.setTimeout(function(){u.timeout=!0,c.timeout_fcn(),c.est_wo_keypress?h("estimate"):h("end")},c.timeout_ms),jsPsych.pluginAPI.getKeyboardResponse({valid_responses:c.choices,rt_method:"performance",persist:!1,allow_held_key:!1,callback_function:function callback_function(a){jsPsych.pluginAPI.clearAllTimeouts(),u.theta.keypress=v.theta,a.rt<c.early_ms?(u.early=!0,c.early_fcn(),h("end")):t.tone?h("tone"):h("estimate")}})):t.tone&&h("tone")},c.fixation_ms)):"tone"==a?setTimeout(function(){// play the tone
if(null!==x){var a=x.currentTime;w.start(a)}else w.play();// record cock hand angle of audio
u.theta.tone=v.theta,u.tone_ms=performance.now(),h("estimate")},c.tone_delay_ms):"estimate"==a?(u.timeout?u.theta.target=null:"baseline-key"==c.cond|"operant-key"==c.cond?u.theta.target=u.theta.keypress:"baseline-tone"==c.cond|"operant-tone"==c.cond&&(u.theta.target=u.theta.tone),setTimeout(function(){v.stop=!0,setTimeout(function(){if(c.hand_est){u.timeout&&c.instructions_wo_keypress&&(n.innerHTML=c.instructions_wo_keypress),n.style.visibility="visible";// randomize initial hand placement
var a=jsPsych.randomization.sampleWithReplacement([-1,1],1)[0],b=Math.random()*(c.offset_range[1]-c.offset_range[0])+c.offset_range[0];v.theta=u.theta.target+a*b,v.update_theta(0),u.theta.estimation_start=v.theta,v.hand_col="green",jsPsych.pluginAPI.getKeyboardResponse({valid_responses:"ALL_KEYS",rt_method:"performance",persist:!0,allow_held_key:!0,callback_function:function callback_function(a){var b=a.key.toLowerCase();"arrowleft"==b?g("left"):"arrowright"==b?g("right"):"enter"==b&&(u.theta.estimate=v.theta,jsPsych.pluginAPI.cancelAllKeyboardResponses(),c.feedback?(v.theta=u.theta.target,v.hand_col="black",v.draw_hand(),setTimeout(function(){h("end")},c.feedback_ms)):h("end"))}}),g()}else// assumedly the user has programmed a survey-text trial
h("end")},c.pre_estimation_ms)},c.spin_continue_ms)):"end"==a&&j()}// function to end trial when it is time
function j(){var c=Math.sign,d=Math.abs;jsPsych.pluginAPI.clearAllTimeouts(),jsPsych.pluginAPI.cancelAllKeyboardResponses(),a.innerHTML="";// compute error
var e=u.theta.estimate,f=u.theta.target,g=f-e;d(g)>b&&(g=-c(g)*(2*b-d(g))),u.theta.overshoot=g,jsPsych.finishTrial(u)}var k,l,d=Math.sin,e=Math.cos,m=["cond","est_wo_keypress","tone_file","choices","tone_delay_ms","hand_est","instructions","instructions_wo_keypress","feedback","feedback_ms","pre_estimation_ms","hand_inc","offset_range","fixation_ms","clock_period","early_ms",// 'early_fcn',
"timeout_ms","spin_continue_ms","clock_diam","n_maj_ticks","maj_tick_len","maj_tick_start","n_min_ticks","min_tick_len","min_tick_start","num","num_start","num_font","num_dist","hand_len"];// If any parameters are functions, call those functions
for(k=0;k<m.length;k++)l=m[k],c[l]instanceof Function&&(c[l]=c[l]());// create a div for instructions
var n=document.createElement("div");n.innerHTML=c.instructions,n.style.visibility="hidden",a.appendChild(n);//Create a canvas element and append it to the DOM
var o=document.createElement("canvas");a.appendChild(o);//The document body IS 'display_element' (i.e. <body class="jspsych-display-element"> .... </body> )
var p=document.getElementsByClassName("jspsych-display-element")[0],q=o.getContext("2d");//Get the context of the canvas so that it can be painted on.
o.width=2*c.clock_diam,o.height=2*c.clock_diam;var r=o.width/2,s=o.height/2,t={key_press:!0,tone:!0};// track whether key press should occur and whether a tone should be played
"baseline-key"==c.cond?t.tone=!1:"baseline-tone"==c.cond&&(t.key_press=!1);var u={cond:c.cond,early:!1,timeout:!1},v={diameter:c.clock_diam,radius:c.clock_diam/2,theta:null,update_theta:function update_theta(a){v.theta+=a,v.theta%=2*b},draw_ticks:function draw_ticks(a,c,f){// function to draw ticks
var g,h;for(g=0;g<a;g++)h=c+2*(g*b)/a,q.beginPath(),q.moveTo(r+v.radius*e(h),s-v.radius*d(h)),q.lineTo(r+(v.radius+f)*e(h),s-(v.radius+f)*d(h)),q.stroke()},draw_face:function draw_face(){q.fillStyle="black",q.strokeStyle="black",q.beginPath(),q.arc(r,s,v.radius,0,2*b),q.stroke(),v.draw_ticks(c.n_maj_ticks,c.maj_tick_start,c.maj_tick_len),v.draw_ticks(c.n_min_ticks,c.min_tick_start,c.min_tick_len);// numbers
var a,f;for(a=0;a<c.num.length;a++)f=c.num_start+2*(a*b)/c.num.length,q.font=c.num_font,q.textBaseline="middle",q.textAlign="center",q.fillText(c.num[a],r+(v.radius+c.num_dist)*e(f),s-(v.radius+c.num_dist)*d(f))},fix_col:"black",draw_fix:function draw_fix(){var a=q.strokeStyle;q.strokeStyle=v.fix_col;var b,c=2/30*v.diameter/2,d=[1,0,-1,0],e=[0,1,0,-1];for(b=0;4>b;b++)q.beginPath(),q.moveTo(r,s),q.lineTo(r+d[b]*c,s+e[b]*c),q.stroke();q.strokeStyle=a},hand_col:"black",draw_hand:function draw_hand(){var a=q.strokeStyle;q.strokeStyle=v.hand_col,q.beginPath(),q.moveTo(r,s),q.lineTo(r+c.hand_len*e(v.theta),s-c.hand_len*d(v.theta)),q.stroke(),q.strokeStyle=a},period:c.clock_period,stop:!1,t_0:null,// when rotation began
theta_0:null,// initial hand angle
t_last:null,raf_id:null,// requestAnimationFrame ID
animate:function animate(){var a=performance.now();if(v.stop)window.cancelAnimationFrame(v.raf_id),f(),v.draw_face(),v.draw_fix(),v.stop=!1,v.t_last=null,v.raf_id=null;else{if(v.raf_id=window.requestAnimationFrame(v.animate),null==v.t_0)v.t_0=a,v.t_last=a,v.theta_0=v.theta;else{// compute elapsed time and update theta
var c=a-v.t_last;v.t_last=a;var d=2*(c/v.period*b);v.update_theta(-d)}// draw stimuli
f(),v.draw_face(),v.draw_fix(),v.draw_hand()}}};if(null!=c.tone_file){var w,x=jsPsych.pluginAPI.audioContext();this.jsPsych.pluginAPI.getAudioBuffer(c.tone_file).then(function(a){null===x?(w=a,w.currentTime=0):(w=x.createBufferSource(),w.buffer=a,w.connect(x.destination)),h("start trial")})["catch"](function(a){console.error("Failed to load audio file \"${trial.tone_file}\". Try checking the file path. We recommend using the preload plugin to load audio files."),console.error(a)})}else h("start trial")}}]),a}();/**
   * **libet-intetional-binding**
   *
   * A jsPsych plugin for measuring intentional binding using a libet
   * clock, as described and demonstrated in
   * https://doi.org/10.1016/j.concog.2021.103217
   * citation: Galang, C. M., Malik, R., Kinley, I., & Obhi, S. S.
   * (2021). Studying sense of agency online: Can intentional binding be
   * observed in uncontrolled online settings? Consciousness and
   * Cognition, 95, 103217.
   *
   * @author Isaac Kinley
   * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}
   *
   * Modification by Yu Hei Shum on 28/1/2022:
   * 1. the loading of the tone will be skipped if you don't specify the tone file name (for classical Libet task)
   * 2. the urge reporting can be preserved if you specify the parameter skip urge as true,
   * the default is set as false for classical Libet and intentional blinding task
   */return d.info=c,d}(jsPsychModule);

//# sourceMappingURL=index.browser.min.js.map