{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-multi-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image height in pixels */\n    stimulus_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Image height\",\n      default: null,\n    },\n    /** Set the image width in pixels */\n    stimulus_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Image width\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the label(s) for the button(s). */\n    button_choices: {\n      type: ParameterType.STRING,\n      pretty_name: \"Button Choices\",\n      default: [],\n      array: true,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: \"NO_KEYS\",\n    },\n    /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n    button_html: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Button HTML\",\n      default: '<button class=\"jspsych-btn\">%choice%</button>',\n      array: true,\n    },\n    /** Any content here will be displayed under the button(s). */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show the trial. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** The vertical margin of the button. */\n    margin_vertical: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin vertical\",\n      default: \"0px\",\n    },\n    /** The horizontal margin of the button. */\n    margin_horizontal: {\n      type: ParameterType.STRING,\n      pretty_name: \"Margin horizontal\",\n      default: \"8px\",\n    },\n    /** If true, then trial will end when user responds. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * image-multi-response\n * jsPsych plugin for displaying an html stimulus and getting a response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-multi-response/ image-multi-response plugin documentation on jspsych.org}\n */\nclass ImageMultiResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    var html;\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-multi-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // create buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.button_choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in image-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.button_choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n      var btngroup_div = document.createElement(\"div\");\n      btngroup_div.id = \"jspsych-image-multi-response-btngroup\";\n      html = \"\";\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n        html +=\n          '<div class=\"jspsych-image-multi-response-button\" style=\"display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-image-multi-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      btngroup_div.innerHTML = html;\n      // add canvas to screen and draw image\n      display_element.insertBefore(canvas, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add buttons to screen\n      display_element.insertBefore(btngroup_div, canvas.nextElementSibling);\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n    } else {\n      // display stimulus as an image element\n      html =\n        '<img draggable=\"false\" src=\"' +\n        trial.stimulus +\n        '\" id=\"jspsych-image-multi-response-stimulus\">';\n      //display buttons\n      var buttons = [];\n      if (Array.isArray(trial.button_html)) {\n        if (trial.button_html.length == trial.button_choices.length) {\n          buttons = trial.button_html;\n        } else {\n          console.error(\n            \"Error in image-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\"\n          );\n        }\n      } else {\n        for (var i = 0; i < trial.button_choices.length; i++) {\n          buttons.push(trial.button_html);\n        }\n      }\n      html += '<div id=\"jspsych-image-multi-response-btngroup\">';\n\n      for (var i = 0; i < trial.button_choices.length; i++) {\n        var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n        html +=\n          '<div class=\"jspsych-image-multi-response-button\" style=\"display: inline-block; margin:' +\n          trial.margin_vertical +\n          \" \" +\n          trial.margin_horizontal +\n          '\" id=\"jspsych-image-multi-response-button-' +\n          i +\n          '\" data-choice=\"' +\n          i +\n          '\">' +\n          str +\n          \"</div>\";\n      }\n      html += \"</div>\";\n      // add prompt\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      // update the page content\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\n        \"#jspsych-image-multi-response-stimulus\"\n      ) as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    // function to handle responses by the subject\n    var after_keyboard_response = function (info) {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-image-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          button: null,\n          ...info,\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // Add event listener for keys\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // start time\n    var start_time = performance.now();\n\n    // add event listeners to buttons\n    for (var i = 0; i < trial.button_choices.length; i++) {\n      display_element\n        .querySelector(\"#jspsych-image-multi-response-button-\" + i)\n        .addEventListener(\"click\", (e) => {\n          var btn_el = e.currentTarget as HTMLButtonElement;\n          var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n          after_response(choice);\n        });\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      button: null,\n      key: null,\n      source: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        button_response: response.button,\n        keyboard_response: response.key,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    function after_response(choice) {\n      // measure rt\n      var end_time = performance.now();\n      var rt = Math.round(end_time - start_time);\n      response.button = parseInt(choice);\n      response.rt = rt;\n      response.source = \"button\";\n\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-image-multi-response-stimulus\").className +=\n        \" responded\";\n\n      // disable all the buttons after a response\n      var btns = document.querySelectorAll(\".jspsych-image-multi-response-button button\");\n      for (var i = 0; i < btns.length; i++) {\n        //btns[i].removeEventListener('click');\n        btns[i].setAttribute(\"disabled\", \"disabled\");\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    }\n\n    // hide image if timing is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-multi-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      button_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const button_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n      keyboard_response: null,\n      response_source: \"button\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.button_response !== null) {\n        this.jsPsych.pluginAPI.clickTarget(\n          display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`),\n          data.rt\n        );\n      } else {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      }\n    }\n  }\n}\n\nexport default ImageMultiResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","IMAGE","pretty_name","default","undefined","stimulus_height","INT","stimulus_width","maintain_aspect_ratio","BOOL","button_choices","STRING","array","keyboard_choices","KEYS","button_html","HTML_STRING","prompt","stimulus_duration","trial_duration","margin_vertical","margin_horizontal","response_ends_trial","render_on_canvas","ImageMultiResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","height","width","html","_this","image_drawn","hasChildNodes","firstChild","removeChild","canvas","document","createElement","id","style","margin","padding","ctx","getContext","img","Image","onload","getHeightWidth","drawImage","src","naturalWidth","naturalHeight","buttons","Array","isArray","length","console","error","i","push","btngroup_div","str","replace","innerHTML","insertBefore","complete","Number","isFinite","nextElementSibling","insertAdjacentHTML","querySelector","toString","keyboardListener","pluginAPI","getKeyboardResponse","callback_function","className","response","Object","assign","source","button","end_trial","valid_responses","rt_method","persist","allow_held_key","start_time","performance","now","addEventListener","e","after_response","currentTarget","getAttribute","rt","clearAllTimeouts","cancelKeyboardResponse","trial_data","button_response","keyboard_response","response_source","finishTrial","choice","end_time","Math","round","parseInt","btns","querySelectorAll","setAttribute","setTimeout","visibility","warn","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","button_data","randomInt","default_data","random","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","clickTarget","concat","pressKey"],"mappings":"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"}