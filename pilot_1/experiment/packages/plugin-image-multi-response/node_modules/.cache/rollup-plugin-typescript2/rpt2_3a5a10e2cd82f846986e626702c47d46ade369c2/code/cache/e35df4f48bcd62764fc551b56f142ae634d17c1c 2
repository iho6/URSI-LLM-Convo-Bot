{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"image-multi-response\",\n    parameters: {\n        /** The image to be displayed */\n        stimulus: {\n            type: ParameterType.IMAGE,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /** Set the image height in pixels */\n        stimulus_height: {\n            type: ParameterType.INT,\n            pretty_name: \"Image height\",\n            default: null,\n        },\n        /** Set the image width in pixels */\n        stimulus_width: {\n            type: ParameterType.INT,\n            pretty_name: \"Image width\",\n            default: null,\n        },\n        /** Maintain the aspect ratio after setting width or height */\n        maintain_aspect_ratio: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Maintain aspect ratio\",\n            default: true,\n        },\n        /** Array containing the label(s) for the button(s). */\n        button_choices: {\n            type: ParameterType.STRING,\n            pretty_name: \"Button Choices\",\n            default: [],\n            array: true,\n        },\n        /**\n         * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n         */\n        keyboard_choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Keyboard Choices\",\n            default: \"NO_KEYS\",\n        },\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n        button_html: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Button HTML\",\n            default: '<button class=\"jspsych-btn\">%choice%</button>',\n            array: true,\n        },\n        /** Any content here will be displayed under the button(s). */\n        prompt: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /** How long to show the stimulus. */\n        stimulus_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus duration\",\n            default: null,\n        },\n        /** How long to show the trial. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** The vertical margin of the button. */\n        margin_vertical: {\n            type: ParameterType.STRING,\n            pretty_name: \"Margin vertical\",\n            default: \"0px\",\n        },\n        /** The horizontal margin of the button. */\n        margin_horizontal: {\n            type: ParameterType.STRING,\n            pretty_name: \"Margin horizontal\",\n            default: \"8px\",\n        },\n        /** If true, then trial will end when user responds. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /**\n         * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n         * If false, the image will be shown via an img element.\n         */\n        render_on_canvas: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Render on canvas\",\n            default: true,\n        },\n    },\n};\n/**\n * image-multi-response\n * jsPsych plugin for displaying an html stimulus and getting a response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-multi-response/ image-multi-response plugin documentation on jspsych.org}\n */\nclass ImageMultiResponsePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        var height, width;\n        var html;\n        if (trial.render_on_canvas) {\n            var image_drawn = false;\n            // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n            if (display_element.hasChildNodes()) {\n                // can't loop through child list because the list will be modified by .removeChild()\n                while (display_element.firstChild) {\n                    display_element.removeChild(display_element.firstChild);\n                }\n            }\n            // create canvas element and image\n            var canvas = document.createElement(\"canvas\");\n            canvas.id = \"jspsych-image-multi-response-stimulus\";\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            var ctx = canvas.getContext(\"2d\");\n            var img = new Image();\n            img.onload = () => {\n                // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n                if (!image_drawn) {\n                    getHeightWidth(); // only possible to get width/height after image loads\n                    ctx.drawImage(img, 0, 0, width, height);\n                }\n            };\n            img.src = trial.stimulus;\n            // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n            const getHeightWidth = () => {\n                if (trial.stimulus_height !== null) {\n                    height = trial.stimulus_height;\n                    if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n                        width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n                    }\n                }\n                else {\n                    height = img.naturalHeight;\n                }\n                if (trial.stimulus_width !== null) {\n                    width = trial.stimulus_width;\n                    if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n                        height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n                    }\n                }\n                else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n                    // if stimulus width is null, only use the image's natural width if the width value wasn't set\n                    // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n                    width = img.naturalWidth;\n                }\n                canvas.height = height;\n                canvas.width = width;\n            };\n            getHeightWidth(); // call now, in case image loads immediately (is cached)\n            // create buttons\n            var buttons = [];\n            if (Array.isArray(trial.button_html)) {\n                if (trial.button_html.length == trial.button_choices.length) {\n                    buttons = trial.button_html;\n                }\n                else {\n                    console.error(\"Error in image-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\");\n                }\n            }\n            else {\n                for (var i = 0; i < trial.button_choices.length; i++) {\n                    buttons.push(trial.button_html);\n                }\n            }\n            var btngroup_div = document.createElement(\"div\");\n            btngroup_div.id = \"jspsych-image-multi-response-btngroup\";\n            html = \"\";\n            for (var i = 0; i < trial.button_choices.length; i++) {\n                var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n                html +=\n                    '<div class=\"jspsych-image-multi-response-button\" style=\"display: inline-block; margin:' +\n                        trial.margin_vertical +\n                        \" \" +\n                        trial.margin_horizontal +\n                        '\" id=\"jspsych-image-multi-response-button-' +\n                        i +\n                        '\" data-choice=\"' +\n                        i +\n                        '\">' +\n                        str +\n                        \"</div>\";\n            }\n            btngroup_div.innerHTML = html;\n            // add canvas to screen and draw image\n            display_element.insertBefore(canvas, null);\n            if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n                // if image has loaded and width/height have been set, then draw it now\n                // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n                ctx.drawImage(img, 0, 0, width, height);\n                image_drawn = true;\n            }\n            // add buttons to screen\n            display_element.insertBefore(btngroup_div, canvas.nextElementSibling);\n            // add prompt if there is one\n            if (trial.prompt !== null) {\n                display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n            }\n        }\n        else {\n            // display stimulus as an image element\n            html =\n                '<img draggable=\"false\" src=\"' +\n                    trial.stimulus +\n                    '\" id=\"jspsych-image-multi-response-stimulus\">';\n            //display buttons\n            var buttons = [];\n            if (Array.isArray(trial.button_html)) {\n                if (trial.button_html.length == trial.button_choices.length) {\n                    buttons = trial.button_html;\n                }\n                else {\n                    console.error(\"Error in image-multi-response plugin. The length of the button_html array does not equal the length of the button_choices array\");\n                }\n            }\n            else {\n                for (var i = 0; i < trial.button_choices.length; i++) {\n                    buttons.push(trial.button_html);\n                }\n            }\n            html += '<div id=\"jspsych-image-multi-response-btngroup\">';\n            for (var i = 0; i < trial.button_choices.length; i++) {\n                var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n                html +=\n                    '<div class=\"jspsych-image-multi-response-button\" style=\"display: inline-block; margin:' +\n                        trial.margin_vertical +\n                        \" \" +\n                        trial.margin_horizontal +\n                        '\" id=\"jspsych-image-multi-response-button-' +\n                        i +\n                        '\" data-choice=\"' +\n                        i +\n                        '\">' +\n                        str +\n                        \"</div>\";\n            }\n            html += \"</div>\";\n            // add prompt\n            if (trial.prompt !== null) {\n                html += trial.prompt;\n            }\n            // update the page content\n            display_element.innerHTML = html;\n            // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n            var img = display_element.querySelector(\"#jspsych-image-multi-response-stimulus\");\n            if (trial.stimulus_height !== null) {\n                height = trial.stimulus_height;\n                if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n                    width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n                }\n            }\n            else {\n                height = img.naturalHeight;\n            }\n            if (trial.stimulus_width !== null) {\n                width = trial.stimulus_width;\n                if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n                    height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n                }\n            }\n            else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n                // if stimulus width is null, only use the image's natural width if the width value wasn't set\n                // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n                width = img.naturalWidth;\n            }\n            img.style.height = height.toString() + \"px\";\n            img.style.width = width.toString() + \"px\";\n        }\n        // function to handle responses by the subject\n        var after_keyboard_response = function (info) {\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            display_element.querySelector(\"#jspsych-image-multi-response-stimulus\").className +=\n                \" responded\";\n            // only record the first response\n            if (response.key == null) {\n                response = Object.assign({ source: \"keyboard\", button: null }, info);\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        };\n        // Add event listener for keys\n        if (trial.keyboard_choices != \"NO_KEYS\") {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: after_keyboard_response,\n                valid_responses: trial.keyboard_choices,\n                rt_method: \"performance\",\n                persist: false,\n                allow_held_key: false,\n            });\n        }\n        // start time\n        var start_time = performance.now();\n        // add event listeners to buttons\n        for (var i = 0; i < trial.button_choices.length; i++) {\n            display_element\n                .querySelector(\"#jspsych-image-multi-response-button-\" + i)\n                .addEventListener(\"click\", (e) => {\n                var btn_el = e.currentTarget;\n                var choice = btn_el.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n                after_response(choice);\n            });\n        }\n        // store response\n        var response = {\n            rt: null,\n            button: null,\n            key: null,\n            source: null,\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // kill keyboard listeners\n            if (typeof keyboardListener !== \"undefined\") {\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            }\n            // gather the data to store for the trial\n            var trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                button_response: response.button,\n                keyboard_response: response.key,\n                response_source: response.source,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        function after_response(choice) {\n            // measure rt\n            var end_time = performance.now();\n            var rt = Math.round(end_time - start_time);\n            response.button = parseInt(choice);\n            response.rt = rt;\n            response.source = \"button\";\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            display_element.querySelector(\"#jspsych-image-multi-response-stimulus\").className +=\n                \" responded\";\n            // disable all the buttons after a response\n            var btns = document.querySelectorAll(\".jspsych-image-multi-response-button button\");\n            for (var i = 0; i < btns.length; i++) {\n                //btns[i].removeEventListener('click');\n                btns[i].setAttribute(\"disabled\", \"disabled\");\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        }\n        // hide image if timing is set\n        if (trial.stimulus_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(() => {\n                display_element.querySelector(\"#jspsych-image-multi-response-stimulus\").style.visibility = \"hidden\";\n            }, trial.stimulus_duration);\n        }\n        // end trial if trial_duration is set\n        if (trial.trial_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n        }\n        else if (trial.response_ends_trial === false) {\n            console.warn(\"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\");\n        }\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const keyboard_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n            button_response: null,\n            response_source: \"keyboard\",\n        };\n        const button_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n            keyboard_response: null,\n            response_source: \"button\",\n        };\n        const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        this.trial(display_element, trial);\n        load_callback();\n        if (data.rt !== null) {\n            if (data.button_response !== null) {\n                this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(`div[data-choice=\"${data.button_response}\"] button`), data.rt);\n            }\n            else {\n                this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n            }\n        }\n    }\n}\nImageMultiResponsePlugin.info = info;\nexport default ImageMultiResponsePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-image-multi-response/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"image-multi-response\";\n    readonly parameters: {\n        /** The image to be displayed */\n        readonly stimulus: {\n            readonly type: ParameterType.IMAGE;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /** Set the image height in pixels */\n        readonly stimulus_height: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Image height\";\n            readonly default: any;\n        };\n        /** Set the image width in pixels */\n        readonly stimulus_width: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Image width\";\n            readonly default: any;\n        };\n        /** Maintain the aspect ratio after setting width or height */\n        readonly maintain_aspect_ratio: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Maintain aspect ratio\";\n            readonly default: true;\n        };\n        /** Array containing the label(s) for the button(s). */\n        readonly button_choices: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Button Choices\";\n            readonly default: readonly [];\n            readonly array: true;\n        };\n        /**\n         * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n         */\n        readonly keyboard_choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Keyboard Choices\";\n            readonly default: \"NO_KEYS\";\n        };\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n        readonly button_html: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Button HTML\";\n            readonly default: \"<button class=\\\"jspsych-btn\\\">%choice%</button>\";\n            readonly array: true;\n        };\n        /** Any content here will be displayed under the button(s). */\n        readonly prompt: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /** How long to show the stimulus. */\n        readonly stimulus_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus duration\";\n            readonly default: any;\n        };\n        /** How long to show the trial. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** The vertical margin of the button. */\n        readonly margin_vertical: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Margin vertical\";\n            readonly default: \"0px\";\n        };\n        /** The horizontal margin of the button. */\n        readonly margin_horizontal: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Margin horizontal\";\n            readonly default: \"8px\";\n        };\n        /** If true, then trial will end when user responds. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /**\n         * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n         * If false, the image will be shown via an img element.\n         */\n        readonly render_on_canvas: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Render on canvas\";\n            readonly default: true;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * image-multi-response\n * jsPsych plugin for displaying an html stimulus and getting a response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-multi-response/ image-multi-response plugin documentation on jspsych.org}\n */\ndeclare class ImageMultiResponsePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"image-multi-response\";\n        readonly parameters: {\n            /** The image to be displayed */\n            readonly stimulus: {\n                readonly type: ParameterType.IMAGE;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /** Set the image height in pixels */\n            readonly stimulus_height: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Image height\";\n                readonly default: any;\n            };\n            /** Set the image width in pixels */\n            readonly stimulus_width: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Image width\";\n                readonly default: any;\n            };\n            /** Maintain the aspect ratio after setting width or height */\n            readonly maintain_aspect_ratio: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Maintain aspect ratio\";\n                readonly default: true;\n            };\n            /** Array containing the label(s) for the button(s). */\n            readonly button_choices: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Button Choices\";\n                readonly default: readonly [];\n                readonly array: true;\n            };\n            /**\n             * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n             */\n            readonly keyboard_choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Keyboard Choices\";\n                readonly default: \"NO_KEYS\";\n            };\n            /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n            readonly button_html: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Button HTML\";\n                readonly default: \"<button class=\\\"jspsych-btn\\\">%choice%</button>\";\n                readonly array: true;\n            };\n            /** Any content here will be displayed under the button(s). */\n            readonly prompt: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /** How long to show the stimulus. */\n            readonly stimulus_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus duration\";\n                readonly default: any;\n            };\n            /** How long to show the trial. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** The vertical margin of the button. */\n            readonly margin_vertical: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Margin vertical\";\n                readonly default: \"0px\";\n            };\n            /** The horizontal margin of the button. */\n            readonly margin_horizontal: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Margin horizontal\";\n                readonly default: \"8px\";\n            };\n            /** If true, then trial will end when user responds. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /**\n             * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n             * If false, the image will be shown via an img element.\n             */\n            readonly render_on_canvas: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Render on canvas\";\n                readonly default: true;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private create_simulation_data;\n    private simulate_data_only;\n    private simulate_visual;\n}\nexport default ImageMultiResponsePlugin;\n"}}
