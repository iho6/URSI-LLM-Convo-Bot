{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"rok\",\n    parameters: {\n        /** The valid keys that the subject can press to indicate a response. */\n        choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Choices\",\n            default: \"ALL_KEYS\",\n        },\n        /** The correct keys for that trial. */\n        correct_choice: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Correct choice\",\n            default: undefined,\n        },\n        /** The length of stimulus presentation. Zero for endless loop. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: 0,\n        },\n        /** If true, then any valid key will end the trial. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /** The number of oriented objects per set in the stimulus. */\n        number_of_oobs: {\n            type: ParameterType.INT,\n            pretty_name: \"Number of oriented objectes\",\n            default: 300,\n        },\n        /** The direction of coherent motion in degrees (0 degre meaning right). */\n        coherent_movement_direction: {\n            type: ParameterType.INT,\n            pretty_name: \"Coherent movement direction\",\n            default: 0,\n        },\n        /** The orientation of the objects in degree (0 degree meaning right). */\n        coherent_orientation: {\n            type: ParameterType.INT,\n            pretty_name: \"Coherent object orientation\",\n            default: 0,\n        },\n        /** The percentage of oriented objects moving in the coherent direction. */\n        coherence_movement: {\n            type: ParameterType.INT,\n            pretty_name: \"Movement coherence\",\n            default: 50,\n        },\n        /** The percentage of objects that are oriented in the coherent orientation. */\n        coherence_orientation: {\n            type: ParameterType.INT,\n            pretty_name: \"Orientation coherence\",\n            default: 50,\n        },\n        /** The percentage of oriented objects moving in the direction opposite of the coherent direction. */\n        coherence_movement_opposite: {\n            type: ParameterType.INT,\n            pretty_name: \"Opposite movement coherence\",\n            default: 0,\n        },\n        /** The percentage of objects that are oriented opposite of the coherent orientation. */\n        coherence_orientation_opposite: {\n            type: ParameterType.INT,\n            pretty_name: \"Opposite orientation coherence\",\n            default: 0,\n        },\n        /** The movement speed of the oobs in (percentage of aperature_width)/second. */\n        movement_speed: {\n            type: ParameterType.INT,\n            pretty_name: \"Movement Speed\",\n            default: 10,\n        },\n        /** The percentage of randomisation in movement speed \" +\n             \"(0 meaning all orientated objects move with speed defined in movement_speed,\" +\n             \" 100 meaning movement speeds from 0 to 2x movement_speed). */\n        movement_speed_randomisation: {\n            type: ParameterType.INT,\n            pretty_name: \"Movement speed randomisation\",\n            default: 0,\n        },\n        /** The size of the orientated objects in percentage of aperture_width. */\n        oob_size: {\n            type: ParameterType.INT,\n            pretty_name: \"Object size\",\n            default: 2,\n        },\n        /** The width of the aperture in pixels. */\n        aperture_width: {\n            type: ParameterType.INT,\n            pretty_name: \"Aperture width\",\n            default: 600,\n        },\n        /** The height of the aperture in pixels. */\n        aperture_height: {\n            type: ParameterType.INT,\n            pretty_name: \"Aperture height\",\n            default: 400,\n        },\n        /** The color of the dots. */\n        oob_color: {\n            type: ParameterType.STRING,\n            pretty_name: \"Dot color\",\n            default: \"white\",\n        },\n        /** The background of the stimulus. */\n        background_color: {\n            type: ParameterType.STRING,\n            pretty_name: \"Background color\",\n            default: \"gray\",\n        },\n        /** The presence of a border around the aperture. */\n        border: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Border\",\n            default: false,\n        },\n        /** The thickness of the border in pixels. */\n        border_thickness: {\n            type: ParameterType.INT,\n            pretty_name: \"Border width\",\n            default: 1,\n        },\n        /**The color of the border. */\n        border_color: {\n            type: ParameterType.STRING,\n            pretty_name: \"Border Color\",\n            default: 1,\n        },\n        /** Apperance of stimulus (0-triangles, 1-circle, 2-square, 3-origami_birds, 4-image). */\n        stimulus_type: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus type\",\n            default: 0,\n        },\n        /** Shade of aperture (0 - rectangular, 1 - elliptic). */\n        aperture_shape: {\n            type: ParameterType.INT,\n            pretty_name: \"aperture shape\",\n            default: 0,\n        },\n        /** Backgroundcolor of aperture */\n        aperture_background_color: {\n            type: ParameterType.STRING,\n            pretty_name: \"Background of aperture\",\n            default: \"#0000\",\n        },\n        /** Type of random movement (0 direction is random but fixed, 1 movement direction of incoherent oobs changes over time). */\n        random_movement_type: {\n            type: ParameterType.INT,\n            pretty_name: \"Random movement type\",\n            default: 0,\n        },\n        /** Type of random movement (0 - orientation is random but fixed, 1 - orientation of incoherent oobs changes over time). */\n        random_orientation_type: {\n            type: ParameterType.INT,\n            pretty_name: \"Random orientation type\",\n            default: 0,\n        },\n        /** Number of apertures. If greater then one, other parameters of trial should be arrays. */\n        number_of_apertures: {\n            type: ParameterType.INT,\n            pretty_name: \"Number of apertures\",\n            default: 1,\n        },\n        /** If this parameter is set, number_of_objects is interpreted as average number_of_objects per density_unit_area (in pixels). */\n        density_unit_area: {\n            type: ParameterType.INT,\n            pretty_name: \"Density area\",\n            default: null,\n        },\n        /** Position of midpoint of aperture in x direction in percentage of window width (50 being middle). */\n        aperture_position_left: {\n            type: ParameterType.INT,\n            pretty_name: \"Horizontal position of aperature\",\n            default: 50,\n        },\n        /** Position of midpoint of aperture in y direction in percentage of window width (0 being top, 50 being middle, 100 being bot). */\n        aperture_position_top: {\n            type: ParameterType.INT,\n            pretty_name: \"Vertical position of aperature\",\n            default: 50,\n        },\n        /** Prompt that is presented above the stimulus. */\n        prompt: {\n            type: ParameterType.STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /** Fade the oobs on the edges of the aperture. */\n        fade_out: {\n            type: ParameterType.INT,\n            pretty_name: \"Fade out on edges\",\n            default: 0,\n        },\n        /** Pictures of stimuli, can be key-framed(animated) or randomised, see documentation. */\n        stimulus_image: {\n            type: ParameterType.IMAGE,\n            pretty_name: \"Stimuli pictures\",\n            default: null,\n        },\n        /** Background image, can be key-framed(animated) or randomised, see documentation. */\n        background_image: {\n            type: ParameterType.IMAGE,\n            pretty_name: \"Background image\",\n            default: null,\n        },\n        /** Number of keyframes in stimulus images. */\n        stimulus_image_keyframes: {\n            type: ParameterType.INT,\n            pretty_name: \"Keyframes of stimulus pictures\",\n            default: 1,\n        },\n        /** Number of keyframes in background pictures. */\n        background_image_keyframes: {\n            type: ParameterType.INT,\n            pretty_name: \"Keframse of background pictures\",\n            default: 1,\n        },\n        /** Time between keyframes. */\n        stimulus_keyframe_time: {\n            type: ParameterType.FLOAT,\n            pretty_name: \"Keyframe time\",\n            default: 0.1,\n        },\n        /** Mirror image instead of rotating (1 - x axis, 2 - y axis). */\n        stimulus_mirror: {\n            type: ParameterType.INT,\n            pretty_name: \"Mirror image time\",\n            default: 0,\n        },\n        /** Sets experiment to congruency mode: experiment_main_task has to be  set (0 = movement or 1 = orientation) if this is set to 1 or 2. The\" +\n             \"congruency of the task does only apply to coherent oobs of main task. If this is set to 1 the remaining oobs secondary feature (the non task feature) is set at random.\" +\n             \"If this is set to 2 the remaining oobs have the same direction and orientation .*/\n        experiment_congruency_mode: {\n            type: ParameterType.INT,\n            pretty_name: \"Experiment congruency mode\",\n            default: 0,\n        },\n        /** Sets the main task when experiment is in congruency mode. The congruency of the other task then only\" +\n             \"applies to non random oobs of main task. */\n        experiment_main_task: {\n            type: ParameterType.INT,\n            pretty_name: \"Main task when experiment is set to congruency mode (0- movement, 1-orientation)\",\n            default: 0,\n        },\n        /** Units in which size and speed of oobs is expressed (null - percentage of aperture width, px - pixels). */\n        units: {\n            type: ParameterType.STRING,\n            pretty_name: \"Units in which size and speed of oobs is expressed\",\n            default: null,\n        },\n        /** Should stimuli be drawn on top of each other or intermixed **/\n        aperture_draw_mode: {\n            type: ParameterType.STRING,\n            pretty_name: \"When in overlay draws stimuli of different apertures on top of each other. When in intermixed oobs all show up in one aperture intermixed\",\n            default: \"overlay\",\n        },\n    },\n};\n/**\n * **ROK**\n *\n * jsPsych plugin for showing a random object kinematogram stimulus and recording a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://www.jspsych.org/plugins/jspsych-rok/ RDK plugin documentation on jspsych.org}\n * @copyright\n *\n *    We would appreciate it if you cited this paper when you use the ROK:\n *\n * ----------------------\n *\n * Copyright (C) 2021 Younes Strittmatter\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n */\nclass RokPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        //--------------------------------------\n        //---------SET PARAMETERS BEGIN---------\n        //--------------------------------------\n        //Note on '||' logical operator: If the first option is 'undefined', it evalutes to 'false' and the second option is returned as the assignment\n        // Note: trial properties are now read-only, so these params have all been changed to separate variables here and throughout trial function\n        var choices = assignParameterValue(trial.choices, []); //info.parameters.choices.default);\n        var correct_choice = assignParameterValue(trial.correct_choice, undefined); //info.parameters.correct_choice.default);\n        var trial_duration = assignParameterValue(trial.trial_duration, 0); //info.parameters.trial_duration.default);\n        var response_ends_trial = assignParameterValue(trial.response_ends_trial, true); //info.parameters.response_ends_trial.default);\n        var number_of_oobs = assignParameterValue(trial.number_of_oobs, 300); //info.parameters.number_of_oobs.default);\n        var coherent_movement_direction = assignParameterValue(trial.coherent_movement_direction, 0); // info.parameters.coherent_movement_direction.default);\n        var coherent_orientation = assignParameterValue(trial.coherent_orientation, 0); // info.parameters.coherent_orientation.default);\n        var coherence_movement = assignParameterValue(trial.coherence_movement, 50); //info.parameters.coherence_movement.default);\n        var coherence_orientation = assignParameterValue(trial.coherence_orientation, 50); //info.parameters.coherence_orientation.default);\n        var coherence_movement_opposite = assignParameterValue(trial.coherence_movement_opposite, 50); //info.parameters.coherence_movement_opposite.default);\n        var coherence_orientation_opposite = assignParameterValue(trial.coherence_orientation_opposite, 50); //info.parameters.coherence_orientation_opposite.default);\n        var movement_speed = assignParameterValue(trial.movement_speed, 10); //info.parameters.movement_speed.default);\n        var movement_speed_randomisation = assignParameterValue(trial.movement_speed_randomisation, 0); // info.parameters.movement_speed_randomisation.default);\n        var oob_size = assignParameterValue(trial.oob_size, 2); //info.parameters.oob_size.default);\n        var aperture_width = assignParameterValue(trial.aperture_width, 600); //info.parameters.aperture_width.default);\n        var aperture_height = assignParameterValue(trial.aperture_height, 400); //info.parameters.aperture_height.default);\n        var oob_color = assignParameterValue(trial.oob_color, \"white\"); //info.parameters.oob_color.default);\n        var background_color = assignParameterValue(trial.background_color, \"gray\"); //info.parameters.background_color.default);\n        var aperture_background_color = assignParameterValue(trial.aperture_background_color, \"#0000\");\n        var border = assignParameterValue(trial.border, false); //info.parameters.border.default);\n        var border_thickness = assignParameterValue(trial.border_thickness, 1); //info.parameters.border_thickness.default);\n        var border_color = assignParameterValue(trial.border_color, \"white\"); //info.parameters.border_color.default);\n        var stimulus_type = assignParameterValue(trial.stimulus_type, 0); //info.parameters.stimulus_type.default);\n        var aperture_shape = assignParameterValue(trial.aperture_shape, 0); //info.parameters.aperture_shape.default);\n        var random_movement_type = assignParameterValue(trial.random_movement_type, 0); //info.parameters.random_movement_type.default);\n        var random_orientation_type = assignParameterValue(trial.random_orientation_type, 0); //info.parameters.random_orientation_type.default);\n        var number_of_apertures = assignParameterValue(trial.number_of_apertures, 1); //info.parameters.number_of_apertures.default);\n        var density_unit_area = assignParameterValue(trial.density_unit_area, null); //info.parameters.number_of_apertures.default);\n        var aperture_position_left = assignParameterValue(trial.aperture_position_left, 50); //info.parameters.aperture_position_left.default);\n        var aperture_position_top = assignParameterValue(trial.aperture_position_top, 50); //info.parameters.aperture_position_top.default);\n        var prompt = assignParameterValue(trial.prompt, null); //info.parameters.prompt.default);\n        var fade_out = assignParameterValue(trial.fade_out, 0); //info.parameters.fade_out.default);\n        var stimulus_image = assignParameterValue(trial.stimulus_image, null); //info.parameters.stimulus_image.default);\n        var background_image = assignParameterValue(trial.background_image, null); //info.parameters.background_image.default);\n        var stimulus_image_keyframes = assignParameterValue(trial.stimulus_image_keyframes, 1); //info.parameters.stimulus_image_keyframes.default);\n        var background_image_keyframes = assignParameterValue(trial.background_image_keyframes, 1); //info.parameters.background_image_keyframes.default);\n        var stimulus_keyframe_time = assignParameterValue(trial.stimulus_keyframe_time, 0.1); //info.parameters.stimulus_keyframe_time.default);\n        var stimulus_mirror = assignParameterValue(trial.stimulus_mirror, 0); //info.parameters.stimulus_mirror.default);\n        var experiment_congruency_mode = assignParameterValue(trial.experiment_congruency_mode, 0); //info.parameters.experiment_congruency_mode.default);\n        var experiment_main_task = assignParameterValue(trial.experiment_main_task, 0); //info.parameters.experiment_main_task.default);\n        var units = assignParameterValue(trial.units, null);\n        var aperture_mode = assignParameterValue(trial.aperture_draw_mode, \"overlay\");\n        //--------------------------------------\n        //----------SET PARAMETERS END----------\n        //--------------------------------------\n        //--------Set up canvases BEGIN -------\n        let nApertures = number_of_apertures;\n        let nAperturesTmp = nApertures;\n        if (aperture_mode !== \"overlay\") {\n            nApertures = 1;\n        }\n        //Create canvas elements and append it to the DOM\n        var canvasArray = [];\n        var containerArray = [];\n        if (nApertures > 1) {\n            for (let i = 0; i < nApertures; i++) {\n                containerArray.push(document.createElement(\"div\"));\n                canvasArray.push(document.createElement(\"canvas\"));\n            }\n        }\n        else {\n            containerArray.push(document.createElement(\"div\"));\n            canvasArray.push(document.createElement(\"canvas\"));\n        }\n        for (let i = 0; i < nApertures; i++) {\n            let imgPath = getValueFromArrayOrNot(background_image, i);\n            if (imgPath != null) {\n                containerArray[i].style.backgroundImage =\n                    \"url(\" + getValueFromArrayOrNot(background_image, i) + \")\";\n                containerArray[i].style.backgroundRepeat = \"no-repeat\";\n                containerArray[i].style.backgroundSize = \"cover\";\n            }\n            display_element.appendChild(containerArray[i]);\n            containerArray[i].appendChild(canvasArray[i]);\n            if (Array.isArray(prompt)) {\n                let p = document.createElement(\"div\");\n                p.style.margin = \"0\";\n                p.style.padding = \"0\";\n                containerArray[i].appendChild(p);\n                p.style.textAlign = \"center\";\n                p.innerHTML = prompt[i];\n                p.style.position = \"absolute\";\n                p.style.transform = \"translate(-50%, 100%)\";\n                p.style.textAlign = \"center\";\n                p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n                p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n            }\n        }\n        if (prompt != null && !Array.isArray(prompt)) {\n            let p = document.createElement(\"div\");\n            p.style.margin = \"0\";\n            p.style.padding = \"0\";\n            containerArray[0].appendChild(p);\n            p.style.textAlign = \"center\";\n            p.innerHTML = prompt;\n            p.style.position = \"absolute\";\n            p.style.transform = \"translate(-50%, 100%)\";\n            p.style.textAlign = \"center\";\n            p.style.top = 10 + getValueFromArrayOrNot(aperture_height, 0) / 2 + \"px\";\n            p.style.width = getValueFromArrayOrNot(aperture_width, 0) + \"px\";\n        }\n        //Get body element from jsPsych\n        let body = document.getElementsByClassName(\"jspsych-display-element\")[0];\n        //Save the current settings to be restored later\n        let originalMargin = body.style.margin;\n        let originalPadding = body.style.padding;\n        let originalBackgroundColor = body.style.backgroundColor;\n        //Remove the margins and paddings of the display_element\n        body.style.margin = \"0\";\n        body.style.padding = \"0\";\n        //Remove the margins and padding of the canvas, center it\n        for (let i = 0; i < nApertures; i++) {\n            containerArray[i].style.margin = \"0px\";\n            containerArray[i].style.margin = \"0px\";\n            canvasArray[i].style.margin = \"0px\";\n            canvasArray[i].style.padding = \"0px\";\n            canvasArray[i].style.position = \"absolute\";\n            canvasArray[i].style.transform = \"translate(-50%, -50%)\";\n        }\n        //Set background color of body to be the same as\n        body.style.backgroundColor = background_color;\n        //Get the contexts of the canvases\n        let ctxArray = [];\n        for (let i = 0; i < nApertures; i++) {\n            ctxArray.push(canvasArray[i].getContext(\"2d\"));\n        }\n        // get dimensions of display element\n        const disp_size = body.getBoundingClientRect();\n        //Set canvases width, height, position and color;\n        for (let i = 0; i < nApertures; i++) {\n            canvasArray[i].width = getValueFromArrayOrNot(aperture_width, i);\n            canvasArray[i].height = getValueFromArrayOrNot(aperture_height, i);\n            canvasArray[i].style.backgroundColor = getValueFromArrayOrNot(aperture_background_color, i);\n            containerArray[i].style.position = \"absolute\";\n            if (Array.isArray(aperture_position_left) && Array.isArray(aperture_position_top)) {\n                // calculate top from display size (resize module doesn't work with top beeing a percentage)\n                let top = Math.round((aperture_position_top[i] * disp_size.height) / 100);\n                containerArray[i].style.top = top.toString() + \"px\";\n                containerArray[i].style.left = aperture_position_left[i].toString() + \"%\";\n            }\n            else {\n                if (nApertures > 1) {\n                    let x;\n                    if (nApertures % 2 == 0) {\n                        x = i * (100 / nApertures) + 100 / (2 * nApertures);\n                    }\n                    else {\n                        x = i * (100 / (nApertures + 1)) + 100 / (2 * (nApertures - 1));\n                    }\n                    // calculate top from display size (resize module doesn't work with top being a percentage)\n                    let top = Math.round((aperture_position_top * disp_size.height) / 100);\n                    containerArray[i].style.top = top.toString() + \"px\";\n                    containerArray[i].style.left = x.toString() + \"%\";\n                }\n                else {\n                    // calculate top from display size (resize module doesn't work with top being a percentage)\n                    let top = Math.round((aperture_position_top * disp_size.height) / 100);\n                    containerArray[i].style.top = top.toString() + \"px\";\n                    containerArray[i].style.left = aperture_position_left.toString() + \"%\";\n                }\n            }\n        }\n        //--------Set up canvases END-------\n        //--------rok variables and function calls begin--------\n        //Initialize stopping condition for animation function that runs in a loop\n        let stopOobMotion = false;\n        //Variable to control the frame rate, to ensure that the first frame is skipped because it follows a different timing\n        let firstFrame = true;\n        //Variable to start the timer\n        let timerHasStarted = false;\n        //Initialize object to store the response data. Default values of -1 are used if the trial times out and the subject has not pressed a valid key\n        let response = {\n            rt: -1,\n            key: \"\",\n        };\n        //Declare a global timeout ID to be initialized below in animateDotMotion function and to be used in after_response function\n        let timeoutID;\n        //Declare global variable to be defined in startKeyboardListener function and to be used in end_trial function\n        let keyboardListener;\n        //Declare global variable to store the frame rate of the trial\n        var frameRate = []; //How often the monitor refreshes, in ms. Currently an array to store all the intervals. Will be converted into a single number (the average) in end_trial function.\n        //variable to store how many frames were presented.\n        let numberOfFrames = 0;\n        // get the images if specified\n        let img = [];\n        if (stimulus_image != null) {\n            let imgSrc = stimulus_image;\n            if (!Array.isArray(imgSrc)) {\n                let i = document.createElement(\"img\");\n                i.src = imgSrc;\n                img.push(i);\n            }\n            else {\n                for (let j = 0; j < imgSrc.length; j++) {\n                    let iS = imgSrc[j];\n                    if (!Array.isArray(iS)) {\n                        let i = document.createElement(\"img\");\n                        i.src = iS;\n                        img.push(i);\n                    }\n                    else {\n                        let i = [];\n                        for (let k = 0; k < iS[j].length; k++) {\n                            let p = document.createElement(\"img\");\n                            p.src = iS[k];\n                            i.push(p);\n                        }\n                        img.push(i);\n                    }\n                }\n            }\n        }\n        let oobs = [];\n        //Calculate the number of coherent, opposite coherent, and incoherent oobs for movement/orientation\n        for (let i = 0; i < nAperturesTmp; i++) {\n            let nOob = getValueFromArrayOrNot(number_of_oobs, i);\n            // set number of objects, if density_unit_area is set\n            if (density_unit_area != null) {\n                let width = getValueFromArrayOrNot(aperture_width, i);\n                let height = getValueFromArrayOrNot(aperture_height, i);\n                let area = width * height;\n                nOob = (nOob * area) / density_unit_area;\n            }\n            let tmpCoherenceMovement = getValueFromArrayOrNot(coherence_movement, i);\n            let tmpOppositeCoherenceMovement = getValueFromArrayOrNot(coherence_movement_opposite, i);\n            let tmpCoherenceOrientation = getValueFromArrayOrNot(coherence_orientation, i);\n            let tmpOppositeCoherenceOrientation = getValueFromArrayOrNot(coherence_orientation_opposite, i);\n            let experimentMode = getValueFromArrayOrNot(experiment_congruency_mode, i);\n            let mainTask = getValueFromArrayOrNot(experiment_main_task, i);\n            let tmpOrientation = [];\n            let tmpMovementDirection = [];\n            if (experimentMode === 0) {\n                let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(tmpCoherenceMovement, tmpOppositeCoherenceMovement, nOob);\n                let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] = getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n                for (let j = 0; j < nCoherentMovement; j++) {\n                    tmpMovementDirection.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeMovement; j++) {\n                    tmpMovementDirection.push(-1);\n                }\n                for (let j = 0; j < nIncoherentMovement; j++) {\n                    tmpMovementDirection.push(0);\n                }\n                for (let j = 0; j < nCoherentOrientation; j++) {\n                    tmpOrientation.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n                    tmpOrientation.push(-1);\n                }\n                for (let j = 0; j < nIncoherentOrientation; j++) {\n                    tmpOrientation.push(0);\n                }\n                tmpOrientation = shuffleArray(tmpOrientation);\n                tmpMovementDirection = shuffleArray(tmpMovementDirection);\n            }\n            else if (mainTask === 0) {\n                let [nCoherentMovement, nCoherentOppositeMovement, nIncoherentMovement] = getNumbers(tmpCoherenceMovement, tmpOppositeCoherenceMovement, nOob);\n                let nCoherentOrientation = Math.floor((tmpCoherenceOrientation / 100) * nCoherentMovement);\n                let nCoherentOppositeOrientation = Math.floor((tmpOppositeCoherenceOrientation / 100) * nCoherentMovement);\n                if (tmpCoherenceOrientation + tmpOppositeCoherenceOrientation === 100) {\n                    nCoherentOppositeOrientation = nCoherentMovement - nCoherentOrientation;\n                }\n                for (let j = 0; j < nCoherentMovement; j++) {\n                    tmpMovementDirection.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeMovement; j++) {\n                    tmpMovementDirection.push(-1);\n                }\n                for (let j = 0; j < nIncoherentMovement; j++) {\n                    tmpMovementDirection.push(0);\n                }\n                for (let j = 0; j < nCoherentOrientation; j++) {\n                    tmpOrientation.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n                    tmpOrientation.push(-1);\n                }\n                for (let j = 0; j < nOob - (nCoherentOrientation + nCoherentOppositeOrientation); j++) {\n                    tmpOrientation.push(0);\n                }\n            }\n            else if (mainTask === 1) {\n                let [nCoherentOrientation, nCoherentOppositeOrientation, nIncoherentOrientation] = getNumbers(tmpCoherenceOrientation, tmpOppositeCoherenceOrientation, nOob);\n                let nCoherentMovement = Math.floor((tmpCoherenceMovement / 100) * nCoherentOrientation);\n                let nCoherentOppositeMovement = Math.floor((tmpOppositeCoherenceMovement / 100) * nCoherentOrientation);\n                if (tmpCoherenceMovement + tmpOppositeCoherenceMovement === 100) {\n                    nCoherentOppositeMovement = nCoherentOrientation - nCoherentMovement;\n                }\n                for (let j = 0; j < nCoherentOrientation; j++) {\n                    tmpOrientation.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeOrientation; j++) {\n                    tmpOrientation.push(-1);\n                }\n                for (let j = 0; j < nIncoherentOrientation; j++) {\n                    tmpOrientation.push(0);\n                }\n                for (let j = 0; j < nCoherentMovement; j++) {\n                    tmpMovementDirection.push(1);\n                }\n                for (let j = 0; j < nCoherentOppositeMovement; j++) {\n                    tmpMovementDirection.push(-1);\n                }\n                if (experimentMode === 1) {\n                    for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n                        tmpMovementDirection.push(0);\n                    }\n                }\n                else {\n                    for (let j = 0; j < nOob - (nCoherentMovement + nCoherentOppositeMovement); j++) {\n                        tmpOrientation.push(tmpOrientation[j + nCoherentMovement + nCoherentOppositeMovement]);\n                    }\n                }\n            }\n            let oobColor = getValueFromArrayOrNot(oob_color, i);\n            let stimulusType = getValueFromArrayOrNot(stimulus_type, i);\n            if (stimulusType === 3) {\n                oobColor = standardColor(oobColor);\n            }\n            let apertureType = getValueFromArrayOrNot(aperture_shape, i);\n            let speed = getValueFromArrayOrNot(movement_speed, i);\n            let speedRandomisation = getValueFromArrayOrNot(movement_speed_randomisation, i);\n            let size = getValueFromArrayOrNot(oob_size, i);\n            let isFade = getValueFromArrayOrNot(fade_out, i);\n            for (let j = 0; j < nOob; j++) {\n                let randomWalk = 0;\n                let randomOrient = 0;\n                let orientation = getValueFromArrayOrNot(coherent_orientation, i);\n                if (tmpOrientation[j] === -1) {\n                    orientation += 180;\n                }\n                else if (tmpOrientation[j] === 0) {\n                    orientation = Math.floor(Math.random() * 360);\n                    randomOrient = getValueFromArrayOrNot(random_orientation_type, i);\n                }\n                let movementDirection = getValueFromArrayOrNot(coherent_movement_direction, i);\n                if (tmpMovementDirection[j] === -1) {\n                    movementDirection += 180;\n                }\n                else if (tmpMovementDirection[j] === 0) {\n                    movementDirection = Math.floor(Math.random() * 360);\n                    randomWalk = getValueFromArrayOrNot(random_movement_type, i);\n                }\n                if (experimentMode === 2 &&\n                    mainTask === 0 &&\n                    tmpOrientation[j] === 0 &&\n                    tmpMovementDirection[j] != 1) {\n                    orientation = movementDirection;\n                }\n                else if (experimentMode === 2 &&\n                    mainTask === 1 &&\n                    tmpMovementDirection[j] === 0 &&\n                    tmpOrientation[j] != 1) {\n                    movementDirection = orientation;\n                }\n                let oob;\n                let ctx = ctxArray[i];\n                let cvs = canvasArray[i];\n                if (aperture_mode !== \"overlay\") {\n                    ctx = ctxArray[0];\n                    cvs = canvasArray[0];\n                }\n                if (stimulusType === 0) {\n                    oob = new Oob(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n                }\n                else if (stimulusType === 1) {\n                    oob = new OobCircle(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n                }\n                else if (stimulusType === 2) {\n                    oob = new OobSquare(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n                }\n                else if (stimulusType === 3) {\n                    oob = new OobBird(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, cvs, ctx, units);\n                }\n                else if (stimulusType === 4) {\n                    let imageArray, keyframes, keyframeTime, mirrorType;\n                    if (nAperturesTmp === 1) {\n                        imageArray = img;\n                        keyframes = stimulus_image_keyframes;\n                        keyframeTime = stimulus_keyframe_time;\n                        mirrorType = stimulus_mirror;\n                    }\n                    else {\n                        imageArray = getValueFromArrayOrNot(img, i);\n                        keyframes = getValueFromArrayOrNot(stimulus_image_keyframes, i);\n                        keyframeTime = getValueFromArrayOrNot(stimulus_keyframe_time, i);\n                        mirrorType = getValueFromArrayOrNot(stimulus_mirror, i);\n                    }\n                    oob = new OobImage(size, oobColor, orientation, movementDirection, speed, speedRandomisation, apertureType, randomWalk, randomOrient, isFade, imageArray, keyframes, keyframeTime, mirrorType, cvs, ctx, units);\n                }\n                oobs.push(oob);\n            }\n        }\n        oobs = shuffleArray(oobs);\n        //--------RDK variables and function calls end--------\n        //-------------------------------------\n        //-----------FUNCTIONS BEGIN-----------\n        //-------------------------------------\n        //----JsPsych Functions Begin----\n        //Function to start the keyboard listener\n        const startKeyboardListener = () => {\n            //Start the response listener if there are choices for keys\n            if (choices != \"NO_KEYS\") {\n                //Create the keyboard listener to listen for subjects' key response\n                keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                    callback_function: after_response, //Function to call once the subject presses a valid key\n                    valid_responses: choices, //The keys that will be considered a valid response and cause the callback function to be called\n                    rt_method: \"performance\", //The type of method to record timing information.\n                    persist: false, //If set to false, keyboard listener will only trigger the first time a valid key is pressed. If set to true, it has to be explicitly cancelled by the cancelKeyboardResponse plugin API.\n                    allow_held_key: false, //Only register the key once, after this getKeyboardResponse function is called. (Check JsPsych docs for better info under 'jsPsych.pluginAPI.getKeyboardResponse').\n                });\n            }\n        };\n        //Function to end the trial proper\n        const end_trial = () => {\n            //Stop the dot motion animation\n            stopOobMotion = true;\n            //Store the number of frames\n            numberOfFrames = frameRate.length;\n            //Variable to store the frame rate array\n            let frameRateArray = frameRate;\n            //Calculate the average frame rate\n            if (numberOfFrames > 0) {\n                //Check to make sure that the array is not empty\n                frameRate =\n                    frameRate.reduce((total, current) => total + current) / numberOfFrames; //Sum up all the elements in the array\n            }\n            else {\n                frameRate = 0; //Set to zero if the subject presses an answer before a frame is shown (i.e. if frameRate is an empty array)\n            }\n            //Cancel the keyboard listener if keyboardListener has been defined\n            if (typeof keyboardListener !== \"undefined\") {\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            }\n            //Place all the data to be saved from this trial in one data object\n            let trial_data = {\n                rt: response.rt, //The response time\n                key_press: response.key, //The key that the subject pressed\n                correct: correctOrNot(), //If the subject response was correct\n                choices: choices, //The set of valid keys\n                correct_choice: correct_choice, //The correct choice\n                trial_duration: trial_duration, //The trial duration\n                response_ends_trial: response_ends_trial, //If the response ends the trial\n                number_of_oobs: number_of_oobs,\n                coherent_movement_direction: coherent_movement_direction,\n                coherence_movement: coherence_movement,\n                opposite_coherence_movement: coherence_movement_opposite,\n                coherent_orientation: coherent_orientation,\n                coherence_orientation: coherence_orientation,\n                opposite_coherence_orientation: coherence_orientation_opposite,\n                movement_speed: movement_speed,\n                oob_size: oob_size,\n                oob_color: oob_color,\n                movement_speed_randomisation: movement_speed_randomisation,\n                aperture_width: aperture_width,\n                aperture_height: aperture_height,\n                background_color: background_color,\n                aperture_background_color: aperture_background_color,\n                frame_rate: frameRate, //The average frame rate for the trial\n                frame_rate_array: frameRateArray, //The array of ms per frame in this trial, in the form of a JSON string\n                number_of_frames: numberOfFrames, //The number of frames in this trial\n                stimulus_type: stimulus_type,\n                aperture_shape: aperture_shape,\n                random_movemet_type: random_movement_type,\n                random_orientation_type: random_orientation_type,\n                number_of_apertures: number_of_apertures,\n                density_unit_area: density_unit_area,\n                prompt: prompt,\n                aperture_position_left: aperture_position_left,\n                aperture_position_top: aperture_position_top,\n                aperture_mode: aperture_mode,\n            };\n            //Clear the body\n            display_element.innerHTML = \"\";\n            //Restore the settings to JsPsych defaults\n            body.style.margin = originalMargin;\n            body.style.padding = originalPadding;\n            body.style.backgroundColor = originalBackgroundColor;\n            //End this trial and move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        }; //End of end_trial\n        //start animation\n        animateDotMotion();\n        //Function to record the first response by the subject\n        function after_response(info) {\n            //If the response has not been recorded, record it\n            if (response.key == \"\") {\n                response = info; //Replace the response object created above\n            }\n            //If the parameter is set such that the response ends the trial, then kill the timeout and end the trial\n            if (response_ends_trial) {\n                window.clearTimeout(timeoutID);\n                end_trial();\n            }\n        } //End of after_response\n        //Function that determines if the response is correct\n        const correctOrNot = () => {\n            //Check that the correct_choice has been defined and that it is an array\n            if (typeof correct_choice !== \"undefined\" && correct_choice.constructor === Array) {\n                if (typeof correct_choice[0] === \"string\" || correct_choice[0] instanceof String) {\n                    var key_in_choices = correct_choice.every((x) => {\n                        return this.jsPsych.pluginAPI.compareKeys(x, response.key);\n                    });\n                    return key_in_choices; //If the response is included in the correct_choice array, return true. Else, return false.\n                }\n                else if (typeof correct_choice[0] === \"number\") {\n                    // the elements are numbers (javascript character codes)\n                    console.error(\"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\");\n                    return false; // added due to TS error: not all code paths return a value\n                }\n                else {\n                    console.error(\"Error in ROK plugin: elements in the correct_choice array must be key characters (strings).\");\n                    return false; // added due to TS error: not all code paths return a value\n                }\n            }\n            else {\n                console.error(\"Error in ROK plugin: you must specify an array of key characters for the correct_choice parameter.\");\n                return false; // added due to TS error: not all code paths return a value\n            }\n        };\n        //Function that clears the dots on the canvas by drawing over it with the color of the baclground\n        function update(deltaTime) {\n            for (let i = 0; i < oobs.length; i++) {\n                oobs[i].update(deltaTime);\n            }\n        }\n        //Draw the dots on the canvas after they're updated\n        function draw() {\n            for (let i = 0; i < canvasArray.length; i++) {\n                ctxArray[i].clearRect(0, 0, canvasArray[i].width, canvasArray[i].height);\n            }\n            for (let i = 0; i < oobs.length; i++) {\n                oobs[i].draw();\n            }\n        } //End of draw\n        //Function to make the dots move on the canvas\n        function animateDotMotion() {\n            let previousTimestamp;\n            let dT = 0;\n            //frameRequestID saves a long integer that is the ID of this frame request. The ID is then used to terminate the request below.\n            let frameRequestID = window.requestAnimationFrame(animate);\n            //Start to listen to subject's key responses\n            startKeyboardListener();\n            //Declare a timestamp\n            function animate() {\n                //If stopping condition has been reached, then stop the animation\n                if (stopOobMotion) {\n                    window.cancelAnimationFrame(frameRequestID); //Cancels the frame request\n                }\n                //Else continue with another frame request\n                else {\n                    frameRequestID = window.requestAnimationFrame(animate); //Calls for another frame request\n                    //If the timer has not been started and it is set, then start the timer\n                    if (!timerHasStarted && trial_duration > 0) {\n                        //If the trial duration is set, then set a timer to count down and call the end_trial function when the time is up\n                        //(If the subject did not press a valid keyboard response within the trial duration, then this will end the trial)\n                        timeoutID = window.setTimeout(end_trial, trial_duration); //This timeoutID is then used to cancel the timeout should the subject press a valid key\n                        //The timer has started, so we set the variable to true so it does not start more timers\n                        timerHasStarted = true;\n                    }\n                    update(dT);\n                    draw(); //Draw each of the dots in their respective apertures\n                    //If this is before the first frame, then start the timestamp\n                    if (previousTimestamp === undefined) {\n                        previousTimestamp = performance.now();\n                    }\n                    //Else calculate the time and push it into the array\n                    else {\n                        let currentTimeStamp = performance.now(); //Variable to hold current timestamp\n                        if (document.hasFocus()) {\n                            dT = currentTimeStamp - previousTimestamp;\n                        }\n                        else {\n                            previousTimestamp = performance.now();\n                        }\n                        frameRate.push(Math.round(currentTimeStamp - previousTimestamp)); //Push the interval into the frameRate array\n                        previousTimestamp = currentTimeStamp; //Reset the timestamp\n                    }\n                }\n            }\n        }\n        //----RDK Functions End----\n        //----General Functions Begin//----\n        //Function to assign the default values for the staircase parameters\n        function assignParameterValue(argument, defaultValue) {\n            return typeof argument !== \"undefined\" ? argument : defaultValue;\n        }\n        //----General Functions End//----\n        //-------------------------------------\n        //-----------FUNCTIONS END-------------\n        //-------------------------------------\n    } // END OF TRIAL\n}\nRokPlugin.info = info;\n//Return the plugin object which contains the trial\n//----RDK Functions End----\n//----General Functions Begin//----\n//Function to assign the default values for the staircase parameters\n//----General Functions End//----\n//-------------------------------------\n//-----------FUNCTIONS END-------------\n//-------------------------------------\nexport default RokPlugin;\nfunction getValueFromArrayOrNot(arrayOrNot, l) {\n    if (Array.isArray(arrayOrNot)) {\n        return arrayOrNot[l];\n    }\n    return arrayOrNot;\n}\nfunction standardColor(color) {\n    let cvs = document.createElement(\"canvas\");\n    cvs.height = 1;\n    cvs.width = 1;\n    let ctx = cvs.getContext(\"2d\");\n    ctx.fillStyle = color;\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.getImageData(0, 0, 1, 1).data;\n}\nfunction brighten(color, value) {\n    let col = [0, 0, 0, 255];\n    for (let i = 0; i < 3; i++) {\n        let tmp = color[i] + value;\n        tmp = tmp > 255 ? 255 : tmp;\n        tmp = tmp < 0 ? 0 : tmp;\n        col[i] = tmp;\n    }\n    return col;\n}\nfunction byteToHex(num) {\n    // Turns a number (0-255) into a 2-character hex number (00-ff)\n    return (\"0\" + num.toString(16)).slice(-2);\n}\nfunction stdColorToHex(color) {\n    // Convert any CSS color to a hex representation\n    // Examples:\n    // colorToHex('red')            # '#ff0000'\n    // colorToHex('rgb(255, 0, 0)') # '#ff0000'\n    let hex;\n    hex = [0, 1, 2]\n        .map(function (idx) {\n        return byteToHex(color[idx]);\n    })\n        .join(\"\");\n    return \"#\" + hex;\n}\nfunction getX(angle) {\n    let rad = (angle * Math.PI) / 180;\n    return Math.cos(rad);\n}\nfunction getY(angle) {\n    let rad = (angle * Math.PI) / 180;\n    return -Math.sin(rad);\n}\nfunction getNumbers(per, perOpp, n) {\n    let nC = Math.round((per / 100) * n);\n    let nCO;\n    if (per + perOpp == 100) {\n        nCO = n - nC;\n    }\n    else {\n        nCO = Math.round((perOpp / 100) * n);\n    }\n    let nR = n - nC - nCO;\n    if (nC + nCO > 100 && per == 50) {\n        nC = 100 - nCO;\n    }\n    return [nC, nCO, nR];\n}\nfunction shuffleArray(array) {\n    let curId = array.length;\n    // There remain elements to shuffle\n    while (0 !== curId) {\n        // Pick a remaining element\n        let randId = Math.floor(Math.random() * curId);\n        curId -= 1;\n        // Swap it with the current element.\n        let tmp = array[curId];\n        array[curId] = array[randId];\n        array[randId] = tmp;\n    }\n    return array;\n}\nfunction shuffleArraysParalell(arrays) {\n    for (let j = arrays[0].length - 1; j > 0; j--) {\n        for (let i = 0; i < arrays.length; i++) {\n            const k = Math.floor(Math.random() * (j + 1));\n            [arrays[i][j], arrays[i][k]] = [arrays[i][k], arrays[i][j]];\n        }\n    }\n}\nfunction getOffset(el) {\n    const rect = el.getBoundingClientRect();\n    return {\n        left: rect.left + window.scrollX,\n        top: rect.top + window.scrollY,\n    };\n}\n/// O(rientated) ob(ject)\nclass Oob {\n    constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units) {\n        this.canvas = canvas;\n        if (units === \"px\") {\n        }\n        this.size = (canvas.width * size) / 100;\n        if (units === \"px\") {\n            this.size = size;\n        }\n        this.color = color;\n        this.ctx = ctx;\n        this.pos = { x: 0, y: 0 };\n        this.vel = { x: 0, y: 0 };\n        if (apertureType == 0) {\n            this.pos.x = Math.random() * canvas.width;\n            this.pos.y = Math.random() * canvas.height;\n        }\n        if (apertureType == 1) {\n            let angle = Math.random() * 2 * Math.PI;\n            let r = Math.sqrt(Math.sqrt(Math.random())) - 0.5;\n            this.pos.x = r * Math.sin(angle) * canvas.width + canvas.width / 2;\n            this.pos.y = r * Math.cos(angle) * canvas.height + canvas.height / 2;\n        }\n        this.speedRes =\n            ((canvas.width * speed) / 100) *\n                (1 + ((randomisation / 100) * Math.random() - randomisation / 100));\n        if (units === \"px\") {\n            this.speedRes = speed * (1 + ((randomisation / 100) * Math.random() - randomisation / 100));\n        }\n        this.orientation = orientation;\n        this.movementDirection = movementDirection;\n        this.setVel();\n        // corners of triangle rel\n        this.ld = { x: 0, y: 0 };\n        this.lu = { x: 0, y: 0 };\n        this.r = { x: 0, y: 0 };\n        this.setOrient();\n        this.isRandomWalk = isRandomWalk;\n        this.rW = (Math.random() - 0.5) * 10;\n        this.isRandomOrientated = isRandomOrientated;\n        this.rO = (Math.random() - 0.5) * 10;\n        this.apertureType = apertureType;\n        this.timeToChangeMovement = Math.random();\n        this.timeToChangeOrientation = Math.random();\n        this.isFade = isFade;\n        this.alpha = 1;\n    }\n    setVel() {\n        this.vel.x = getX(this.movementDirection) * this.speedRes;\n        this.vel.y = getY(this.movementDirection) * this.speedRes;\n    }\n    setOrient() {\n        this.ld.x = getX(this.orientation + 270) * this.size;\n        this.ld.y = getY(this.orientation + 270) * this.size;\n        this.lu.x = getX(this.orientation + 90) * this.size;\n        this.lu.y = getY(this.orientation + 90) * this.size;\n        this.r.x = getX(this.orientation) * this.size;\n        this.r.y = getY(this.orientation) * this.size;\n    }\n    randomMovement(deltaTime) {\n        this.movementDirection += (this.rW * deltaTime) / 1000;\n        this.setVel();\n        this.timeToChangeMovement += deltaTime / 1000;\n        let d = 1 - this.timeToChangeMovement;\n        if (d < 0) {\n            this.rW = (Math.random() - 0.5) * 30;\n            this.timeToChangeMovement = -d;\n        }\n    }\n    randomOrientation(deltaTime) {\n        this.orientation += (this.rO * deltaTime) / 1000;\n        if (this.orientation < 0) {\n            this.orientation = 360 - this.orientation;\n        }\n        else if (this.orientation > 360) {\n            this.orientation = this.orientation - 360;\n        }\n        this.setOrient();\n        this.timeToChangeOrientation += deltaTime / 1000;\n        let d = 1 - this.timeToChangeOrientation;\n        if (d < 0) {\n            this.rO = (Math.random() - 0.5) * 60;\n            this.setOrient();\n            this.timeToChangeOrientation = -d;\n        }\n    }\n    handleOutOfBounds() {\n        if (this.apertureType == 0) {\n            this.alpha = 0.1;\n            if (this.pos.x < -this.size) {\n                this.pos.x = this.canvas.width + this.size;\n            }\n            else if (this.pos.x > this.canvas.width + this.size) {\n                this.pos.x = -this.size;\n            }\n            if (this.pos.y < -this.size) {\n                this.pos.y = this.canvas.height + this.size;\n            }\n            else if (this.pos.y > this.canvas.height + this.size) {\n                this.pos.y = -this.size;\n            }\n            let d = Math.min(this.pos.x - this.size, this.pos.y - this.size, this.canvas.width - (this.pos.x + this.size), this.canvas.height - (this.pos.y + this.size));\n            if (d < this.canvas.width / 20 && this.isFade) {\n                this.alpha = d / (this.canvas.width / 20);\n                if (this.alpha < 0)\n                    this.alpha = 0;\n            }\n            else {\n                this.alpha = 1;\n            }\n        }\n        if (this.apertureType == 1) {\n            this.alpha = 0.1;\n            let a = this.canvas.width / 2;\n            let b = this.canvas.height / 2;\n            let x = this.pos.x - a;\n            let y = this.pos.y - b;\n            let d = (x * x) / (a * a) + (y * y) / (b * b);\n            if (d > 0.7 && this.isFade) {\n                this.alpha = (1 - d) / 0.3;\n                if (this.alpha < 0)\n                    this.alpha = 0;\n            }\n            else {\n                this.alpha = 1;\n            }\n            if (d > 1) {\n                // (a + this.size / 2) * (a + this.size / 2) + (b + this.size / 2) * (b + this.size / 2)) {\n                x *= -0.99;\n                y *= -0.99;\n                this.pos.x = x + a;\n                this.pos.y = y + b;\n            }\n        }\n    }\n    // deltaTime is given in ms!\n    update(deltaTime) {\n        // updatePosition\n        this.pos.x += (this.vel.x * deltaTime) / 1000;\n        this.pos.y += (this.vel.y * deltaTime) / 1000;\n        if (this.isRandomWalk)\n            this.randomMovement(deltaTime);\n        if (this.isRandomOrientated)\n            this.randomOrientation(deltaTime);\n        this.handleOutOfBounds();\n    }\n    draw() {\n        this.ctx.globalAlpha = this.alpha;\n        this.ctx.beginPath();\n        let x = this.pos.x + this.ld.x;\n        let y = this.pos.y + this.ld.y;\n        this.ctx.moveTo(x, y);\n        x = this.pos.x + this.lu.x;\n        y = this.pos.y + this.lu.y;\n        this.ctx.lineTo(x, y);\n        x = this.pos.x + this.r.x;\n        y = this.pos.y + this.r.y;\n        this.ctx.lineTo(x, y);\n        this.ctx.fillStyle = this.color;\n        this.ctx.fill();\n    }\n}\nclass OobBird extends Oob {\n    constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units) {\n        super(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units);\n        this.animationTime = Math.random();\n        this.animationFrame = 4;\n        if (this.animationTime < 0.8)\n            this.animationFrame = 3;\n        if (this.animationTime < 0.6)\n            this.animationFrame = 2;\n        if (this.animationTime < 0.4)\n            this.animationFrame = 1;\n        if (this.animationTime < 0.2)\n            this.animationFrame = 0;\n        this.animationTime *= 0.1;\n        this.animdir = 1;\n        let stdColor = color;\n        this.makeColors(stdColor, orientation);\n    }\n    makeColors(color, orientation) {\n        this.colorsLeft = [];\n        this.colorsRight = [];\n        let brightenStartR = Math.round(-getY(orientation) * 5);\n        let brightenStartL = Math.round(getX(orientation) * 5);\n        let colR = brighten(color, brightenStartR);\n        let colL = brighten(color, brightenStartL);\n        this.colorsRight.push(stdColorToHex(colR));\n        this.colorsLeft.push(stdColorToHex(colL));\n        for (let i = 0; i < 6; i++) {\n            colR = brighten(colR, brightenStartR);\n            colL = brighten(colL, brightenStartL);\n            this.colorsRight.push(stdColorToHex(colR));\n            this.colorsLeft.push(stdColorToHex(colL));\n        }\n    }\n    update(deltaTime) {\n        super.update(deltaTime);\n        this.animationTime += deltaTime / 1000;\n        let d = 0.1 - this.animationTime;\n        if (d < 0) {\n            this.animationFrame += this.animdir;\n            this.animationTime = -d;\n            if (this.animationFrame > 5 || this.animationFrame < 1) {\n                this.animationTime -= 0.1;\n                this.animdir *= -1;\n            }\n        }\n        //this.animationFrame = 5;\n    }\n    draw() {\n        this.ctx.globalAlpha = this.alpha;\n        let px = this.pos.x + 0.2 * this.r.x;\n        let py = this.pos.y + 0.2 * this.r.y;\n        this.ctx.beginPath();\n        this.ctx.moveTo(px, py);\n        let x = this.pos.x + this.ld.x / (this.animationFrame * 0.1 + 1);\n        let y = this.pos.y + this.ld.y / (this.animationFrame * 0.1 + 1);\n        this.ctx.lineTo(x, y);\n        x = this.pos.x + this.r.x;\n        y = this.pos.y + this.r.y;\n        this.ctx.lineTo(x, y);\n        this.ctx.fillStyle = this.colorsRight[this.animationFrame];\n        this.ctx.fill();\n        this.ctx.beginPath();\n        this.ctx.moveTo(px, py);\n        x = this.pos.x + this.lu.x / (this.animationFrame * 0.1 + 1);\n        y = this.pos.y + this.lu.y / (this.animationFrame * 0.1 + 1);\n        this.ctx.lineTo(x, y);\n        x = this.pos.x + this.r.x;\n        y = this.pos.y + this.r.y;\n        this.ctx.lineTo(x, y);\n        this.ctx.fillStyle = this.colorsLeft[this.animationFrame];\n        this.ctx.fill();\n    }\n}\nclass OobCircle extends Oob {\n    draw() {\n        this.ctx.globalAlpha = this.alpha;\n        this.ctx.beginPath();\n        this.ctx.arc(this.pos.x, this.pos.y, this.size / 2, 0, Math.PI * 2);\n        this.ctx.fillStyle = this.color;\n        this.ctx.fill();\n    }\n}\nclass OobSquare extends Oob {\n    draw() {\n        this.ctx.globalAlpha = this.alpha;\n        this.ctx.beginPath();\n        let x = this.pos.x - this.size / 2;\n        let y = this.pos.y - this.size / 2;\n        this.ctx.moveTo(x, y);\n        x = this.pos.x + this.size / 2;\n        y = this.pos.y - this.size / 2;\n        this.ctx.lineTo(x, y);\n        x = this.pos.x + this.size / 2;\n        y = this.pos.y + this.size / 2;\n        this.ctx.lineTo(x, y);\n        x = this.pos.x - this.size / 2;\n        y = this.pos.y + this.size / 2;\n        this.ctx.lineTo(x, y);\n        this.ctx.fillStyle = this.color;\n        this.ctx.fill();\n    }\n}\nclass OobImage extends Oob {\n    constructor(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, imageArray, keyframes, keyframeTime, mirrorType, canvas, ctx, units) {\n        super(size, color, orientation, movementDirection, speed, randomisation, apertureType, isRandomWalk, isRandomOrientated, isFade, canvas, ctx, units);\n        if (Array.isArray(imageArray)) {\n            let i = Math.floor(Math.random() * imageArray.length);\n            this.img = imageArray[i];\n            this.keyframes = getValueFromArrayOrNot(keyframes, i);\n            this.keyframeTime = getValueFromArrayOrNot(keyframeTime, i);\n            this.mirrorType = getValueFromArrayOrNot(mirrorType, i);\n        }\n        else {\n            this.img = imageArray;\n            this.keyframes = keyframes;\n            this.keyframeTime = keyframeTime;\n            this.mirrorType = mirrorType;\n        }\n        this.imgWidth = this.img.naturalWidth / this.keyframes;\n        this.imgHeight = this.img.naturalHeight;\n        this.actualKeyframe = Math.floor(Math.random() * this.keyframes);\n        this.animationTime = Math.random() * this.keyframeTime;\n    }\n    update(deltaTime) {\n        super.update(deltaTime);\n        this.animationTime += deltaTime / 1000;\n        let d = this.keyframeTime - this.animationTime;\n        if (d < 0) {\n            this.animationTime = 0;\n            this.actualKeyframe++;\n            if (this.actualKeyframe >= this.keyframes)\n                this.actualKeyframe = 0;\n        }\n    }\n    draw() {\n        this.ctx.globalAlpha = this.alpha;\n        this.ctx.translate(this.pos.x, this.pos.y);\n        if (this.mirrorType === 0) {\n            this.ctx.rotate((-Math.PI * this.orientation) / 180);\n        }\n        else if (this.mirrorType == 1) {\n            if (this.orientation > 90 && this.orientation < 270) {\n                this.ctx.rotate((-Math.PI * (this.orientation - 180)) / 180);\n            }\n            else {\n                this.ctx.rotate((-Math.PI * this.orientation) / 180);\n            }\n        }\n        this.ctx.translate(-this.pos.x, -this.pos.y);\n        if (this.mirrorType === 0) {\n            this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, 0, this.imgWidth, this.imgHeight, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n        }\n        else if (this.mirrorType === 1) {\n            if (this.orientation > 90 && this.orientation < 270) {\n                this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, this.imgHeight / 2, this.imgWidth, this.imgHeight / 2, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n            }\n            else {\n                this.ctx.drawImage(this.img, this.actualKeyframe * this.imgWidth, 0, this.imgWidth, this.imgHeight / 2, this.pos.x - this.size / 2, this.pos.y - this.size / 2, this.size, this.size);\n            }\n        }\n        this.ctx.translate(this.pos.x, this.pos.y);\n        if (this.mirrorType === 0) {\n            this.ctx.rotate((Math.PI * this.orientation) / 180);\n        }\n        else if (this.mirrorType === 1) {\n            if (this.orientation > 90 && this.orientation < 270) {\n                this.ctx.rotate((Math.PI * (this.orientation - 180)) / 180);\n            }\n            else {\n                this.ctx.rotate((Math.PI * this.orientation) / 180);\n            }\n        }\n        this.ctx.translate(-this.pos.x, -this.pos.y);\n    }\n}\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-rok/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"rok\";\n    readonly parameters: {\n        /** The valid keys that the subject can press to indicate a response. */\n        readonly choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Choices\";\n            readonly default: \"ALL_KEYS\";\n        };\n        /** The correct keys for that trial. */\n        readonly correct_choice: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Correct choice\";\n            readonly default: any;\n        };\n        /** The length of stimulus presentation. Zero for endless loop. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: 0;\n        };\n        /** If true, then any valid key will end the trial. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /** The number of oriented objects per set in the stimulus. */\n        readonly number_of_oobs: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Number of oriented objectes\";\n            readonly default: 300;\n        };\n        /** The direction of coherent motion in degrees (0 degre meaning right). */\n        readonly coherent_movement_direction: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Coherent movement direction\";\n            readonly default: 0;\n        };\n        /** The orientation of the objects in degree (0 degree meaning right). */\n        readonly coherent_orientation: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Coherent object orientation\";\n            readonly default: 0;\n        };\n        /** The percentage of oriented objects moving in the coherent direction. */\n        readonly coherence_movement: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Movement coherence\";\n            readonly default: 50;\n        };\n        /** The percentage of objects that are oriented in the coherent orientation. */\n        readonly coherence_orientation: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Orientation coherence\";\n            readonly default: 50;\n        };\n        /** The percentage of oriented objects moving in the direction opposite of the coherent direction. */\n        readonly coherence_movement_opposite: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Opposite movement coherence\";\n            readonly default: 0;\n        };\n        /** The percentage of objects that are oriented opposite of the coherent orientation. */\n        readonly coherence_orientation_opposite: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Opposite orientation coherence\";\n            readonly default: 0;\n        };\n        /** The movement speed of the oobs in (percentage of aperature_width)/second. */\n        readonly movement_speed: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Movement Speed\";\n            readonly default: 10;\n        };\n        /** The percentage of randomisation in movement speed \" +\n             \"(0 meaning all orientated objects move with speed defined in movement_speed,\" +\n             \" 100 meaning movement speeds from 0 to 2x movement_speed). */\n        readonly movement_speed_randomisation: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Movement speed randomisation\";\n            readonly default: 0;\n        };\n        /** The size of the orientated objects in percentage of aperture_width. */\n        readonly oob_size: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Object size\";\n            readonly default: 2;\n        };\n        /** The width of the aperture in pixels. */\n        readonly aperture_width: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Aperture width\";\n            readonly default: 600;\n        };\n        /** The height of the aperture in pixels. */\n        readonly aperture_height: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Aperture height\";\n            readonly default: 400;\n        };\n        /** The color of the dots. */\n        readonly oob_color: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Dot color\";\n            readonly default: \"white\";\n        };\n        /** The background of the stimulus. */\n        readonly background_color: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Background color\";\n            readonly default: \"gray\";\n        };\n        /** The presence of a border around the aperture. */\n        readonly border: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Border\";\n            readonly default: false;\n        };\n        /** The thickness of the border in pixels. */\n        readonly border_thickness: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Border width\";\n            readonly default: 1;\n        };\n        /**The color of the border. */\n        readonly border_color: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Border Color\";\n            readonly default: 1;\n        };\n        /** Apperance of stimulus (0-triangles, 1-circle, 2-square, 3-origami_birds, 4-image). */\n        readonly stimulus_type: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus type\";\n            readonly default: 0;\n        };\n        /** Shade of aperture (0 - rectangular, 1 - elliptic). */\n        readonly aperture_shape: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"aperture shape\";\n            readonly default: 0;\n        };\n        /** Backgroundcolor of aperture */\n        readonly aperture_background_color: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Background of aperture\";\n            readonly default: \"#0000\";\n        };\n        /** Type of random movement (0 direction is random but fixed, 1 movement direction of incoherent oobs changes over time). */\n        readonly random_movement_type: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Random movement type\";\n            readonly default: 0;\n        };\n        /** Type of random movement (0 - orientation is random but fixed, 1 - orientation of incoherent oobs changes over time). */\n        readonly random_orientation_type: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Random orientation type\";\n            readonly default: 0;\n        };\n        /** Number of apertures. If greater then one, other parameters of trial should be arrays. */\n        readonly number_of_apertures: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Number of apertures\";\n            readonly default: 1;\n        };\n        /** If this parameter is set, number_of_objects is interpreted as average number_of_objects per density_unit_area (in pixels). */\n        readonly density_unit_area: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Density area\";\n            readonly default: any;\n        };\n        /** Position of midpoint of aperture in x direction in percentage of window width (50 being middle). */\n        readonly aperture_position_left: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Horizontal position of aperature\";\n            readonly default: 50;\n        };\n        /** Position of midpoint of aperture in y direction in percentage of window width (0 being top, 50 being middle, 100 being bot). */\n        readonly aperture_position_top: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Vertical position of aperature\";\n            readonly default: 50;\n        };\n        /** Prompt that is presented above the stimulus. */\n        readonly prompt: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /** Fade the oobs on the edges of the aperture. */\n        readonly fade_out: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Fade out on edges\";\n            readonly default: 0;\n        };\n        /** Pictures of stimuli, can be key-framed(animated) or randomised, see documentation. */\n        readonly stimulus_image: {\n            readonly type: ParameterType.IMAGE;\n            readonly pretty_name: \"Stimuli pictures\";\n            readonly default: any;\n        };\n        /** Background image, can be key-framed(animated) or randomised, see documentation. */\n        readonly background_image: {\n            readonly type: ParameterType.IMAGE;\n            readonly pretty_name: \"Background image\";\n            readonly default: any;\n        };\n        /** Number of keyframes in stimulus images. */\n        readonly stimulus_image_keyframes: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Keyframes of stimulus pictures\";\n            readonly default: 1;\n        };\n        /** Number of keyframes in background pictures. */\n        readonly background_image_keyframes: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Keframse of background pictures\";\n            readonly default: 1;\n        };\n        /** Time between keyframes. */\n        readonly stimulus_keyframe_time: {\n            readonly type: ParameterType.FLOAT;\n            readonly pretty_name: \"Keyframe time\";\n            readonly default: 0.1;\n        };\n        /** Mirror image instead of rotating (1 - x axis, 2 - y axis). */\n        readonly stimulus_mirror: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Mirror image time\";\n            readonly default: 0;\n        };\n        /** Sets experiment to congruency mode: experiment_main_task has to be  set (0 = movement or 1 = orientation) if this is set to 1 or 2. The\" +\n             \"congruency of the task does only apply to coherent oobs of main task. If this is set to 1 the remaining oobs secondary feature (the non task feature) is set at random.\" +\n             \"If this is set to 2 the remaining oobs have the same direction and orientation .*/\n        readonly experiment_congruency_mode: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Experiment congruency mode\";\n            readonly default: 0;\n        };\n        /** Sets the main task when experiment is in congruency mode. The congruency of the other task then only\" +\n             \"applies to non random oobs of main task. */\n        readonly experiment_main_task: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Main task when experiment is set to congruency mode (0- movement, 1-orientation)\";\n            readonly default: 0;\n        };\n        /** Units in which size and speed of oobs is expressed (null - percentage of aperture width, px - pixels). */\n        readonly units: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Units in which size and speed of oobs is expressed\";\n            readonly default: any;\n        };\n        /** Should stimuli be drawn on top of each other or intermixed **/\n        readonly aperture_draw_mode: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"When in overlay draws stimuli of different apertures on top of each other. When in intermixed oobs all show up in one aperture intermixed\";\n            readonly default: \"overlay\";\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **ROK**\n *\n * jsPsych plugin for showing a random object kinematogram stimulus and recording a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://www.jspsych.org/plugins/jspsych-rok/ RDK plugin documentation on jspsych.org}\n * @copyright\n *\n *    We would appreciate it if you cited this paper when you use the ROK:\n *\n * ----------------------\n *\n * Copyright (C) 2021 Younes Strittmatter\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n */\ndeclare class RokPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"rok\";\n        readonly parameters: {\n            /** The valid keys that the subject can press to indicate a response. */\n            readonly choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Choices\";\n                readonly default: \"ALL_KEYS\";\n            };\n            /** The correct keys for that trial. */\n            readonly correct_choice: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Correct choice\";\n                readonly default: any;\n            };\n            /** The length of stimulus presentation. Zero for endless loop. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: 0;\n            };\n            /** If true, then any valid key will end the trial. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /** The number of oriented objects per set in the stimulus. */\n            readonly number_of_oobs: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Number of oriented objectes\";\n                readonly default: 300;\n            };\n            /** The direction of coherent motion in degrees (0 degre meaning right). */\n            readonly coherent_movement_direction: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Coherent movement direction\";\n                readonly default: 0;\n            };\n            /** The orientation of the objects in degree (0 degree meaning right). */\n            readonly coherent_orientation: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Coherent object orientation\";\n                readonly default: 0;\n            };\n            /** The percentage of oriented objects moving in the coherent direction. */\n            readonly coherence_movement: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Movement coherence\";\n                readonly default: 50;\n            };\n            /** The percentage of objects that are oriented in the coherent orientation. */\n            readonly coherence_orientation: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Orientation coherence\";\n                readonly default: 50;\n            };\n            /** The percentage of oriented objects moving in the direction opposite of the coherent direction. */\n            readonly coherence_movement_opposite: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Opposite movement coherence\";\n                readonly default: 0;\n            };\n            /** The percentage of objects that are oriented opposite of the coherent orientation. */\n            readonly coherence_orientation_opposite: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Opposite orientation coherence\";\n                readonly default: 0;\n            };\n            /** The movement speed of the oobs in (percentage of aperature_width)/second. */\n            readonly movement_speed: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Movement Speed\";\n                readonly default: 10;\n            };\n            /** The percentage of randomisation in movement speed \" +\n                 \"(0 meaning all orientated objects move with speed defined in movement_speed,\" +\n                 \" 100 meaning movement speeds from 0 to 2x movement_speed). */\n            readonly movement_speed_randomisation: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Movement speed randomisation\";\n                readonly default: 0;\n            };\n            /** The size of the orientated objects in percentage of aperture_width. */\n            readonly oob_size: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Object size\";\n                readonly default: 2;\n            };\n            /** The width of the aperture in pixels. */\n            readonly aperture_width: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Aperture width\";\n                readonly default: 600;\n            };\n            /** The height of the aperture in pixels. */\n            readonly aperture_height: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Aperture height\";\n                readonly default: 400;\n            };\n            /** The color of the dots. */\n            readonly oob_color: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Dot color\";\n                readonly default: \"white\";\n            };\n            /** The background of the stimulus. */\n            readonly background_color: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Background color\";\n                readonly default: \"gray\";\n            };\n            /** The presence of a border around the aperture. */\n            readonly border: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Border\";\n                readonly default: false;\n            };\n            /** The thickness of the border in pixels. */\n            readonly border_thickness: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Border width\";\n                readonly default: 1;\n            };\n            /**The color of the border. */\n            readonly border_color: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Border Color\";\n                readonly default: 1;\n            };\n            /** Apperance of stimulus (0-triangles, 1-circle, 2-square, 3-origami_birds, 4-image). */\n            readonly stimulus_type: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus type\";\n                readonly default: 0;\n            };\n            /** Shade of aperture (0 - rectangular, 1 - elliptic). */\n            readonly aperture_shape: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"aperture shape\";\n                readonly default: 0;\n            };\n            /** Backgroundcolor of aperture */\n            readonly aperture_background_color: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Background of aperture\";\n                readonly default: \"#0000\";\n            };\n            /** Type of random movement (0 direction is random but fixed, 1 movement direction of incoherent oobs changes over time). */\n            readonly random_movement_type: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Random movement type\";\n                readonly default: 0;\n            };\n            /** Type of random movement (0 - orientation is random but fixed, 1 - orientation of incoherent oobs changes over time). */\n            readonly random_orientation_type: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Random orientation type\";\n                readonly default: 0;\n            };\n            /** Number of apertures. If greater then one, other parameters of trial should be arrays. */\n            readonly number_of_apertures: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Number of apertures\";\n                readonly default: 1;\n            };\n            /** If this parameter is set, number_of_objects is interpreted as average number_of_objects per density_unit_area (in pixels). */\n            readonly density_unit_area: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Density area\";\n                readonly default: any;\n            };\n            /** Position of midpoint of aperture in x direction in percentage of window width (50 being middle). */\n            readonly aperture_position_left: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Horizontal position of aperature\";\n                readonly default: 50;\n            };\n            /** Position of midpoint of aperture in y direction in percentage of window width (0 being top, 50 being middle, 100 being bot). */\n            readonly aperture_position_top: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Vertical position of aperature\";\n                readonly default: 50;\n            };\n            /** Prompt that is presented above the stimulus. */\n            readonly prompt: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /** Fade the oobs on the edges of the aperture. */\n            readonly fade_out: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Fade out on edges\";\n                readonly default: 0;\n            };\n            /** Pictures of stimuli, can be key-framed(animated) or randomised, see documentation. */\n            readonly stimulus_image: {\n                readonly type: ParameterType.IMAGE;\n                readonly pretty_name: \"Stimuli pictures\";\n                readonly default: any;\n            };\n            /** Background image, can be key-framed(animated) or randomised, see documentation. */\n            readonly background_image: {\n                readonly type: ParameterType.IMAGE;\n                readonly pretty_name: \"Background image\";\n                readonly default: any;\n            };\n            /** Number of keyframes in stimulus images. */\n            readonly stimulus_image_keyframes: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Keyframes of stimulus pictures\";\n                readonly default: 1;\n            };\n            /** Number of keyframes in background pictures. */\n            readonly background_image_keyframes: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Keframse of background pictures\";\n                readonly default: 1;\n            };\n            /** Time between keyframes. */\n            readonly stimulus_keyframe_time: {\n                readonly type: ParameterType.FLOAT;\n                readonly pretty_name: \"Keyframe time\";\n                readonly default: 0.1;\n            };\n            /** Mirror image instead of rotating (1 - x axis, 2 - y axis). */\n            readonly stimulus_mirror: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Mirror image time\";\n                readonly default: 0;\n            };\n            /** Sets experiment to congruency mode: experiment_main_task has to be  set (0 = movement or 1 = orientation) if this is set to 1 or 2. The\" +\n                 \"congruency of the task does only apply to coherent oobs of main task. If this is set to 1 the remaining oobs secondary feature (the non task feature) is set at random.\" +\n                 \"If this is set to 2 the remaining oobs have the same direction and orientation .*/\n            readonly experiment_congruency_mode: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Experiment congruency mode\";\n                readonly default: 0;\n            };\n            /** Sets the main task when experiment is in congruency mode. The congruency of the other task then only\" +\n                 \"applies to non random oobs of main task. */\n            readonly experiment_main_task: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Main task when experiment is set to congruency mode (0- movement, 1-orientation)\";\n                readonly default: 0;\n            };\n            /** Units in which size and speed of oobs is expressed (null - percentage of aperture width, px - pixels). */\n            readonly units: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Units in which size and speed of oobs is expressed\";\n                readonly default: any;\n            };\n            /** Should stimuli be drawn on top of each other or intermixed **/\n            readonly aperture_draw_mode: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"When in overlay draws stimuli of different apertures on top of each other. When in intermixed oobs all show up in one aperture intermixed\";\n                readonly default: \"overlay\";\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n}\nexport default RokPlugin;\n"}}
