{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-keyboard-response-raf\",\n  parameters: {\n    /**\n     * The HTML string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * Any content here will be displayed below the stimulus.\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /**\n     * How long to show the stimulus.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /**\n     * How long to show trial before it ends.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * If true, trial will end when subject makes a response.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * FPS for requestAnimationFrame\n     */\n    fps: {\n      type: ParameterType.INT,\n      pretty_name: \"FPS\",\n      default: 60,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-keyboard-response-raf**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response, using requestAnimationFrame for timing.\n *\n * @author Josh de Leeuw\n */\nclass HtmlKeyboardResponseRafPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  private keyboardListener;\n  private hideStimulusFrameCount: number = Infinity;\n  private endTrialFrameCount: number = Infinity;\n  private stimulusIsHidden = false;\n  private currAnimationFrameHandler: number;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    var frame_counter = 0;\n\n    // draw\n    this.currAnimationFrameHandler = requestAnimationFrame(() => {\n      const initialDisplayTime = performance.now();\n\n      display_element.innerHTML = new_html;\n\n      // start the response listener\n      if (trial.choices != \"NO_KEYS\") {\n        this.keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n\n      // hide stimulus if stimulus_duration is set\n      if (trial.stimulus_duration !== null) {\n        this.hideStimulusFrameCount = Math.round(trial.stimulus_duration / (1000 / trial.fps));\n      }\n\n      // end trial if trial_duration is set\n      if (trial.trial_duration !== null) {\n        this.endTrialFrameCount = Math.round(trial.trial_duration / (1000 / trial.fps));\n      }\n\n      console.log(performance.now());\n      this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n    });\n\n    const checkForEnd = () => {\n      frame_counter++;\n      if (frame_counter >= this.hideStimulusFrameCount && !this.stimulusIsHidden) {\n        this.stimulusIsHidden = true;\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n        console.log(frame_counter, performance.now());\n      }\n      if (frame_counter >= this.endTrialFrameCount) {\n        console.log(frame_counter, performance.now());\n        end_trial();\n      } else {\n        this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n      }\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      cancelAnimationFrame(this.currAnimationFrameHandler);\n\n      // kill keyboard listeners\n      if (typeof this.keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(this.keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    const after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponseRafPlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","choices","KEYS","prompt","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","fps","HtmlKeyboardResponseRafPlugin","jsPsych","_classCallCheck","this","hideStimulusFrameCount","Infinity","endTrialFrameCount","stimulusIsHidden","key","value","display_element","trial","_this","new_html","response","rt","frame_counter","currAnimationFrameHandler","requestAnimationFrame","performance","now","innerHTML","keyboardListener","pluginAPI","getKeyboardResponse","callback_function","after_response","valid_responses","rt_method","persist","allow_held_key","Math","round","console","log","checkForEnd","querySelector","style","visibility","end_trial","cancelAnimationFrame","cancelKeyboardResponse","trial_data","finishTrial","className","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","default_data","randomization","sampleExGaussian","getValidKey","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","pressKey"],"mappings":"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"}