{"version":3,"file":"index.browser.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-keyboard-response-raf\",\n  parameters: {\n    /**\n     * The HTML string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /**\n     * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * Any content here will be displayed below the stimulus.\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /**\n     * How long to show the stimulus.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /**\n     * How long to show trial before it ends.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /**\n     * If true, trial will end when subject makes a response.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * FPS for requestAnimationFrame\n     */\n    fps: {\n      type: ParameterType.INT,\n      pretty_name: \"FPS\",\n      default: 60,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-keyboard-response-raf**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response, using requestAnimationFrame for timing.\n *\n * @author Josh de Leeuw\n */\nclass HtmlKeyboardResponseRafPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  private keyboardListener;\n  private hideStimulusFrameCount: number = Infinity;\n  private endTrialFrameCount: number = Infinity;\n  private stimulusIsHidden = false;\n  private currAnimationFrameHandler: number;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    var frame_counter = 0;\n\n    // draw\n    this.currAnimationFrameHandler = requestAnimationFrame(() => {\n      const initialDisplayTime = performance.now();\n\n      display_element.innerHTML = new_html;\n\n      // start the response listener\n      if (trial.choices != \"NO_KEYS\") {\n        this.keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_response,\n          valid_responses: trial.choices,\n          rt_method: \"performance\",\n          persist: false,\n          allow_held_key: false,\n        });\n      }\n\n      // hide stimulus if stimulus_duration is set\n      if (trial.stimulus_duration !== null) {\n        this.hideStimulusFrameCount = Math.round(trial.stimulus_duration / (1000 / trial.fps));\n      }\n\n      // end trial if trial_duration is set\n      if (trial.trial_duration !== null) {\n        this.endTrialFrameCount = Math.round(trial.trial_duration / (1000 / trial.fps));\n      }\n\n      console.log(performance.now());\n      this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n    });\n\n    const checkForEnd = () => {\n      frame_counter++;\n      if (frame_counter >= this.hideStimulusFrameCount && !this.stimulusIsHidden) {\n        this.stimulusIsHidden = true;\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n        console.log(frame_counter, performance.now());\n      }\n      if (frame_counter >= this.endTrialFrameCount) {\n        console.log(frame_counter, performance.now());\n        end_trial();\n      } else {\n        this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n      }\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      cancelAnimationFrame(this.currAnimationFrameHandler);\n\n      // kill keyboard listeners\n      if (typeof this.keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(this.keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    const after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponseRafPlugin;\n"],"names":["ParameterType"],"mappings":"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"}