{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"html-keyboard-response-raf\",\n    parameters: {\n        /**\n         * The HTML string to be displayed.\n         */\n        stimulus: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /**\n         * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n         */\n        choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Choices\",\n            default: \"ALL_KEYS\",\n        },\n        /**\n         * Any content here will be displayed below the stimulus.\n         */\n        prompt: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /**\n         * How long to show the stimulus.\n         */\n        stimulus_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus duration\",\n            default: null,\n        },\n        /**\n         * How long to show trial before it ends.\n         */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /**\n         * If true, trial will end when subject makes a response.\n         */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /**\n         * FPS for requestAnimationFrame\n         */\n        fps: {\n            type: ParameterType.INT,\n            pretty_name: \"FPS\",\n            default: 60,\n        },\n    },\n};\n/**\n * **html-keyboard-response-raf**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response, using requestAnimationFrame for timing.\n *\n * @author Josh de Leeuw\n */\nclass HtmlKeyboardResponseRafPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n        this.hideStimulusFrameCount = Infinity;\n        this.endTrialFrameCount = Infinity;\n        this.stimulusIsHidden = false;\n    }\n    trial(display_element, trial) {\n        var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n        // add prompt\n        if (trial.prompt !== null) {\n            new_html += trial.prompt;\n        }\n        // store response\n        var response = {\n            rt: null,\n            key: null,\n        };\n        var frame_counter = 0;\n        // draw\n        this.currAnimationFrameHandler = requestAnimationFrame(() => {\n            const initialDisplayTime = performance.now();\n            display_element.innerHTML = new_html;\n            // start the response listener\n            if (trial.choices != \"NO_KEYS\") {\n                this.keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                    callback_function: after_response,\n                    valid_responses: trial.choices,\n                    rt_method: \"performance\",\n                    persist: false,\n                    allow_held_key: false,\n                });\n            }\n            // hide stimulus if stimulus_duration is set\n            if (trial.stimulus_duration !== null) {\n                this.hideStimulusFrameCount = Math.round(trial.stimulus_duration / (1000 / trial.fps));\n            }\n            // end trial if trial_duration is set\n            if (trial.trial_duration !== null) {\n                this.endTrialFrameCount = Math.round(trial.trial_duration / (1000 / trial.fps));\n            }\n            console.log(performance.now());\n            this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n        });\n        const checkForEnd = () => {\n            frame_counter++;\n            if (frame_counter >= this.hideStimulusFrameCount && !this.stimulusIsHidden) {\n                this.stimulusIsHidden = true;\n                display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").style.visibility = \"hidden\";\n                console.log(frame_counter, performance.now());\n            }\n            if (frame_counter >= this.endTrialFrameCount) {\n                console.log(frame_counter, performance.now());\n                end_trial();\n            }\n            else {\n                this.currAnimationFrameHandler = requestAnimationFrame(checkForEnd);\n            }\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            cancelAnimationFrame(this.currAnimationFrameHandler);\n            // kill keyboard listeners\n            if (typeof this.keyboardListener !== \"undefined\") {\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(this.keyboardListener);\n            }\n            // gather the data to store for the trial\n            var trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                response: response.key,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        const after_response = (info) => {\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n                \" responded\";\n            // only record the first response\n            if (response.key == null) {\n                response = info;\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        };\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const default_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n        };\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        this.trial(display_element, trial);\n        load_callback();\n        if (data.rt !== null) {\n            this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n        }\n    }\n}\nHtmlKeyboardResponseRafPlugin.info = info;\nexport default HtmlKeyboardResponseRafPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-html-keyboard-response-raf/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"html-keyboard-response-raf\";\n    readonly parameters: {\n        /**\n         * The HTML string to be displayed.\n         */\n        readonly stimulus: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /**\n         * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n         */\n        readonly choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Choices\";\n            readonly default: \"ALL_KEYS\";\n        };\n        /**\n         * Any content here will be displayed below the stimulus.\n         */\n        readonly prompt: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /**\n         * How long to show the stimulus.\n         */\n        readonly stimulus_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus duration\";\n            readonly default: any;\n        };\n        /**\n         * How long to show trial before it ends.\n         */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /**\n         * If true, trial will end when subject makes a response.\n         */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /**\n         * FPS for requestAnimationFrame\n         */\n        readonly fps: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"FPS\";\n            readonly default: 60;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **html-keyboard-response-raf**\n *\n * jsPsych plugin for displaying a stimulus and getting a keyboard response, using requestAnimationFrame for timing.\n *\n * @author Josh de Leeuw\n */\ndeclare class HtmlKeyboardResponseRafPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"html-keyboard-response-raf\";\n        readonly parameters: {\n            /**\n             * The HTML string to be displayed.\n             */\n            readonly stimulus: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /**\n             * Array containing the key(s) the subject is allowed to press to respond to the stimulus.\n             */\n            readonly choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Choices\";\n                readonly default: \"ALL_KEYS\";\n            };\n            /**\n             * Any content here will be displayed below the stimulus.\n             */\n            readonly prompt: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /**\n             * How long to show the stimulus.\n             */\n            readonly stimulus_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus duration\";\n                readonly default: any;\n            };\n            /**\n             * How long to show trial before it ends.\n             */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /**\n             * If true, trial will end when subject makes a response.\n             */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /**\n             * FPS for requestAnimationFrame\n             */\n            readonly fps: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"FPS\";\n                readonly default: 60;\n            };\n        };\n    };\n    private keyboardListener;\n    private hideStimulusFrameCount;\n    private endTrialFrameCount;\n    private stimulusIsHidden;\n    private currAnimationFrameHandler;\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private create_simulation_data;\n    private simulate_data_only;\n    private simulate_visual;\n}\nexport default HtmlKeyboardResponseRafPlugin;\n"}}
