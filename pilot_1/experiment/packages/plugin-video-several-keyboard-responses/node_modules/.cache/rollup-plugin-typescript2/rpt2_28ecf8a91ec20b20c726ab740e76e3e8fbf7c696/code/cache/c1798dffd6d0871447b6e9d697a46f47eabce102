{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"video-several-keyboard-responses\",\n    parameters: {\n        /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n        stimulus: {\n            type: ParameterType.VIDEO,\n            pretty_name: \"Video\",\n            default: undefined,\n            array: true,\n        },\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Choices\",\n            default: \"ALL_KEYS\",\n        },\n        /** Any content here will be displayed below the stimulus. */\n        prompt: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /** The width of the video in pixels. */\n        width: {\n            type: ParameterType.INT,\n            pretty_name: \"Width\",\n            default: \"\",\n        },\n        /** The height of the video display in pixels. */\n        height: {\n            type: ParameterType.INT,\n            pretty_name: \"Height\",\n            default: \"\",\n        },\n        /** If true, the video will begin playing as soon as it has loaded. */\n        autoplay: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Autoplay\",\n            default: true,\n        },\n        /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n        controls: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Controls\",\n            default: false,\n        },\n        /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n        start: {\n            type: ParameterType.FLOAT,\n            pretty_name: \"Start\",\n            default: null,\n        },\n        /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n        stop: {\n            type: ParameterType.FLOAT,\n            pretty_name: \"Stop\",\n            default: null,\n        },\n        /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n        rate: {\n            type: ParameterType.FLOAT,\n            pretty_name: \"Rate\",\n            default: 1,\n        },\n        /** If true, the trial will end immediately after the video finishes playing. */\n        trial_ends_after_video: {\n            type: ParameterType.BOOL,\n            pretty_name: \"End trial after video finishes\",\n            default: false,\n        },\n        /** How long to show trial before it ends. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** If true, the trial will end when subject makes a response. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n        response_allowed_while_playing: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response allowed while playing\",\n            default: true,\n        },\n        /** If true, multiple responses are recorded. If false, only the first response will be recorded. */\n        multiple_responses_allowed: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Multiple responses allowed\",\n            default: true,\n        },\n    },\n};\n/**\n * **video-several-keyboard-responses**\n *\n * jsPsych plugin for playing a video file and getting several keyboard responses, based on @see {@link https://www.jspsych.org/plugins/jspsych-video-several-keyboard-responses/ video-several-keyboard-responses plugin documentation on jspsych.org}\n *\n * @author marianylund\n * @see {@link https://www.jspsych.org/plugins/jspsych-video-several-keyboard-responses/ video-several-keyboard-responses plugin documentation on jspsych.org}\n */\nclass VideoSeveralKeyboardResponsesPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        // catch mistake where stimuli are not an array\n        if (!Array.isArray(trial.stimulus)) {\n            throw new Error(`\n        The stimulus property for the video-several-keyboard-responses plugin must be an array\n        of files. See https://www.jspsych.org/latest/plugins/video-several-keyboard-responses/#parameters\n      `);\n        }\n        // setup stimulus\n        var video_html = \"<div>\";\n        video_html += '<video id=\"jspsych-video-several-keyboard-responses-stimulus\"';\n        if (trial.width) {\n            video_html += ' width=\"' + trial.width + '\"';\n        }\n        if (trial.height) {\n            video_html += ' height=\"' + trial.height + '\"';\n        }\n        if (trial.autoplay && trial.start == null) {\n            // if autoplay is true and the start time is specified, then the video will start automatically\n            // via the play() method, rather than the autoplay attribute, to prevent showing the first frame\n            video_html += \" autoplay \";\n        }\n        if (trial.controls) {\n            video_html += \" controls \";\n        }\n        if (trial.start !== null) {\n            // hide video element when page loads if the start time is specified,\n            // to prevent the video element from showing the first frame\n            video_html += ' style=\"visibility: hidden;\"';\n        }\n        video_html += \">\";\n        var video_preload_blob = this.jsPsych.pluginAPI.getVideoBuffer(trial.stimulus[0]);\n        if (!video_preload_blob) {\n            for (var i = 0; i < trial.stimulus.length; i++) {\n                var file_name = trial.stimulus[i];\n                if (file_name.indexOf(\"?\") > -1) {\n                    file_name = file_name.substring(0, file_name.indexOf(\"?\"));\n                }\n                var type = file_name.substr(file_name.lastIndexOf(\".\") + 1);\n                type = type.toLowerCase();\n                if (type == \"mov\") {\n                    console.warn(\"Warning: video-several-keyboard-responses plugin does not reliably support .mov files.\");\n                }\n                video_html += '<source src=\"' + file_name + '\" type=\"video/' + type + '\">';\n            }\n        }\n        video_html += \"</video>\";\n        video_html += \"</div>\";\n        // add prompt if there is one\n        if (trial.prompt !== null) {\n            video_html += trial.prompt;\n        }\n        display_element.innerHTML = video_html;\n        var video_element = display_element.querySelector(\"#jspsych-video-several-keyboard-responses-stimulus\");\n        if (video_preload_blob) {\n            video_element.src = video_preload_blob;\n        }\n        video_element.onended = () => {\n            if (trial.trial_ends_after_video) {\n                end_trial();\n            }\n            if (trial.response_allowed_while_playing == false && !trial.trial_ends_after_video) {\n                // start keyboard listener\n                var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                    callback_function: after_response,\n                    valid_responses: trial.choices,\n                    rt_method: \"performance\",\n                    persist: false,\n                    allow_held_key: false,\n                });\n            }\n        };\n        video_element.playbackRate = trial.rate;\n        // if video start time is specified, hide the video and set the starting time\n        // before showing and playing, so that the video doesn't automatically show the first frame\n        if (trial.start !== null) {\n            video_element.pause();\n            video_element.onseeked = () => {\n                video_element.style.visibility = \"visible\";\n                video_element.muted = false;\n                if (trial.autoplay) {\n                    video_element.play();\n                }\n                else {\n                    video_element.pause();\n                }\n                video_element.onseeked = () => { };\n            };\n            video_element.onplaying = () => {\n                video_element.currentTime = trial.start;\n                video_element.onplaying = () => { };\n            };\n            // fix for iOS/MacOS browsers: videos aren't seekable until they start playing, so need to hide/mute, play,\n            // change current time, then show/unmute\n            video_element.muted = true;\n            video_element.play();\n        }\n        let stopped = false;\n        if (trial.stop !== null) {\n            video_element.addEventListener(\"timeupdate\", (e) => {\n                var currenttime = video_element.currentTime;\n                if (currenttime >= trial.stop) {\n                    if (!trial.response_allowed_while_playing) {\n                        var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                            callback_function: after_response,\n                            valid_responses: trial.choices,\n                            rt_method: \"performance\",\n                            persist: false,\n                            allow_held_key: false,\n                        });\n                    }\n                    video_element.pause();\n                    if (trial.trial_ends_after_video && !stopped) {\n                        // this is to prevent end_trial from being called twice, because the timeupdate event\n                        // can fire in quick succession\n                        stopped = true;\n                        end_trial();\n                    }\n                }\n            });\n        }\n        // store response\n        var response = {\n            rt: null,\n            key: null,\n            video_time: null,\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // kill keyboard listeners\n            this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n            // stop the video file if it is playing\n            // remove end event listeners if they exist\n            display_element\n                .querySelector(\"#jspsych-video-several-keyboard-responses-stimulus\")\n                .pause();\n            display_element.querySelector(\"#jspsych-video-several-keyboard-responses-stimulus\").onended = () => { };\n            // gather the data to store for the trial\n            var trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                response: response.key,\n                video_time: response.video_time,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        var after_response = (info) => {\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            display_element.querySelector(\"#jspsych-video-several-keyboard-responses-stimulus\").className += \" responded\";\n            // by default only record the first response\n            if (response.key == null) {\n                if (!trial.multiple_responses_allowed) {\n                    // Would make sense to add it to a list, but then it would not be backwards compatible?\n                    response = { rt: info.rt, key: info.key, video_time: video_element.currentTime };\n                }\n                else {\n                    response = { rt: [info.rt], key: [info.key], video_time: [video_element.currentTime] };\n                }\n            }\n            else if (trial.multiple_responses_allowed) {\n                response.rt.push(info.rt);\n                response.key.push(info.key);\n                response.video_time.push(video_element.currentTime);\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        };\n        // start the response listener\n        if (trial.choices != \"NO_KEYS\" && trial.response_allowed_while_playing) {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: after_response,\n                valid_responses: trial.choices,\n                rt_method: \"performance\",\n                persist: trial.multiple_responses_allowed,\n                allow_held_key: false,\n            });\n        }\n        // end trial if time limit is set\n        if (trial.trial_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n        }\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        this.trial(display_element, trial);\n        load_callback();\n        const video_element = display_element.querySelector(\"#jspsych-video-button-response-stimulus\");\n        const respond = () => {\n            if (data.rt !== null) {\n                this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n            }\n        };\n        if (!trial.response_allowed_while_playing) {\n            video_element.addEventListener(\"ended\", respond);\n        }\n        else {\n            respond();\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const default_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n            video_time: 0,\n        };\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n}\nVideoSeveralKeyboardResponsesPlugin.info = info;\nexport default VideoSeveralKeyboardResponsesPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-video-several-keyboard-responses/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"video-several-keyboard-responses\";\n    readonly parameters: {\n        /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n        readonly stimulus: {\n            readonly type: ParameterType.VIDEO;\n            readonly pretty_name: \"Video\";\n            readonly default: any;\n            readonly array: true;\n        };\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        readonly choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Choices\";\n            readonly default: \"ALL_KEYS\";\n        };\n        /** Any content here will be displayed below the stimulus. */\n        readonly prompt: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /** The width of the video in pixels. */\n        readonly width: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Width\";\n            readonly default: \"\";\n        };\n        /** The height of the video display in pixels. */\n        readonly height: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Height\";\n            readonly default: \"\";\n        };\n        /** If true, the video will begin playing as soon as it has loaded. */\n        readonly autoplay: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Autoplay\";\n            readonly default: true;\n        };\n        /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n        readonly controls: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Controls\";\n            readonly default: false;\n        };\n        /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n        readonly start: {\n            readonly type: ParameterType.FLOAT;\n            readonly pretty_name: \"Start\";\n            readonly default: any;\n        };\n        /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n        readonly stop: {\n            readonly type: ParameterType.FLOAT;\n            readonly pretty_name: \"Stop\";\n            readonly default: any;\n        };\n        /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n        readonly rate: {\n            readonly type: ParameterType.FLOAT;\n            readonly pretty_name: \"Rate\";\n            readonly default: 1;\n        };\n        /** If true, the trial will end immediately after the video finishes playing. */\n        readonly trial_ends_after_video: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"End trial after video finishes\";\n            readonly default: false;\n        };\n        /** How long to show trial before it ends. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** If true, the trial will end when subject makes a response. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n        readonly response_allowed_while_playing: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response allowed while playing\";\n            readonly default: true;\n        };\n        /** If true, multiple responses are recorded. If false, only the first response will be recorded. */\n        readonly multiple_responses_allowed: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Multiple responses allowed\";\n            readonly default: true;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **video-several-keyboard-responses**\n *\n * jsPsych plugin for playing a video file and getting several keyboard responses, based on @see {@link https://www.jspsych.org/plugins/jspsych-video-several-keyboard-responses/ video-several-keyboard-responses plugin documentation on jspsych.org}\n *\n * @author marianylund\n * @see {@link https://www.jspsych.org/plugins/jspsych-video-several-keyboard-responses/ video-several-keyboard-responses plugin documentation on jspsych.org}\n */\ndeclare class VideoSeveralKeyboardResponsesPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"video-several-keyboard-responses\";\n        readonly parameters: {\n            /** Array of the video file(s) to play. Video can be provided in multiple file formats for better cross-browser support. */\n            readonly stimulus: {\n                readonly type: ParameterType.VIDEO;\n                readonly pretty_name: \"Video\";\n                readonly default: any;\n                readonly array: true;\n            };\n            /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n            readonly choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Choices\";\n                readonly default: \"ALL_KEYS\";\n            };\n            /** Any content here will be displayed below the stimulus. */\n            readonly prompt: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /** The width of the video in pixels. */\n            readonly width: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Width\";\n                readonly default: \"\";\n            };\n            /** The height of the video display in pixels. */\n            readonly height: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Height\";\n                readonly default: \"\";\n            };\n            /** If true, the video will begin playing as soon as it has loaded. */\n            readonly autoplay: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Autoplay\";\n                readonly default: true;\n            };\n            /** If true, the subject will be able to pause the video or move the playback to any point in the video. */\n            readonly controls: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Controls\";\n                readonly default: false;\n            };\n            /** Time to start the clip. If null (default), video will start at the beginning of the file. */\n            readonly start: {\n                readonly type: ParameterType.FLOAT;\n                readonly pretty_name: \"Start\";\n                readonly default: any;\n            };\n            /** Time to stop the clip. If null (default), video will stop at the end of the file. */\n            readonly stop: {\n                readonly type: ParameterType.FLOAT;\n                readonly pretty_name: \"Stop\";\n                readonly default: any;\n            };\n            /** The playback rate of the video. 1 is normal, <1 is slower, >1 is faster. */\n            readonly rate: {\n                readonly type: ParameterType.FLOAT;\n                readonly pretty_name: \"Rate\";\n                readonly default: 1;\n            };\n            /** If true, the trial will end immediately after the video finishes playing. */\n            readonly trial_ends_after_video: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"End trial after video finishes\";\n                readonly default: false;\n            };\n            /** How long to show trial before it ends. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** If true, the trial will end when subject makes a response. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /** If true, then responses are allowed while the video is playing. If false, then the video must finish playing before a response is accepted. */\n            readonly response_allowed_while_playing: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response allowed while playing\";\n                readonly default: true;\n            };\n            /** If true, multiple responses are recorded. If false, only the first response will be recorded. */\n            readonly multiple_responses_allowed: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Multiple responses allowed\";\n                readonly default: true;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private simulate_data_only;\n    private simulate_visual;\n    private create_simulation_data;\n}\nexport default VideoSeveralKeyboardResponsesPlugin;\n"}}
