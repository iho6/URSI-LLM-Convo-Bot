{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import interact from \"interactjs\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-swipe-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image height in pixels */\n    stimulus_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Image height\",\n      default: null,\n    },\n    /** Set the image width in pixels */\n    stimulus_width: {\n      type: ParameterType.INT,\n      pretty_name: \"Image width\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: [\"ArrowLeft\", \"ArrowRight\"],\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** How far away from the center should the subject have to swipe for a\n     * left/right response to be recorded. */\n    swipe_threshold: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe translation threshold\",\n      default: 20,\n    },\n    /** The offscreen coordinate for the swipe animation */\n    swipe_offscreen_coordinate: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe offscreen coordinate\",\n      default: 1000,\n    },\n    /** How much should the swipe animation rotate the stimulus */\n    swipe_animation_max_rotation: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation max rotation\",\n      default: 20,\n    },\n    /** How long should the swipe animation last in milliseconds. Set this to\n     * zero to disable the animation. This will not be included in the reaction\n     * time. */\n    swipe_animation_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation duration (ms)\",\n      default: 250,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **image-swipe-response**\n * jsPsych plugin for displaying a stimulus and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-image-swipe-response/ image-swipe-response plugin documentation on jspsych.org}\n */\nclass ImageSwipeResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var height, width;\n    if (trial.render_on_canvas) {\n      var image_drawn = false;\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n      var canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-swipe-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      var ctx = canvas.getContext(\"2d\");\n      var img = new Image();\n      img.onload = () => {\n        // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n        if (!image_drawn) {\n          getHeightWidth(); // only possible to get width/height after image loads\n          ctx.drawImage(img, 0, 0, width, height);\n        }\n      };\n      img.src = trial.stimulus;\n      // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n      const getHeightWidth = () => {\n        if (trial.stimulus_height !== null) {\n          height = trial.stimulus_height;\n          if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (trial.stimulus_width !== null) {\n          width = trial.stimulus_width;\n          if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n          }\n        } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        canvas.height = height;\n        canvas.width = width;\n      };\n      getHeightWidth(); // call now, in case image loads immediately (is cached)\n      // add canvas and draw image\n      display_element.insertBefore(canvas, null);\n      if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n        // if image has loaded and width/height have been set, then draw it now\n        // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n        ctx.drawImage(img, 0, 0, width, height);\n        image_drawn = true;\n      }\n      // add prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.insertAdjacentHTML(\"beforeend\", trial.prompt);\n      }\n    } else {\n      // display stimulus as an image element\n      var html = '<img src=\"' + trial.stimulus + '\" id=\"jspsych-image-swipe-response-stimulus\">';\n      // add prompt\n      if (trial.prompt !== null) {\n        html += trial.prompt;\n      }\n      // update the page content\n      display_element.innerHTML = html;\n\n      // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n      var img = display_element.querySelector(\n        \"#jspsych-image-swipe-response-stimulus\"\n      ) as HTMLImageElement;\n      if (trial.stimulus_height !== null) {\n        height = trial.stimulus_height;\n        if (trial.stimulus_width == null && trial.maintain_aspect_ratio) {\n          width = img.naturalWidth * (trial.stimulus_height / img.naturalHeight);\n        }\n      } else {\n        height = img.naturalHeight;\n      }\n      if (trial.stimulus_width !== null) {\n        width = trial.stimulus_width;\n        if (trial.stimulus_height == null && trial.maintain_aspect_ratio) {\n          height = img.naturalHeight * (trial.stimulus_width / img.naturalWidth);\n        }\n      } else if (!(trial.stimulus_height !== null && trial.maintain_aspect_ratio)) {\n        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n        width = img.naturalWidth;\n      }\n      img.style.height = height.toString() + \"px\";\n      img.style.width = width.toString() + \"px\";\n    }\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      swipe: null,\n      source: null,\n    };\n\n    const stimulus_div = document.getElementById(\"jspsych-image-swipe-response-stimulus\");\n\n    let position = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n    };\n\n    const setPosition = (coordinates) => {\n      const { x = 0, y = 0, rotation = 0 } = coordinates;\n      position = { x, y, rotation };\n      stimulus_div.style.transform = `translate3D(${x}px, ${y}px, 0) rotate(${rotation}deg)`;\n    };\n\n    const resetPosition = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: 0, y: 0, rotation: 0 });\n      stimulus_div.style.transition = null;\n    };\n\n    const dragMoveListener = (event) => {\n      const x = position.x + event.delta.x;\n      const y = position.y + event.delta.y;\n      let rotation = 0;\n      if (position.x > 0) {\n        rotation = Math.min(trial.swipe_animation_max_rotation, position.x / 4);\n      } else {\n        rotation = Math.max(-trial.swipe_animation_max_rotation, position.x / 4);\n      }\n      setPosition({ x: x, y: y, rotation });\n    };\n\n    // start time\n    const start_time = performance.now();\n\n    const sendCardToLeft = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: -trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    const sendCardToRight = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    // after a valid response, the stimulus will have the CSS class 'responded'\n    // which can be used to provide visual feedback that a response was recorded\n    const toggle_css_respond = () => {\n      display_element.querySelector(\"#jspsych-image-swipe-response-stimulus\").className +=\n        \" responded\";\n    };\n\n    // function to handle swipe responses by the subject\n    const after_swipe_response = (left_or_right) => {\n      toggle_css_respond();\n\n      if (left_or_right !== null) {\n        // measure rt\n        const end_time = performance.now();\n        const rt = Math.round(end_time - start_time);\n\n        response = {\n          rt: rt,\n          key: null,\n          swipe: left_or_right,\n          source: \"swipe\",\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    interact(stimulus_div).draggable({\n      inertia: false,\n      autoScroll: true,\n      modifiers: [\n        interact.modifiers.restrictRect({\n          endOnly: true,\n        }),\n      ],\n      listeners: {\n        move: dragMoveListener,\n        end: () => {\n          if (position.x < -trial.swipe_threshold) {\n            sendCardToLeft();\n            after_swipe_response(\"left\");\n          } else if (position.x > trial.swipe_threshold) {\n            sendCardToRight();\n            after_swipe_response(\"right\");\n          } else {\n            resetPosition();\n          }\n        },\n      },\n    });\n\n    // function to handle responses by the subject\n    const after_keyboard_response = (info) => {\n      toggle_css_respond();\n\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          swipe: null,\n          ...info,\n        };\n      }\n\n      if (response.key.toLowerCase() == trial.keyboard_choices[0].toLowerCase()) {\n        sendCardToLeft();\n      } else if (response.key.toLowerCase() == trial.keyboard_choices[1].toLowerCase()) {\n        sendCardToRight();\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    let keyboardListener;\n\n    // start the response listener\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      interact(stimulus_div).unset();\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        keyboard_response: response.key,\n        swipe_response: response.swipe,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-image-swipe-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      swipe_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const swipe_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      swipe_response: Math.random() < 0.5 ? \"left\" : \"right\",\n      keyboard_response: null,\n      response_source: \"swipe\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : swipe_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.swipe_response !== null) {\n        const test_stimulus_div = document.getElementById(\"jspsych-image-swipe-response-stimulus\");\n\n        let pageX = trial.swipe_threshold * 5;\n        if (data.swipe_response === \"left\") {\n          pageX *= -1;\n        }\n\n        setTimeout(() => {\n          interact(test_stimulus_div).fire({\n            type: \"dragstart\",\n            target: test_stimulus_div,\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragmove\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragend\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n        }, data.rt);\n      } else {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      }\n    }\n  }\n}\n\nexport default ImageSwipeResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","IMAGE","pretty_name","default","undefined","stimulus_height","INT","stimulus_width","maintain_aspect_ratio","BOOL","keyboard_choices","KEYS","prompt","HTML_STRING","stimulus_duration","trial_duration","response_ends_trial","swipe_threshold","swipe_offscreen_coordinate","swipe_animation_max_rotation","swipe_animation_duration","render_on_canvas","ImageSwipeResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","height","width","_this","image_drawn","hasChildNodes","firstChild","removeChild","canvas","document","createElement","id","style","margin","padding","ctx","getContext","img","Image","onload","getHeightWidth","drawImage","src","naturalWidth","naturalHeight","insertBefore","complete","Number","isFinite","insertAdjacentHTML","html","innerHTML","querySelector","toString","keyboardListener","response","rt","swipe","source","stimulus_div","getElementById","position","x","y","rotation","setPosition","coordinates","_coordinates$x","_coordinates$y","_coordinates$rotation","transform","concat","start_time","performance","now","sendCardToLeft","__awaiter","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","transition","stop","sendCardToRight","_callee3","_context3","toggle_css_respond","className","after_swipe_response","left_or_right","end_time","Math","round","pluginAPI","setTimeout","end_trial","interact","draggable","inertia","autoScroll","modifiers","restrictRect","endOnly","listeners","move","event","delta","min","max","end","_callee","_context","getKeyboardResponse","callback_function","Object","assign","toLowerCase","valid_responses","rt_method","persist","allow_held_key","clearAllTimeouts","cancelKeyboardResponse","unset","trial_data","keyboard_response","swipe_response","response_source","finishTrial","visibility","console","warn","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","swipe_data","random","default_data","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","test_stimulus_div","pageX","fire","target","pressKey"],"mappings":"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"}