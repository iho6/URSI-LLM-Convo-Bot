{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import interact from \"interactjs\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"audio-swipe-response\",\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: [\"ArrowLeft\", \"ArrowRight\"],\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** If true, then the trial will end as soon as the audio file finishes playing. */\n    trial_ends_after_audio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Trial ends after audio\",\n      default: false,\n    },\n    /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n    response_allowed_while_playing: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response allowed while playing\",\n      default: true,\n    },\n    /** How far away from the center should the subject have to swipe for a\n     * left/right response to be recorded. */\n    swipe_threshold: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe translation threshold\",\n      default: 20,\n    },\n    /** The offscreen coordinate for the swipe animation */\n    swipe_offscreen_coordinate: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe offscreen coordinate\",\n      default: 1000,\n    },\n    /** How much should the swipe animation rotate the stimulus */\n    swipe_animation_max_rotation: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation max rotation\",\n      default: 20,\n    },\n    /** How long should the swipe animation last in milliseconds. Set this to\n     * zero to disable the animation. This will not be included in the reaction\n     * time. */\n    swipe_animation_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation duration (ms)\",\n      default: 250,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **audio-swipe-response**\n * jsPsych plugin for playing an audio file and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-swipe-response/ audio-swipe-response plugin documentation on jspsych.org}\n */\nclass AudioSwipeResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private audio;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void) {\n    // hold the .resolve() function from the Promise that ends the trial\n    let trial_complete;\n\n    // setup stimulus\n    var context = this.jsPsych.pluginAPI.audioContext();\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      swipe: null,\n      source: null,\n    };\n\n    // record webaudio context start time\n    var startTime;\n\n    // load audio file\n    this.jsPsych.pluginAPI\n      .getAudioBuffer(trial.stimulus)\n      .then((buffer) => {\n        if (context !== null) {\n          this.audio = context.createBufferSource();\n          this.audio.buffer = buffer;\n          this.audio.connect(context.destination);\n        } else {\n          this.audio = buffer;\n          this.audio.currentTime = 0;\n        }\n        setupTrial();\n      })\n      .catch((err) => {\n        console.error(\n          `Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`\n        );\n        console.error(err);\n      });\n\n    const setupTrial = () => {\n      // set up end event if trial needs it\n      if (trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", end_trial);\n      }\n\n      // show prompt if there is one\n      if (trial.prompt !== null) {\n        display_element.innerHTML = trial.prompt;\n      }\n\n      // start audio\n      if (context !== null) {\n        startTime = context.currentTime;\n        this.audio.start(startTime);\n      } else {\n        this.audio.play();\n      }\n\n      // start keyboard listener when trial starts or sound ends\n      if (trial.response_allowed_while_playing) {\n        setup_keyboard_listener();\n        setup_swipe_listener();\n      } else if (!trial.trial_ends_after_audio) {\n        this.audio.addEventListener(\"ended\", setup_keyboard_listener);\n        this.audio.addEventListener(\"ended\", setup_swipe_listener);\n      }\n\n      // end trial if time limit is set\n      if (trial.trial_duration !== null) {\n        this.jsPsych.pluginAPI.setTimeout(() => {\n          end_trial();\n        }, trial.trial_duration);\n      }\n\n      on_load();\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // stop the audio file if it is playing\n      // remove end event listeners if they exist\n      if (context !== null) {\n        this.audio.stop();\n      } else {\n        this.audio.pause();\n      }\n\n      this.audio.removeEventListener(\"ended\", end_trial);\n      this.audio.removeEventListener(\"ended\", setup_keyboard_listener);\n\n      // kill keyboard listeners\n      this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n\n      // kill the swipe interaction\n      interact(display_element).unset();\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        keyboard_response: response.key,\n        swipe_response: response.swipe,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n      resetPosition();\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n\n      trial_complete();\n    };\n\n    let position = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n    };\n\n    const setPosition = (coordinates) => {\n      const { x = 0, y = 0, rotation = 0 } = coordinates;\n      position = { x, y, rotation };\n      display_element.style.transform = `translate3D(${x}px, ${y}px, 0) rotate(${rotation}deg)`;\n    };\n\n    const resetPosition = async () => {\n      display_element.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: 0, y: 0, rotation: 0 });\n      display_element.style.transition = null;\n    };\n\n    const dragMoveListener = (event) => {\n      const x = position.x + event.delta.x;\n      const y = position.y + event.delta.y;\n      let rotation = 0;\n      if (position.x > 0) {\n        rotation = Math.min(trial.swipe_animation_max_rotation, position.x / 4);\n      } else {\n        rotation = Math.max(-trial.swipe_animation_max_rotation, position.x / 4);\n      }\n      setPosition({ x: x, y: y, rotation });\n    };\n\n    // start time\n    const start_time = performance.now();\n\n    const sendCardToLeft = async () => {\n      display_element.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: -trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    const sendCardToRight = async () => {\n      display_element.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    // function to handle swipe responses by the subject\n    const after_swipe_response = (left_or_right) => {\n      if (left_or_right !== null) {\n        // measure rt\n        const end_time = performance.now();\n        const rt = Math.round(end_time - start_time);\n\n        response = {\n          rt: rt,\n          key: null,\n          swipe: left_or_right,\n          source: \"swipe\",\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    const setup_swipe_listener = () => {\n      interact(display_element).draggable({\n        inertia: false,\n        autoScroll: true,\n        modifiers: [\n          interact.modifiers.restrictRect({\n            endOnly: true,\n          }),\n        ],\n        listeners: {\n          move: dragMoveListener,\n          end: () => {\n            if (position.x < -trial.swipe_threshold) {\n              sendCardToLeft();\n              after_swipe_response(\"left\");\n            } else if (position.x > trial.swipe_threshold) {\n              sendCardToRight();\n              after_swipe_response(\"right\");\n            } else {\n              resetPosition();\n            }\n          },\n        },\n      });\n    };\n\n    // function to handle keyboard responses by the subject\n    const after_keyboard_response = (info) => {\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          swipe: null,\n          ...info,\n        };\n      }\n\n      if (response.key.toLowerCase() == trial.keyboard_choices[0].toLowerCase()) {\n        sendCardToLeft();\n      } else if (response.key.toLowerCase() == trial.keyboard_choices[1].toLowerCase()) {\n        sendCardToRight();\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    const setup_keyboard_listener = () => {\n      // start the keyboard response listener\n      if (trial.keyboard_choices != \"NO_KEYS\") {\n        let responseArgs;\n\n        if (context !== null) {\n          responseArgs = {\n            rt_method: \"audio\",\n            audio_context: context,\n            audio_context_start_time: startTime,\n          };\n        } else {\n          responseArgs = {\n            rt_method: \"performance\",\n          };\n        }\n\n        this.jsPsych.pluginAPI.getKeyboardResponse({\n          callback_function: after_keyboard_response,\n          valid_responses: trial.keyboard_choices,\n          persist: false,\n          allow_held_key: false,\n          ...responseArgs,\n        });\n      }\n    };\n\n    return new Promise((resolve) => {\n      trial_complete = resolve;\n    });\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      swipe_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const swipe_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      swipe_response: Math.random() < 0.5 ? \"left\" : \"right\",\n      keyboard_response: null,\n      response_source: \"swipe\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : swipe_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    const respond = () => {\n      if (data.rt !== null) {\n        if (data.swipe_response !== null) {\n          const test_stimulus_div = document.getElementById(\n            \"jspsych-audio-swipe-response-stimulus\"\n          );\n\n          let pageX = trial.swipe_threshold * 5;\n          if (data.swipe_response === \"left\") {\n            pageX *= -1;\n          }\n\n          setTimeout(() => {\n            interact(test_stimulus_div).fire({\n              type: \"dragstart\",\n              target: test_stimulus_div,\n            });\n\n            interact(test_stimulus_div).fire({\n              type: \"dragmove\",\n              target: test_stimulus_div,\n              delta: { x: pageX, y: 0 },\n            });\n\n            interact(test_stimulus_div).fire({\n              type: \"dragend\",\n              target: test_stimulus_div,\n              delta: { x: pageX, y: 0 },\n            });\n          }, data.rt);\n        } else {\n          this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n        }\n      }\n    };\n\n    this.trial(display_element, trial, () => {\n      load_callback();\n      if (!trial.response_allowed_while_playing) {\n        this.audio.addEventListener(\"ended\", respond);\n      } else {\n        respond();\n      }\n    });\n  }\n}\n\nexport default AudioSwipeResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","keyboard_choices","KEYS","prompt","trial_duration","INT","response_ends_trial","BOOL","trial_ends_after_audio","response_allowed_while_playing","swipe_threshold","swipe_offscreen_coordinate","swipe_animation_max_rotation","swipe_animation_duration","AudioSwipeResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","on_load","trial_complete","startTime","_this","context","pluginAPI","audioContext","response","rt","swipe","source","getAudioBuffer","then","buffer","audio","createBufferSource","connect","destination","currentTime","setupTrial","err","console","error","concat","addEventListener","end_trial","innerHTML","start","play","setup_keyboard_listener","setup_swipe_listener","setTimeout","clearAllTimeouts","stop","pause","removeEventListener","cancelAllKeyboardResponses","interact","unset","trial_data","keyboard_response","swipe_response","response_source","resetPosition","finishTrial","position","x","y","rotation","setPosition","coordinates","_coordinates$x","_coordinates$y","_coordinates$rotation","style","transform","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","transition","dragMoveListener","event","delta","Math","min","max","start_time","performance","now","sendCardToLeft","_callee2","_context2","sendCardToRight","_callee3","_context3","after_swipe_response","left_or_right","end_time","round","draggable","inertia","autoScroll","modifiers","restrictRect","endOnly","listeners","move","end","after_keyboard_response","Object","assign","toLowerCase","responseArgs","rt_method","audio_context","audio_context_start_time","getKeyboardResponse","callback_function","valid_responses","persist","allow_held_key","Promise","resolve","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","swipe_data","random","default_data","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","_this2","getDisplayElement","respond","test_stimulus_div","document","getElementById","pageX","fire","target","pressKey"],"mappings":"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"}