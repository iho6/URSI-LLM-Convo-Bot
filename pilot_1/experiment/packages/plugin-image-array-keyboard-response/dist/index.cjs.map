{"version":3,"file":"index.cjs","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-array-keyboard-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image rectangle in pixels */\n    stimulus_rect: {\n      type: ParameterType.INT,\n      pretty_name: \"Image rectangle\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **image-array-keyboard-response**\n *\n * jsPsych plugin for displaying an image array and getting a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://github.com/jspsych/jspsych-contrib/blob/main/packages/plugin-image-array-keyboard-response/README.md image-array-keyboard-response plugin documentation on github.com}\n */\nclass ImageArrayKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let height, width;\n    if (trial.render_on_canvas) {\n      let image_drawn = [];\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n\n      let canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-keyboard-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      canvas.width = document.body.clientWidth;\n      canvas.height = document.body.clientHeight;\n      let ctx = canvas.getContext(\"2d\");\n      for (let i = 0; i < trial.stimulus.length; i++) {\n        const x = trial.stimulus_rect[i][0];\n        const y = trial.stimulus_rect[i][1];\n        let img = new Image();\n        img.onload = () => {\n          // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n          if (image_drawn.length < i || !image_drawn[i]) {\n            getHeightWidth(); // only possible to get width/height after image loads\n            ctx.drawImage(img, x, y, width, height);\n          }\n        };\n        img.src = trial.stimulus[i];\n        // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n        const getHeightWidth = () => {\n          const stimulus_height = trial.stimulus_rect[i][3];\n          const stimulus_width = trial.stimulus_rect[i][2];\n\n          if (stimulus_height !== null) {\n            height = stimulus_height;\n            if (stimulus_width == null && trial.maintain_aspect_ratio) {\n              width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n            }\n          } else {\n            height = img.naturalHeight;\n          }\n          if (stimulus_width !== null) {\n            width = stimulus_width;\n            if (stimulus_height == null && trial.maintain_aspect_ratio) {\n              height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n            }\n          } else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n            // if stimulus width is null, only use the image's natural width if the width value wasn't set\n            // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n            width = img.naturalWidth;\n          }\n          //canvas.height = height;\n          //canvas.width = width;\n        };\n        getHeightWidth(); // call now, in case image loads immediately (is cached)\n        // add canvas and draw image\n        display_element.insertBefore(canvas, null);\n        if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n          // if image has loaded and width/height have been set, then draw it now\n          // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n          ctx.drawImage(img, x, y, width, height);\n          image_drawn[i] = true;\n        }\n      }\n    } else {\n      for (let i = 0; i < trial.stimulus.length; i++) {\n        let stimulus_height = trial.stimulus_rect[i][3];\n        let stimulus_width = trial.stimulus_rect[i][2];\n        let x = trial.stimulus_rect[i][0];\n        let y = trial.stimulus_rect[i][1];\n\n        // display stimulus as an image element\n        display_element.innerHTML +=\n          '<img src=\"' +\n          trial.stimulus[i] +\n          '\" id=\"jspsych-image-keyboard-response-stimulus-' +\n          i.toString() +\n          '\">';\n        // add prompt\n        // update the page content\n\n        // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n        let img = display_element.querySelector(\n          \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n        ) as HTMLImageElement;\n        if (stimulus_height !== null) {\n          height = stimulus_height;\n          if (stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (stimulus_width !== null) {\n          width = stimulus_width;\n          if (stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n          }\n        } else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        img.style.height = height.toString() + \"px\";\n        img.style.width = width.toString() + \"px\";\n        img.style.left = x.toString() + \"px\";\n        img.style.top = y.toString() + \"px\";\n        img.style.position = \"absolute\";\n      }\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      for (let i; i < trial.stimulus.length; i++) {\n        display_element.querySelector(\n          \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n        ).className += \" responded\";\n      }\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        for (let i; i < trial.stimulus.length; i++) {\n          display_element.querySelector<HTMLElement>(\n            \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n          ).style.visibility = \"hidden\";\n        }\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default ImageArrayKeyboardResponsePlugin;\n"],"names":["ParameterType"],"mappings":"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"}