{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"image-array-keyboard-response\",\n  parameters: {\n    /** The image to be displayed */\n    stimulus: {\n      type: ParameterType.IMAGE,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Set the image rectangle in pixels */\n    stimulus_rect: {\n      type: ParameterType.INT,\n      pretty_name: \"Image rectangle\",\n      default: null,\n    },\n    /** Maintain the aspect ratio after setting width or height */\n    maintain_aspect_ratio: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Maintain aspect ratio\",\n      default: true,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Choices\",\n      default: \"ALL_KEYS\",\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /**\n     * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n     * If false, the image will be shown via an img element.\n     */\n    render_on_canvas: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Render on canvas\",\n      default: true,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **image-array-keyboard-response**\n *\n * jsPsych plugin for displaying an image array and getting a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://github.com/jspsych/jspsych-contrib/blob/main/packages/plugin-image-array-keyboard-response/README.md image-array-keyboard-response plugin documentation on github.com}\n */\nclass ImageArrayKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    let height, width;\n    if (trial.render_on_canvas) {\n      let image_drawn = [];\n      // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n      if (display_element.hasChildNodes()) {\n        // can't loop through child list because the list will be modified by .removeChild()\n        while (display_element.firstChild) {\n          display_element.removeChild(display_element.firstChild);\n        }\n      }\n      // create canvas element and image\n\n      let canvas = document.createElement(\"canvas\");\n      canvas.id = \"jspsych-image-keyboard-response-stimulus\";\n      canvas.style.margin = \"0\";\n      canvas.style.padding = \"0\";\n      canvas.width = document.body.clientWidth;\n      canvas.height = document.body.clientHeight;\n      let ctx = canvas.getContext(\"2d\");\n      for (let i = 0; i < trial.stimulus.length; i++) {\n        const x = trial.stimulus_rect[i][0];\n        const y = trial.stimulus_rect[i][1];\n        let img = new Image();\n        img.onload = () => {\n          // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n          if (image_drawn.length < i || !image_drawn[i]) {\n            getHeightWidth(); // only possible to get width/height after image loads\n            ctx.drawImage(img, x, y, width, height);\n          }\n        };\n        img.src = trial.stimulus[i];\n        // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n        const getHeightWidth = () => {\n          const stimulus_height = trial.stimulus_rect[i][3];\n          const stimulus_width = trial.stimulus_rect[i][2];\n\n          if (stimulus_height !== null) {\n            height = stimulus_height;\n            if (stimulus_width == null && trial.maintain_aspect_ratio) {\n              width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n            }\n          } else {\n            height = img.naturalHeight;\n          }\n          if (stimulus_width !== null) {\n            width = stimulus_width;\n            if (stimulus_height == null && trial.maintain_aspect_ratio) {\n              height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n            }\n          } else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n            // if stimulus width is null, only use the image's natural width if the width value wasn't set\n            // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n            width = img.naturalWidth;\n          }\n          //canvas.height = height;\n          //canvas.width = width;\n        };\n        getHeightWidth(); // call now, in case image loads immediately (is cached)\n        // add canvas and draw image\n        display_element.insertBefore(canvas, null);\n        if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n          // if image has loaded and width/height have been set, then draw it now\n          // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n          ctx.drawImage(img, x, y, width, height);\n          image_drawn[i] = true;\n        }\n      }\n    } else {\n      for (let i = 0; i < trial.stimulus.length; i++) {\n        let stimulus_height = trial.stimulus_rect[i][3];\n        let stimulus_width = trial.stimulus_rect[i][2];\n        let x = trial.stimulus_rect[i][0];\n        let y = trial.stimulus_rect[i][1];\n\n        // display stimulus as an image element\n        display_element.innerHTML +=\n          '<img src=\"' +\n          trial.stimulus[i] +\n          '\" id=\"jspsych-image-keyboard-response-stimulus-' +\n          i.toString() +\n          '\">';\n        // add prompt\n        // update the page content\n\n        // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n        let img = display_element.querySelector(\n          \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n        ) as HTMLImageElement;\n        if (stimulus_height !== null) {\n          height = stimulus_height;\n          if (stimulus_width == null && trial.maintain_aspect_ratio) {\n            width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n          }\n        } else {\n          height = img.naturalHeight;\n        }\n        if (stimulus_width !== null) {\n          width = stimulus_width;\n          if (stimulus_height == null && trial.maintain_aspect_ratio) {\n            height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n          }\n        } else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n          // if stimulus width is null, only use the image's natural width if the width value wasn't set\n          // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n          width = img.naturalWidth;\n        }\n        img.style.height = height.toString() + \"px\";\n        img.style.width = width.toString() + \"px\";\n        img.style.left = x.toString() + \"px\";\n        img.style.top = y.toString() + \"px\";\n        img.style.position = \"absolute\";\n      }\n    }\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      for (let i; i < trial.stimulus.length; i++) {\n        display_element.querySelector(\n          \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n        ).className += \" responded\";\n      }\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        for (let i; i < trial.stimulus.length; i++) {\n          display_element.querySelector<HTMLElement>(\n            \"#jspsych-image-keyboard-response-stimulus-\" + i.toString()\n          ).style.visibility = \"hidden\";\n        }\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        end_trial();\n      }, trial.trial_duration);\n    } else if (trial.response_ends_trial === false) {\n      console.warn(\n        \"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\"\n      );\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n}\n\nexport default ImageArrayKeyboardResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","IMAGE","pretty_name","default","undefined","stimulus_rect","INT","maintain_aspect_ratio","BOOL","choices","KEYS","stimulus_duration","trial_duration","response_ends_trial","render_on_canvas","ImageArrayKeyboardResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","height","width","_this","image_drawn","hasChildNodes","firstChild","removeChild","canvas","document","createElement","id","style","margin","padding","body","clientWidth","clientHeight","ctx","getContext","_loop","i","x","y","img","Image","onload","length","getHeightWidth","drawImage","src","stimulus_height","stimulus_width","naturalWidth","naturalHeight","insertBefore","complete","Number","isFinite","innerHTML","toString","querySelector","left","top","position","response","rt","end_trial","pluginAPI","clearAllTimeouts","keyboardListener","cancelKeyboardResponse","trial_data","finishTrial","getKeyboardResponse","callback_function","className","valid_responses","rt_method","persist","allow_held_key","setTimeout","visibility","console","warn","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","data","create_simulation_data","getDisplayElement","pressKey","default_data","randomization","sampleExGaussian","getValidKey","mergeSimulationData","ensureSimulationDataConsistency"],"mappings":"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"}