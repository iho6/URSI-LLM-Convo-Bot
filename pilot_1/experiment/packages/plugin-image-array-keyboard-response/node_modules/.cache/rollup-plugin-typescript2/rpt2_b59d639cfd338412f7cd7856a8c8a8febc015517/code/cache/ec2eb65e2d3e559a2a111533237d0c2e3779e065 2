{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"image-array-keyboard-response\",\n    parameters: {\n        /** The image to be displayed */\n        stimulus: {\n            type: ParameterType.IMAGE,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /** Set the image rectangle in pixels */\n        stimulus_rect: {\n            type: ParameterType.INT,\n            pretty_name: \"Image rectangle\",\n            default: null,\n        },\n        /** Maintain the aspect ratio after setting width or height */\n        maintain_aspect_ratio: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Maintain aspect ratio\",\n            default: true,\n        },\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Choices\",\n            default: \"ALL_KEYS\",\n        },\n        /** How long to show the stimulus. */\n        stimulus_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus duration\",\n            default: null,\n        },\n        /** How long to show trial before it ends */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** If true, trial will end when subject makes a response. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /**\n         * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n         * If false, the image will be shown via an img element.\n         */\n        render_on_canvas: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Render on canvas\",\n            default: true,\n        },\n    },\n};\n/**\n * **image-array-keyboard-response**\n *\n * jsPsych plugin for displaying an image array and getting a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://github.com/jspsych/jspsych-contrib/blob/main/packages/plugin-image-array-keyboard-response/README.md image-array-keyboard-response plugin documentation on github.com}\n */\nclass ImageArrayKeyboardResponsePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        let height, width;\n        if (trial.render_on_canvas) {\n            let image_drawn = [];\n            // first clear the display element (because the render_on_canvas method appends to display_element instead of overwriting it with .innerHTML)\n            if (display_element.hasChildNodes()) {\n                // can't loop through child list because the list will be modified by .removeChild()\n                while (display_element.firstChild) {\n                    display_element.removeChild(display_element.firstChild);\n                }\n            }\n            // create canvas element and image\n            let canvas = document.createElement(\"canvas\");\n            canvas.id = \"jspsych-image-keyboard-response-stimulus\";\n            canvas.style.margin = \"0\";\n            canvas.style.padding = \"0\";\n            canvas.width = document.body.clientWidth;\n            canvas.height = document.body.clientHeight;\n            let ctx = canvas.getContext(\"2d\");\n            for (let i = 0; i < trial.stimulus.length; i++) {\n                const x = trial.stimulus_rect[i][0];\n                const y = trial.stimulus_rect[i][1];\n                let img = new Image();\n                img.onload = () => {\n                    // if image wasn't preloaded, then it will need to be drawn whenever it finishes loading\n                    if (image_drawn.length < i || !image_drawn[i]) {\n                        getHeightWidth(); // only possible to get width/height after image loads\n                        ctx.drawImage(img, x, y, width, height);\n                    }\n                };\n                img.src = trial.stimulus[i];\n                // get/set image height and width - this can only be done after image loads because uses image's naturalWidth/naturalHeight properties\n                const getHeightWidth = () => {\n                    const stimulus_height = trial.stimulus_rect[i][3];\n                    const stimulus_width = trial.stimulus_rect[i][2];\n                    if (stimulus_height !== null) {\n                        height = stimulus_height;\n                        if (stimulus_width == null && trial.maintain_aspect_ratio) {\n                            width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n                        }\n                    }\n                    else {\n                        height = img.naturalHeight;\n                    }\n                    if (stimulus_width !== null) {\n                        width = stimulus_width;\n                        if (stimulus_height == null && trial.maintain_aspect_ratio) {\n                            height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n                        }\n                    }\n                    else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n                        // if stimulus width is null, only use the image's natural width if the width value wasn't set\n                        // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n                        width = img.naturalWidth;\n                    }\n                    //canvas.height = height;\n                    //canvas.width = width;\n                };\n                getHeightWidth(); // call now, in case image loads immediately (is cached)\n                // add canvas and draw image\n                display_element.insertBefore(canvas, null);\n                if (img.complete && Number.isFinite(width) && Number.isFinite(height)) {\n                    // if image has loaded and width/height have been set, then draw it now\n                    // (don't rely on img onload function to draw image when image is in the cache, because that causes a delay in the image presentation)\n                    ctx.drawImage(img, x, y, width, height);\n                    image_drawn[i] = true;\n                }\n            }\n        }\n        else {\n            for (let i = 0; i < trial.stimulus.length; i++) {\n                let stimulus_height = trial.stimulus_rect[i][3];\n                let stimulus_width = trial.stimulus_rect[i][2];\n                let x = trial.stimulus_rect[i][0];\n                let y = trial.stimulus_rect[i][1];\n                // display stimulus as an image element\n                display_element.innerHTML +=\n                    '<img src=\"' +\n                        trial.stimulus[i] +\n                        '\" id=\"jspsych-image-keyboard-response-stimulus-' +\n                        i.toString() +\n                        '\">';\n                // add prompt\n                // update the page content\n                // set image dimensions after image has loaded (so that we have access to naturalHeight/naturalWidth)\n                let img = display_element.querySelector(\"#jspsych-image-keyboard-response-stimulus-\" + i.toString());\n                if (stimulus_height !== null) {\n                    height = stimulus_height;\n                    if (stimulus_width == null && trial.maintain_aspect_ratio) {\n                        width = img.naturalWidth * (stimulus_height / img.naturalHeight);\n                    }\n                }\n                else {\n                    height = img.naturalHeight;\n                }\n                if (stimulus_width !== null) {\n                    width = stimulus_width;\n                    if (stimulus_height == null && trial.maintain_aspect_ratio) {\n                        height = img.naturalHeight * (stimulus_width / img.naturalWidth);\n                    }\n                }\n                else if (!(stimulus_height !== null && trial.maintain_aspect_ratio)) {\n                    // if stimulus width is null, only use the image's natural width if the width value wasn't set\n                    // in the if statement above, based on a specified height and maintain_aspect_ratio = true\n                    width = img.naturalWidth;\n                }\n                img.style.height = height.toString() + \"px\";\n                img.style.width = width.toString() + \"px\";\n                img.style.left = x.toString() + \"px\";\n                img.style.top = y.toString() + \"px\";\n                img.style.position = \"absolute\";\n            }\n        }\n        // store response\n        var response = {\n            rt: null,\n            key: null,\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // kill keyboard listeners\n            if (typeof keyboardListener !== \"undefined\") {\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            }\n            // gather the data to store for the trial\n            var trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                response: response.key,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        var after_response = (info) => {\n            // after a valid response, the stimulus will have the CSS class 'responded'\n            // which can be used to provide visual feedback that a response was recorded\n            for (let i; i < trial.stimulus.length; i++) {\n                display_element.querySelector(\"#jspsych-image-keyboard-response-stimulus-\" + i.toString()).className += \" responded\";\n            }\n            // only record the first response\n            if (response.key == null) {\n                response = info;\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        };\n        // start the response listener\n        if (trial.choices != \"NO_KEYS\") {\n            var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: after_response,\n                valid_responses: trial.choices,\n                rt_method: \"performance\",\n                persist: false,\n                allow_held_key: false,\n            });\n        }\n        // hide stimulus if stimulus_duration is set\n        if (trial.stimulus_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(() => {\n                for (let i; i < trial.stimulus.length; i++) {\n                    display_element.querySelector(\"#jspsych-image-keyboard-response-stimulus-\" + i.toString()).style.visibility = \"hidden\";\n                }\n            }, trial.stimulus_duration);\n        }\n        // end trial if trial_duration is set\n        if (trial.trial_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(() => {\n                end_trial();\n            }, trial.trial_duration);\n        }\n        else if (trial.response_ends_trial === false) {\n            console.warn(\"The experiment may be deadlocked. Try setting a trial duration or set response_ends_trial to true.\");\n        }\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        this.trial(display_element, trial);\n        load_callback();\n        if (data.rt !== null) {\n            this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const default_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n        };\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n}\nImageArrayKeyboardResponsePlugin.info = info;\nexport default ImageArrayKeyboardResponsePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-image-array-keyboard-response/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"image-array-keyboard-response\";\n    readonly parameters: {\n        /** The image to be displayed */\n        readonly stimulus: {\n            readonly type: ParameterType.IMAGE;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /** Set the image rectangle in pixels */\n        readonly stimulus_rect: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Image rectangle\";\n            readonly default: any;\n        };\n        /** Maintain the aspect ratio after setting width or height */\n        readonly maintain_aspect_ratio: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Maintain aspect ratio\";\n            readonly default: true;\n        };\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        readonly choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Choices\";\n            readonly default: \"ALL_KEYS\";\n        };\n        /** How long to show the stimulus. */\n        readonly stimulus_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus duration\";\n            readonly default: any;\n        };\n        /** How long to show trial before it ends */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** If true, trial will end when subject makes a response. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /**\n         * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n         * If false, the image will be shown via an img element.\n         */\n        readonly render_on_canvas: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Render on canvas\";\n            readonly default: true;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **image-array-keyboard-response**\n *\n * jsPsych plugin for displaying an image array and getting a keyboard response\n *\n * @author Younes Strittmatter\n * @see {@link https://github.com/jspsych/jspsych-contrib/blob/main/packages/plugin-image-array-keyboard-response/README.md image-array-keyboard-response plugin documentation on github.com}\n */\ndeclare class ImageArrayKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"image-array-keyboard-response\";\n        readonly parameters: {\n            /** The image to be displayed */\n            readonly stimulus: {\n                readonly type: ParameterType.IMAGE;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /** Set the image rectangle in pixels */\n            readonly stimulus_rect: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Image rectangle\";\n                readonly default: any;\n            };\n            /** Maintain the aspect ratio after setting width or height */\n            readonly maintain_aspect_ratio: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Maintain aspect ratio\";\n                readonly default: true;\n            };\n            /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n            readonly choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Choices\";\n                readonly default: \"ALL_KEYS\";\n            };\n            /** How long to show the stimulus. */\n            readonly stimulus_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus duration\";\n                readonly default: any;\n            };\n            /** How long to show trial before it ends */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** If true, trial will end when subject makes a response. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /**\n             * If true, the image will be drawn onto a canvas element (prevents blank screen between consecutive images in some browsers).\n             * If false, the image will be shown via an img element.\n             */\n            readonly render_on_canvas: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Render on canvas\";\n                readonly default: true;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private simulate_data_only;\n    private simulate_visual;\n    private create_simulation_data;\n}\nexport default ImageArrayKeyboardResponsePlugin;\n"}}
