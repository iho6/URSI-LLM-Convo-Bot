{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"corsi-blocks\",\n    parameters: {\n        /**\n         * An array of block indexes that specify the order of the sequence to be displayed. For example,\n         * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\n         */\n        sequence: {\n            type: ParameterType.INT,\n            default: undefined,\n            array: true,\n        },\n        /**\n         * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\n         * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\n         * {x: 50, y: 50} would place the block in the center of the display.\n         *\n         * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\n         */\n        blocks: {\n            type: ParameterType.COMPLEX,\n            array: true,\n            default: [\n                { y: 80, x: 45 },\n                { y: 94, x: 80 },\n                { y: 70, x: 20 },\n                { y: 60, x: 70 },\n                { y: 50, x: 35 },\n                { y: 40, x: 6 },\n                { y: 45, x: 94 },\n                { y: 25, x: 60 },\n                { y: 6, x: 47 },\n            ],\n            nested: {\n                x: {\n                    type: ParameterType.INT,\n                    default: undefined,\n                },\n                y: {\n                    type: ParameterType.INT,\n                    default: undefined,\n                },\n            },\n        },\n        /**\n         * The size of the blocks as a percentage of the overall display size.\n         */\n        block_size: {\n            type: ParameterType.INT,\n            default: 12,\n        },\n        /**\n         * The width of the display, specified as a valid CSS measurement.\n         */\n        display_width: {\n            type: ParameterType.STRING,\n            default: \"400px\",\n        },\n        /**\n         * The height of the display, specified as a valid CSS measurement.\n         */\n        display_height: {\n            type: ParameterType.STRING,\n            default: \"400px\",\n        },\n        /**\n         * An optional text prompt that can be shown below the display area.\n         */\n        prompt: {\n            type: ParameterType.STRING,\n            default: null,\n        },\n        /**\n         * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\n         * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\n         */\n        mode: {\n            type: ParameterType.STRING,\n            default: \"display\",\n            options: [\"display\", \"input\"],\n        },\n        /**\n         * The duration, in milliseconds, between each block in the sequence.\n         */\n        sequence_gap_duration: {\n            type: ParameterType.INT,\n            default: 250,\n        },\n        /**\n         * The duration, in milliseconds, that each block is displayed during the sequence.\n         */\n        sequence_block_duration: {\n            type: ParameterType.INT,\n            default: 1000,\n        },\n        /**\n         * The duration, in milliseconds, to show the blocks before the sequence begins.\n         */\n        pre_stim_duration: {\n            type: ParameterType.INT,\n            default: 500,\n        },\n        /**\n         * The duration, in milliseconds, to show the feedback response animation\n         * during input mode.\n         */\n        response_animation_duration: {\n            type: ParameterType.INT,\n            default: 500,\n        },\n        /**\n         * The color of unselected, unhighlighted blocks.\n         */\n        block_color: {\n            type: ParameterType.STRING,\n            default: \"#555\",\n        },\n        /**\n         * The color of the highlighted block.\n         */\n        highlight_color: {\n            type: ParameterType.STRING,\n            default: \"#ff0000\",\n        },\n        /**\n         * The color of correct feedback.\n         */\n        correct_color: {\n            type: ParameterType.STRING,\n            default: \"#00ff00\",\n        },\n        /**\n         * The color of incorrect feedback.\n         */\n        incorrect_color: {\n            type: ParameterType.STRING,\n            default: \"#ff0000\",\n        },\n    },\n};\n/**\n * **corsi-blocks**\n *\n * This plugin displays a sequence of blocks and then gets the\n * subject's response. The sequence can be displayed in either\n * 'display' mode or 'input' mode. In 'display' mode, the\n * sequence is displayed and the trial ends after the sequence\n * is complete. In 'input' mode, the subject must click on the\n * blocks in the correct order.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass CorsiBlocksPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        let css = `<style id=\"jspsych-corsi-css\">\n      #jspsych-corsi-stimulus { \n        position: relative; \n        width:${trial.display_width}; \n        height:${trial.display_height};\n      }\n      .jspsych-corsi-block { \n        background-color: ${trial.block_color}; \n        position: absolute; \n        width: ${trial.block_size}%; \n        height: ${trial.block_size}%;\n        transform: translate(-50%, -50%);\n      }\n      #jspsych-corsi-prompt { \n        position: absolute; \n        text-align: center; \n        width: ${trial.display_width}; \n        top: 100%; \n      }\n      #jspsych-corsi-prompt p { \n        font-size: 18px; \n      }\n      ${trial.mode == \"input\" ? \".jspsych-corsi-block { cursor: pointer; }\" : \"\"}\n    </style>`;\n        let html = css;\n        html += '<div id=\"jspsych-corsi-stimulus\">';\n        for (let i = 0; i < trial.blocks.length; i++) {\n            html += `<div class=\"jspsych-corsi-block\" data-id=\"${i}\" style=\"top:${trial.blocks[i].y}%; left:${trial.blocks[i].x}%;\"></div>`;\n        }\n        if (trial.prompt != null) {\n            html += `<div id=\"jspsych-corsi-prompt\"><p>${trial.prompt}</p></div>`;\n        }\n        html += \"</div>\";\n        display_element.innerHTML = html;\n        const start_time = performance.now();\n        const trial_data = {\n            sequence: trial.sequence,\n            response: [],\n            rt: [],\n            blocks: trial.blocks,\n            correct: null,\n        };\n        const end_trial = () => {\n            display_element.innerHTML = \"\";\n            this.jsPsych.finishTrial(trial_data);\n        };\n        const wait = function (fn, t) {\n            const start = performance.now();\n            const _wait_help = (fn, t, s) => {\n                const duration = performance.now() - s;\n                if (duration >= t) {\n                    fn();\n                }\n                else {\n                    window.requestAnimationFrame(() => _wait_help(fn, t, start));\n                }\n            };\n            window.requestAnimationFrame(() => _wait_help(fn, t, start));\n        };\n        if (trial.mode == \"display\") {\n            let sequence_location = 0;\n            let display_phase = \"pre-stim\";\n            const update_display = () => {\n                if (display_phase == \"pre-stim\") {\n                    wait(update_display, trial.pre_stim_duration);\n                    display_phase = \"sequence\";\n                }\n                else if (display_phase == \"sequence\") {\n                    const block = display_element.querySelector(`.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`);\n                    if (sequence_location < trial.sequence.length) {\n                        block.style.backgroundColor = trial.highlight_color;\n                        wait(update_display, trial.sequence_block_duration);\n                        display_phase = \"iti\";\n                    }\n                    if (sequence_location == trial.sequence.length) {\n                        end_trial();\n                    }\n                }\n                else if (display_phase == \"iti\") {\n                    const block = display_element.querySelector(`.jspsych-corsi-block[data-id=\"${trial.sequence[sequence_location]}\"]`);\n                    block.style.backgroundColor = trial.block_color;\n                    sequence_location++;\n                    wait(update_display, trial.sequence_gap_duration);\n                    display_phase = \"sequence\";\n                }\n            };\n            window.requestAnimationFrame(update_display);\n        }\n        if (trial.mode == \"input\") {\n            const correct_animation = [\n                { backgroundColor: trial.block_color },\n                { backgroundColor: trial.correct_color, offset: 0.2 },\n                { backgroundColor: trial.block_color },\n            ];\n            const incorrect_animation = [\n                { backgroundColor: trial.block_color },\n                { backgroundColor: trial.incorrect_color, offset: 0.2 },\n                { backgroundColor: trial.block_color },\n            ];\n            const animation_timing = {\n                duration: trial.response_animation_duration,\n                iterations: 1,\n            };\n            const register_click = (id) => {\n                if (trial_data.correct !== null) {\n                    return; // extra click during timeout, do nothing\n                }\n                const rt = Math.round(performance.now() - start_time);\n                trial_data.response.push(parseInt(id));\n                trial_data.rt.push(rt);\n                const correct = parseInt(id) == trial.sequence[trial_data.response.length - 1];\n                if (correct) {\n                    display_element\n                        .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n                        .animate(correct_animation, animation_timing);\n                    if (trial_data.response.length == trial.sequence.length) {\n                        trial_data.correct = true;\n                        setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n                    }\n                }\n                else {\n                    display_element\n                        .querySelector(`.jspsych-corsi-block[data-id=\"${id}\"]`)\n                        .animate(incorrect_animation, animation_timing);\n                    trial_data.correct = false;\n                    setTimeout(end_trial, trial.response_animation_duration); // allows animation to finish\n                }\n            };\n            var blocks = display_element.querySelectorAll(\".jspsych-corsi-block\");\n            for (var i = 0; i < blocks.length; i++) {\n                blocks[i].addEventListener(\"click\", (e) => {\n                    register_click(e.target.getAttribute(\"data-id\"));\n                });\n            }\n        }\n    }\n}\nCorsiBlocksPlugin.info = info;\nexport default CorsiBlocksPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-corsi-blocks/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"corsi-blocks\";\n    readonly parameters: {\n        /**\n         * An array of block indexes that specify the order of the sequence to be displayed. For example,\n         * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\n         */\n        readonly sequence: {\n            readonly type: ParameterType.INT;\n            readonly default: any;\n            readonly array: true;\n        };\n        /**\n         * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\n         * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\n         * {x: 50, y: 50} would place the block in the center of the display.\n         *\n         * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\n         */\n        readonly blocks: {\n            readonly type: ParameterType.COMPLEX;\n            readonly array: true;\n            readonly default: readonly [{\n                readonly y: 80;\n                readonly x: 45;\n            }, {\n                readonly y: 94;\n                readonly x: 80;\n            }, {\n                readonly y: 70;\n                readonly x: 20;\n            }, {\n                readonly y: 60;\n                readonly x: 70;\n            }, {\n                readonly y: 50;\n                readonly x: 35;\n            }, {\n                readonly y: 40;\n                readonly x: 6;\n            }, {\n                readonly y: 45;\n                readonly x: 94;\n            }, {\n                readonly y: 25;\n                readonly x: 60;\n            }, {\n                readonly y: 6;\n                readonly x: 47;\n            }];\n            readonly nested: {\n                readonly x: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n                readonly y: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n        /**\n         * The size of the blocks as a percentage of the overall display size.\n         */\n        readonly block_size: {\n            readonly type: ParameterType.INT;\n            readonly default: 12;\n        };\n        /**\n         * The width of the display, specified as a valid CSS measurement.\n         */\n        readonly display_width: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"400px\";\n        };\n        /**\n         * The height of the display, specified as a valid CSS measurement.\n         */\n        readonly display_height: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"400px\";\n        };\n        /**\n         * An optional text prompt that can be shown below the display area.\n         */\n        readonly prompt: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        /**\n         * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\n         * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\n         */\n        readonly mode: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"display\";\n            readonly options: readonly [\"display\", \"input\"];\n        };\n        /**\n         * The duration, in milliseconds, between each block in the sequence.\n         */\n        readonly sequence_gap_duration: {\n            readonly type: ParameterType.INT;\n            readonly default: 250;\n        };\n        /**\n         * The duration, in milliseconds, that each block is displayed during the sequence.\n         */\n        readonly sequence_block_duration: {\n            readonly type: ParameterType.INT;\n            readonly default: 1000;\n        };\n        /**\n         * The duration, in milliseconds, to show the blocks before the sequence begins.\n         */\n        readonly pre_stim_duration: {\n            readonly type: ParameterType.INT;\n            readonly default: 500;\n        };\n        /**\n         * The duration, in milliseconds, to show the feedback response animation\n         * during input mode.\n         */\n        readonly response_animation_duration: {\n            readonly type: ParameterType.INT;\n            readonly default: 500;\n        };\n        /**\n         * The color of unselected, unhighlighted blocks.\n         */\n        readonly block_color: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"#555\";\n        };\n        /**\n         * The color of the highlighted block.\n         */\n        readonly highlight_color: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"#ff0000\";\n        };\n        /**\n         * The color of correct feedback.\n         */\n        readonly correct_color: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"#00ff00\";\n        };\n        /**\n         * The color of incorrect feedback.\n         */\n        readonly incorrect_color: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"#ff0000\";\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **corsi-blocks**\n *\n * This plugin displays a sequence of blocks and then gets the\n * subject's response. The sequence can be displayed in either\n * 'display' mode or 'input' mode. In 'display' mode, the\n * sequence is displayed and the trial ends after the sequence\n * is complete. In 'input' mode, the subject must click on the\n * blocks in the correct order.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\ndeclare class CorsiBlocksPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"corsi-blocks\";\n        readonly parameters: {\n            /**\n             * An array of block indexes that specify the order of the sequence to be displayed. For example,\n             * [0, 1, 2, 3, 4] would display the first 5 blocks in the order they appear in the blocks parameter.\n             */\n            readonly sequence: {\n                readonly type: ParameterType.INT;\n                readonly default: any;\n                readonly array: true;\n            };\n            /**\n             * An array of objects that specify the x and y coordinates of each block. The coordinates represent the center\n             * of the block. The coordinates are specified as percentages of the width and height of the display. For example,\n             * {x: 50, y: 50} would place the block in the center of the display.\n             *\n             * The default value is an array of nine blocks that approximates the layout of the original Corsi blocks task.\n             */\n            readonly blocks: {\n                readonly type: ParameterType.COMPLEX;\n                readonly array: true;\n                readonly default: readonly [{\n                    readonly y: 80;\n                    readonly x: 45;\n                }, {\n                    readonly y: 94;\n                    readonly x: 80;\n                }, {\n                    readonly y: 70;\n                    readonly x: 20;\n                }, {\n                    readonly y: 60;\n                    readonly x: 70;\n                }, {\n                    readonly y: 50;\n                    readonly x: 35;\n                }, {\n                    readonly y: 40;\n                    readonly x: 6;\n                }, {\n                    readonly y: 45;\n                    readonly x: 94;\n                }, {\n                    readonly y: 25;\n                    readonly x: 60;\n                }, {\n                    readonly y: 6;\n                    readonly x: 47;\n                }];\n                readonly nested: {\n                    readonly x: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                    readonly y: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n            /**\n             * The size of the blocks as a percentage of the overall display size.\n             */\n            readonly block_size: {\n                readonly type: ParameterType.INT;\n                readonly default: 12;\n            };\n            /**\n             * The width of the display, specified as a valid CSS measurement.\n             */\n            readonly display_width: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"400px\";\n            };\n            /**\n             * The height of the display, specified as a valid CSS measurement.\n             */\n            readonly display_height: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"400px\";\n            };\n            /**\n             * An optional text prompt that can be shown below the display area.\n             */\n            readonly prompt: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            /**\n             * The mode of the trial. If 'display', then the sequence is displayed and the trial ends after\n             * the sequence is complete. If 'input', then the use must click on the blocks in the correct order.\n             */\n            readonly mode: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"display\";\n                readonly options: readonly [\"display\", \"input\"];\n            };\n            /**\n             * The duration, in milliseconds, between each block in the sequence.\n             */\n            readonly sequence_gap_duration: {\n                readonly type: ParameterType.INT;\n                readonly default: 250;\n            };\n            /**\n             * The duration, in milliseconds, that each block is displayed during the sequence.\n             */\n            readonly sequence_block_duration: {\n                readonly type: ParameterType.INT;\n                readonly default: 1000;\n            };\n            /**\n             * The duration, in milliseconds, to show the blocks before the sequence begins.\n             */\n            readonly pre_stim_duration: {\n                readonly type: ParameterType.INT;\n                readonly default: 500;\n            };\n            /**\n             * The duration, in milliseconds, to show the feedback response animation\n             * during input mode.\n             */\n            readonly response_animation_duration: {\n                readonly type: ParameterType.INT;\n                readonly default: 500;\n            };\n            /**\n             * The color of unselected, unhighlighted blocks.\n             */\n            readonly block_color: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"#555\";\n            };\n            /**\n             * The color of the highlighted block.\n             */\n            readonly highlight_color: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"#ff0000\";\n            };\n            /**\n             * The color of correct feedback.\n             */\n            readonly correct_color: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"#00ff00\";\n            };\n            /**\n             * The color of incorrect feedback.\n             */\n            readonly incorrect_color: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"#ff0000\";\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n}\nexport default CorsiBlocksPlugin;\n"}}
