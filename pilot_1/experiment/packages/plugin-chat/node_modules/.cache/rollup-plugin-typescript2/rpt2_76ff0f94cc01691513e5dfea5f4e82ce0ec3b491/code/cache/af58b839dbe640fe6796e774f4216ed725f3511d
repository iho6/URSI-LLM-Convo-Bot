{"code":"import { __awaiter } from \"tslib\";\nimport { ParameterType } from \"jspsych\";\nimport { ChatCompletionStream } from \"openai/lib/ChatCompletionStream\";\nimport { ChatLog } from \"./ChatLog\";\nconst info = {\n    name: \"chat\",\n    parameters: {\n        // BOOL, STRING, INT, FLOAT, FUNCTION, KEY, KEYS, SELECT, HTML_STRING, IMAGE, AUDIO, VIDEO, OBJECT, COMPLEX\n        ai_prompt: {\n            type: ParameterType.STRING,\n            default: undefined,\n        },\n        ai_model: {\n            type: ParameterType.STRING,\n            default: \"gpt-4o\",\n        },\n        chat_field_placeholder: {\n            type: ParameterType.STRING,\n            default: \"Type your message here...\",\n        },\n        // bot_name: {\n        //   type: ParameterType.STRING,\n        //   default: undefined,\n        // },\n        continue_button: {\n            type: ParameterType.COMPLEX,\n            default: { message_trigger: 0 },\n            nested: {\n                timer_trigger: {\n                    type: ParameterType.INT,\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                },\n                message: {\n                    type: ParameterType.STRING,\n                },\n            },\n        },\n        additional_prompts: {\n            type: ParameterType.COMPLEX,\n            array: true,\n            default: undefined,\n            nested: {\n                message: {\n                    // messages to display on screen\n                    type: ParameterType.STRING,\n                    default: \"\",\n                },\n                prompt: {\n                    // prompting to pass in\n                    type: ParameterType.STRING,\n                    default: null,\n                },\n                role: {\n                    // \"prompt\" (\"system-prompt\"), \"chatbot-message\",\"chatbot-prompt\"\n                    type: ParameterType.STRING,\n                    default: \"system-prompt\",\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n                timer_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n            },\n        },\n        // when triggers it doesn't stop, do we want to give it a stop?\n        prompt_chain: {\n            type: ParameterType.COMPLEX,\n            default: [],\n            nested: {\n                prompts: {\n                    type: ParameterType.STRING,\n                    array: true,\n                    default: [],\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                    default: 99999999999999999999999, // silencing error message\n                },\n                timer_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n            },\n        },\n        selection_prompt: {\n            type: ParameterType.COMPLEX,\n            default: {},\n            nested: {\n                prompts: {\n                    type: ParameterType.STRING,\n                    array: true,\n                    default: [],\n                },\n                selection_prompt: {\n                    type: ParameterType.STRING,\n                    default: \"Select one of these prompts:\",\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                    default: 99999999999999999999999, // silencing error message\n                },\n                timer_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n            },\n        },\n    },\n};\n/**\n * **chat**\n *\n * Chat interface for running experiments using LLMs\n *\n * @author Victor Zhang and Niranjan Baskaran\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-chat/README.md}}\n */\nclass ChatPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        this.initializeTrialVariables(trial);\n        // var botTitle = trial.bot_name\n        //   ? `<div class=\"bot-title\">\n        //   <h1 class=\"bot-title-text\">` +\n        //     trial.bot_name +\n        //     `</h1>\n        // </div>`\n        //   : \"\";\n        var html = `<div class=\"chat-page\">` +\n            // botTitle +\n            `<div class=\"chat-container\">\n        <div class=\"chat-box\" id=\"chat-box\"></div>\n\n        <div class=\"chat-fields\"> \n          <textarea type=\"text\" id=\"user-input\" placeholder=\"` +\n            trial.chat_field_placeholder +\n            `\"></textarea>\n          <button id=\"send-btn\">Send</button>\n          <button id=\"continue-btn\" style=\"display: none;\">Continue</button>\n        </div>\n      </div>\n    </div>`;\n        display_element.innerHTML = html;\n        document.body.style.backgroundColor = \"#9c9ad05c\";\n        const chatBox = display_element.querySelector(\"#chat-box\");\n        const userInput = display_element.querySelector(\"#user-input\");\n        const sendButton = display_element.querySelector(\"#send-btn\");\n        const continueButton = display_element.querySelector(\"#continue-btn\");\n        var keyPressLog = [];\n        // Setting up Trial Logic\n        // Function to handle logic of sending user message, and data collection\n        const sendMessage = () => __awaiter(this, void 0, void 0, function* () {\n            const message = userInput.value.trim();\n            this.addMessage(\"user\", message, chatBox, (keyPressLog = keyPressLog));\n            keyPressLog = [];\n            userInput.value = \"\";\n            // prompt chaining or simple requests\n            if (message !== \"\" && this.selection_prompt && this.checkCondition(\"selection_prompt\"))\n                yield this.selectionPrompt(message, chatBox);\n            else if (message !== \"\" && this.prompt_chain && this.checkCondition(\"prompt_chain\")) {\n                yield this.chainPrompts(message, chatBox);\n            }\n            else if (message !== \"\") {\n                yield this.updateAndProcessGPT(chatBox);\n            }\n            chatBox.scrollTop = chatBox.scrollHeight;\n            // inc messages and check researcher prompts\n            this.messages_sent += 1;\n            this.checkResearcherPrompts(chatBox, continueButton);\n        });\n        // Event listener for send button click\n        sendButton.addEventListener(\"click\", function (event) {\n            if (userInput.value.trim() != \"\") {\n                sendMessage();\n            }\n        });\n        // Event listener for Enter key press\n        userInput.addEventListener(\"keydown\", function (event) {\n            if (event.key === \"Enter\") {\n                if (!event.shiftKey) {\n                    event.preventDefault(); // Prevent default behavior of adding new line\n                    sendMessage();\n                }\n            }\n        });\n        // Event listener for all keypresses on userInput\n        userInput.addEventListener(\"keydown\", function (event) {\n            keyPressLog.push(event.key);\n        });\n        continueButton.addEventListener(\"click\", () => {\n            this.jsPsych.finishTrial({\n                logs: this.chatLog.getChatLogs(),\n            });\n        });\n        // Setting up Trial\n        this.checkResearcherPrompts(chatBox, continueButton);\n    }\n    // includes error checking to minimize error checking later\n    initializeTrialVariables(trial) {\n        this.timer_start = performance.now();\n        this.chatLog = new ChatLog();\n        this.messages_sent = 0;\n        this.ai_model = trial.ai_model;\n        // this.chatLog.updateConversationLog(trial.ai_prompt, \"system\");\n        this.chatLog.setPrompt(trial.ai_prompt); // sets researcher prompts and removes any that can't trigger\n        this.researcher_prompts = trial.additional_prompts\n            ? trial.additional_prompts.filter((researcher_prompt) => {\n                if (researcher_prompt[\"message_trigger\"] === null &&\n                    researcher_prompt[\"timer_trigger\"] === null) {\n                    console.error(\"Missing required property in researcher prompt:\", researcher_prompt);\n                    return false;\n                }\n                return true;\n            })\n            : [];\n        // sets continue button and removes any that can't trigger\n        const continue_button = trial.continue_button;\n        if (continue_button[\"message_trigger\"] === null && continue_button[\"timer_trigger\"] === null) {\n            console.error(\"Missing required trigger property in continue prompt, will never display\");\n        }\n        else {\n            continue_button[\"role\"] = \"continue\";\n            this.researcher_prompts.push(continue_button);\n        }\n        // sets prompt chain and removes any that can't trigger\n        if (trial.prompt_chain &&\n            trial.prompt_chain[\"message_trigger\"] === null &&\n            trial.prompt_chain[\"timer_trigger\"] === null) {\n            console.error(\"Missing required trigger property in prompt_chain, will never trigger\");\n        }\n        else {\n            this.prompt_chain = trial.prompt_chain;\n        }\n        if (trial.selection_prompt &&\n            trial.selection_prompt[\"message_trigger\"] === null &&\n            trial.selection_prompt[\"timer_trigger\"] === null) {\n            console.error(\"Missing required trigger property in selection_prompt, will never trigger\");\n        }\n        else {\n            this.selection_prompt = trial.selection_prompt;\n        }\n    }\n    // Call to backend, newMessage is the document item to print (optional because when chaining don't want them to display)\n    fetchGPT(messages, chatBox, newMessage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                var response;\n                if (window.location.href.includes(\"127.0.0.1\")) {\n                    // local chat vs hosting\n                    response = yield fetch(\"http://localhost:3000/api/chat\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({ messages, ai_model: this.ai_model }), // Corrected JSON structure\n                    });\n                }\n                else {\n                    response = yield fetch(\"/api/chat\", {\n                        method: \"POST\",\n                        headers: {\n                            \"Content-Type\": \"application/json\",\n                        },\n                        body: JSON.stringify({ messages, ai_model: this.ai_model }), // Corrected JSON structure\n                    });\n                }\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const runner = ChatCompletionStream.fromReadableStream(response.body);\n                if (newMessage) {\n                    // prints to screen if specified, otherwise only fetch\n                    runner.on(\"content\", (delta, snapshot) => {\n                        newMessage.innerHTML += delta.replace(/\\n/g, \"<br>\");\n                        chatBox.scrollTop = chatBox.scrollHeight;\n                    });\n                }\n                yield runner.finalChatCompletion(); // waits before returning the actual content\n                return runner[\"messages\"][0][\"content\"];\n            }\n            catch (error) {\n                console.error(\"Error fetching GPT data:\", error);\n                throw error; // Rethrow the error after logging it\n            }\n        });\n    }\n    // Handles updates to system with the prompt and to the screen\n    addMessage(role, message, chatBox, keyPressLog) {\n        const newMessage = document.createElement(\"div\");\n        // Handles logic of updating prompts and error checking\n        switch (role) {\n            case \"chatbot\": // writing to screen handled caller function\n                this.chatLog.updateConversationLog(message, \"assistant\");\n                return;\n            case \"user\":\n                this.chatLog.updateConversationLog(message, \"user\", keyPressLog);\n                break;\n            case \"chatbot-message\": // set by researcher, needs be seperate case because doesn't update prompts\n                role = \"chatbot\";\n                this.chatLog.logMessage(message, role);\n                break;\n            case \"system-prompt\": // set by researcher\n                this.chatLog.logMessage(message, role);\n                break;\n            case \"chatbot-prompt\": // logging already handled by \"cleanSystem\"\n                role = \"system-prompt\";\n                break;\n            default:\n                console.error(\"Incorrect role\");\n                return;\n        }\n        newMessage.className = role + \"-message\";\n        newMessage.innerHTML = \"\";\n        chatBox.appendChild(newMessage);\n        newMessage.innerHTML = message.replace(/\\n/g, \"<br>\");\n        chatBox.scrollTop = chatBox.scrollHeight;\n    }\n    // updates and processes to the screen, workflow for one message (can be used in the process of workflow for mulitple messages)\n    updateAndProcessGPT(chatBox, prompt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const newMessage = document.createElement(\"div\");\n            newMessage.className = \"chatbot\" + \"-message\";\n            newMessage.innerHTML = \"\";\n            chatBox.appendChild(newMessage);\n            try {\n                var response = undefined;\n                if (prompt) {\n                    // allows to pass in non defined prompts\n                    response = yield this.fetchGPT(prompt, chatBox, newMessage);\n                    console.log(prompt);\n                }\n                else {\n                    // special case when wanting to prompt with own thing\n                    response = yield this.fetchGPT(this.chatLog.getPrompt(), chatBox, newMessage);\n                    console.log(this.chatLog.getPrompt());\n                }\n                chatBox.scrollTop = chatBox.scrollHeight;\n                this.addMessage(\"chatbot\", response, chatBox); // saves to prompt\n                return response;\n            }\n            catch (error) {\n                newMessage.innerHTML = \"error fetching bot response\";\n                return \"error fetching response\";\n            }\n        });\n    }\n    // logic for triggering logic\n    checkResearcherPrompts(chatBox, continueButton) {\n        this.researcher_prompts = this.researcher_prompts.filter((researcher_prompt) => {\n            const message_trigger = researcher_prompt[\"message_trigger\"];\n            const timer_trigger = researcher_prompt[\"timer_trigger\"];\n            const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n            if ((message_trigger !== null && this.messages_sent >= message_trigger) ||\n                (timer_trigger !== null && time_elapsed >= timer_trigger)) {\n                // Checking with prompt to trigger\n                switch (researcher_prompt[\"role\"]) {\n                    case \"chatbot-message\": // case is needed because of chatbot updating prompt\n                    case \"system-prompt\": // want these cases to have the same functionality\n                        this.addMessage(researcher_prompt[\"role\"], researcher_prompt[\"message\"], chatBox);\n                        break;\n                    case \"chatbot-prompt\": // checks messages, updates prompt and prints sytem message if exists\n                        const prompt = researcher_prompt[\"prompt\"];\n                        const message = researcher_prompt[\"message\"];\n                        if (prompt !== null && typeof prompt === \"string\") {\n                            this.chatLog.cleanSystem(prompt, message);\n                        }\n                        else\n                            console.error(researcher_prompt, \"is missing prompt field or it isn't in the correct format\");\n                        if (message !== null && typeof prompt === \"string\" && message !== \"\") {\n                            this.addMessage(researcher_prompt[\"role\"], message, chatBox);\n                        }\n                        break;\n                    case \"continue\": // displays continue button, error checking that pipelining is working\n                        if (!continueButton) {\n                            console.error(\"No continue button to display\");\n                            return false;\n                        }\n                        continueButton.style.display = \"block\";\n                        // implement check here\n                        this.addMessage(\"system-prompt\", researcher_prompt[\"message\"], chatBox);\n                        break;\n                    default:\n                        console.error(\"Incorrect role for prompting\");\n                }\n                return false; // Remove this item from the array\n            }\n            return true; // Keep this item in the array\n        });\n    }\n    // checking whether chain prompts can trigger\n    checkCondition(name) {\n        const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n        const message_trigger = this[name][\"message_trigger\"];\n        const timer_trigger = this[name][\"timer_trigger\"];\n        if ((message_trigger !== null && this.messages_sent >= message_trigger) ||\n            (timer_trigger !== null && time_elapsed >= timer_trigger))\n            return true;\n        else\n            return false;\n    }\n    // triggering prompts in chain and prompting/logging logic\n    chainPrompts(message, chatBox) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleaned_prompt = this.chatLog.cleanConversation();\n            const logChain = [];\n            for (let i = 0; i < this.prompt_chain[\"prompts\"].length; i++) {\n                const chain_prompt_system = this.prompt_chain[\"prompts\"][i];\n                const temp_prompt = [\n                    ...cleaned_prompt,\n                    {\n                        role: \"system\",\n                        content: chain_prompt_system,\n                    },\n                    {\n                        role: \"user\",\n                        content: message,\n                    },\n                ];\n                logChain.push({\n                    role: `chain-system-${i}`,\n                    content: chain_prompt_system,\n                }, {\n                    role: `link-response-${i}`,\n                    content: message,\n                });\n                if (i === this.prompt_chain[\"prompts\"].length - 1) {\n                    message = yield this.updateAndProcessGPT(chatBox, temp_prompt);\n                    logChain.push({ role: \"assistant\", content: message });\n                }\n                else {\n                    message = yield this.fetchGPT(temp_prompt, chatBox); // Ensure to await if fetchGPT is asynchronous\n                }\n            }\n            this.chatLog.logMessage(logChain, \"chain-prompt\");\n        });\n    }\n    selectionPrompt(message, chatBox) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleaned_prompt = this.chatLog.cleanConversation(); // maybe be able to refactor and cleanSystem()\n            var bot_responses = \"\";\n            for (var i = 0; i < this.selection_prompt[\"prompts\"].length; i++) {\n                const input_prompt = this.selection_prompt[\"prompts\"][i];\n                const combined_prompt = [\n                    ...cleaned_prompt,\n                    { role: \"system\", content: input_prompt },\n                    { role: \"user\", content: message },\n                ];\n                console.log(\"individual_prompt:\", combined_prompt);\n                const response = yield this.fetchGPT(combined_prompt, chatBox);\n                bot_responses = bot_responses + \"(\" + i + \") \" + response + \"\\n\\n\";\n            }\n            const system_user = this.selection_prompt[\"selection_prompt\"] +\n                \"Task: You should select one of the three possible responses that would best achieve your goal with the intention of outputting it to the user\" +\n                \"What you should output: You should output the choice that you have selected, but without any indication that this was a numbered choice. Do not tell the user that you selected a certain response. The user should not know that there were choices.\" +\n                \" User message: `\" +\n                message +\n                \"`\";\n            this.chatLog.logMessage([\n                { role: \"prompt-selection\", content: system_user },\n                { role: \"content-choices/chatbot-answers\", content: bot_responses },\n            ], \"selection_prompt\");\n            const prompt_select = [\n                ...cleaned_prompt,\n                { role: \"system\", content: system_user },\n                { role: \"user\", content: bot_responses },\n            ];\n            const response_message = yield this.updateAndProcessGPT(chatBox, prompt_select);\n        });\n    }\n}\nChatPlugin.info = info;\nexport default ChatPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts","/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/openai/lib/ChatCompletionStream.d.ts","/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-chat/src/ChatLog.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-chat/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"chat\";\n    readonly parameters: {\n        readonly ai_prompt: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        readonly ai_model: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"gpt-4o\";\n        };\n        readonly chat_field_placeholder: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"Type your message here...\";\n        };\n        readonly continue_button: {\n            readonly type: ParameterType.COMPLEX;\n            readonly default: {\n                readonly message_trigger: 0;\n            };\n            readonly nested: {\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                };\n                readonly message: {\n                    readonly type: ParameterType.STRING;\n                };\n            };\n        };\n        readonly additional_prompts: {\n            readonly type: ParameterType.COMPLEX;\n            readonly array: true;\n            readonly default: any;\n            readonly nested: {\n                readonly message: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: \"\";\n                };\n                readonly prompt: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: any;\n                };\n                readonly role: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: \"system-prompt\";\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n        readonly prompt_chain: {\n            readonly type: ParameterType.COMPLEX;\n            readonly default: readonly [];\n            readonly nested: {\n                readonly prompts: {\n                    readonly type: ParameterType.STRING;\n                    readonly array: true;\n                    readonly default: readonly [];\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: 1e+23;\n                };\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n        readonly selection_prompt: {\n            readonly type: ParameterType.COMPLEX;\n            readonly default: {};\n            readonly nested: {\n                readonly prompts: {\n                    readonly type: ParameterType.STRING;\n                    readonly array: true;\n                    readonly default: readonly [];\n                };\n                readonly selection_prompt: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: \"Select one of these prompts:\";\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: 1e+23;\n                };\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **chat**\n *\n * Chat interface for running experiments using LLMs\n *\n * @author Victor Zhang and Niranjan Baskaran\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-chat/README.md}}\n */\ndeclare class ChatPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"chat\";\n        readonly parameters: {\n            readonly ai_prompt: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            readonly ai_model: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"gpt-4o\";\n            };\n            readonly chat_field_placeholder: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"Type your message here...\";\n            };\n            readonly continue_button: {\n                readonly type: ParameterType.COMPLEX;\n                readonly default: {\n                    readonly message_trigger: 0;\n                };\n                readonly nested: {\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                    };\n                    readonly message: {\n                        readonly type: ParameterType.STRING;\n                    };\n                };\n            };\n            readonly additional_prompts: {\n                readonly type: ParameterType.COMPLEX;\n                readonly array: true;\n                readonly default: any;\n                readonly nested: {\n                    readonly message: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: \"\";\n                    };\n                    readonly prompt: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: any;\n                    };\n                    readonly role: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: \"system-prompt\";\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n            readonly prompt_chain: {\n                readonly type: ParameterType.COMPLEX;\n                readonly default: readonly [];\n                readonly nested: {\n                    readonly prompts: {\n                        readonly type: ParameterType.STRING;\n                        readonly array: true;\n                        readonly default: readonly [];\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: 1e+23;\n                    };\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n            readonly selection_prompt: {\n                readonly type: ParameterType.COMPLEX;\n                readonly default: {};\n                readonly nested: {\n                    readonly prompts: {\n                        readonly type: ParameterType.STRING;\n                        readonly array: true;\n                        readonly default: readonly [];\n                    };\n                    readonly selection_prompt: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: \"Select one of these prompts:\";\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: 1e+23;\n                    };\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n        };\n    };\n    private researcher_prompts;\n    private prompt_chain;\n    private selection_prompt;\n    private messages_sent;\n    private timer_start;\n    private ai_model;\n    private chatLog;\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    initializeTrialVariables(trial: TrialType<Info>): void;\n    fetchGPT(messages: any, chatBox: any, newMessage?: any): Promise<string | import(\"openai/resources\").ChatCompletionContentPart[]>;\n    addMessage(role: any, message: any, chatBox: any, keyPressLog?: any): void;\n    updateAndProcessGPT(chatBox: any, prompt?: any): Promise<any>;\n    checkResearcherPrompts(chatBox: any, continueButton: any): void;\n    private checkCondition;\n    private chainPrompts;\n    private selectionPrompt;\n}\nexport default ChatPlugin;\n"}}
