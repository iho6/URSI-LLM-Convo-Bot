{"code":"import { __awaiter } from \"tslib\";\nimport { ParameterType } from \"jspsych\";\nimport { ChatCompletionStream } from \"openai/lib/ChatCompletionStream\";\n// CHANGES FOR IAN\n// system-prompt instead of prompt for the prompts that want to display in yellow\n// deleted chatbot-fetch\n// fixed error checking for null values message/timer_trigger, implemented null checking within trigger methods that check prompts\n// implementing dynamic prompting\n// bot naming feature\nconst info = {\n    name: \"chat\",\n    parameters: {\n        // BOOL, STRING, INT, FLOAT, FUNCTION, KEY, KEYS, SELECT, HTML_STRING, IMAGE, AUDIO, VIDEO, OBJECT, COMPLEX\n        ai_prompt: {\n            type: ParameterType.STRING,\n            default: undefined,\n        },\n        ai_model: {\n            type: ParameterType.STRING,\n            default: \"gpt-4o\",\n        },\n        chat_field_placeholder: {\n            type: ParameterType.STRING,\n            default: \"Type your message here...\",\n        },\n        bot_name: {\n            type: ParameterType.STRING,\n            default: \"Adora-bot\",\n        },\n        continue_button: {\n            type: ParameterType.COMPLEX,\n            default: {},\n            nested: {\n                timer_trigger: {\n                    type: ParameterType.INT,\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                },\n                message: {\n                    type: ParameterType.STRING,\n                },\n            },\n        },\n        additional_prompts: {\n            type: ParameterType.COMPLEX,\n            array: true,\n            default: undefined,\n            nested: {\n                message: {\n                    // messages to display on screen\n                    type: ParameterType.STRING,\n                    default: \"\",\n                },\n                prompt: {\n                    // prompting to pass in\n                    type: ParameterType.STRING,\n                    default: null,\n                },\n                role: {\n                    // \"prompt\" (\"system-prompt\"), \"chatbot-message\",\"chatbot-prompt\"\n                    type: ParameterType.STRING,\n                    default: \"system-prompt\",\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n                timer_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n            },\n        },\n        // when triggers it doesn't stop, do we want to give it a stop?\n        prompt_chain: {\n            type: ParameterType.COMPLEX,\n            default: undefined,\n            nested: {\n                prompts: {\n                    type: ParameterType.STRING,\n                    array: true,\n                    default: [],\n                },\n                message_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n                timer_trigger: {\n                    type: ParameterType.INT,\n                    default: null,\n                },\n            },\n        },\n    },\n};\n/**\n * **chat**\n *\n * Chat interface for running experiments using LLMs\n *\n * @author Victor Zhang and Niranjan Baskaran\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-chat/README.md}}\n */\nclass ChatPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        this.initializeTrialVariables(trial);\n        var html = `<div class=\"chat-page\">\n      <div class=\"bot-title\">\n        <h1 class=\"bot-title-text\">` +\n            trial.bot_name +\n            `</h1>\n      </div>\n      <div class=\"chat-container\">\n        <div class=\"chat-box\" id=\"chat-box\"></div>\n\n        <div class=\"chat-fields\"> \n          <textarea type=\"text\" id=\"user-input\" placeholder=\"` +\n            trial.chat_field_placeholder +\n            `\"></textarea>\n          <button id=\"send-btn\">Send</button>\n          <button id=\"continue-btn\" style=\"display: none;\">Continue</button>\n        </div>\n      </div>\n    </div>`;\n        display_element.innerHTML = html;\n        const chatBox = display_element.querySelector(\"#chat-box\");\n        const userInput = display_element.querySelector(\"#user-input\");\n        const sendButton = display_element.querySelector(\"#send-btn\");\n        const continueButton = display_element.querySelector(\"#continue-btn\");\n        // Setting up Trial Logic\n        // Function to handle logic of sending user message, and data collection\n        const sendMessage = () => __awaiter(this, void 0, void 0, function* () {\n            const message = userInput.value.trim();\n            this.addMessage(\"user\", message, chatBox);\n            userInput.value = \"\";\n            // prompt chaining or simple requests\n            if (message !== \"\" && this.prompt_chain && this.chainCondition()) {\n                yield this.chainPrompts(message, chatBox);\n            }\n            else if (message !== \"\") {\n                yield this.updateAndProcessGPT(chatBox);\n            }\n            // inc messages and check researcher prompts\n            this.messages_sent += 1;\n            this.checkResearcherPrompts(chatBox, continueButton);\n        });\n        // Event listener for send button click\n        sendButton.addEventListener(\"click\", sendMessage);\n        // Event listener for Enter key press\n        userInput.addEventListener(\"keydown\", function (event) {\n            if (event.key === \"Enter\") {\n                if (!event.shiftKey) {\n                    event.preventDefault(); // Prevent default behavior of adding new line\n                    sendMessage();\n                }\n            }\n        });\n        continueButton.addEventListener(\"click\", () => {\n            this.jsPsych.finishTrial({ chatLogs: this.prompt });\n        });\n        // Setting up Trial\n        this.checkResearcherPrompts(chatBox, continueButton);\n    }\n    initializeTrialVariables(trial) {\n        this.timer_start = performance.now();\n        this.messages_sent = 0;\n        this.ai_model = trial.ai_model;\n        // sets prompt\n        this.prompt = [];\n        this.updatePrompt(trial.ai_prompt, \"system\");\n        // sets researcher prompts and removes any that can't trigger\n        this.researcher_prompts = trial.additional_prompts.filter((researcher_prompt) => {\n            if (researcher_prompt[\"message_trigger\"] === null &&\n                researcher_prompt[\"timer_trigger\"] === null) {\n                console.error(\"Missing required property in researcher prompt:\", researcher_prompt);\n                return false;\n            }\n            return true;\n        });\n        // sets continue button and removes any that can't trigger\n        const continue_button = trial.continue_button;\n        if (continue_button[\"message_trigger\"] === null && continue_button[\"timer_trigger\"] === null) {\n            console.error(\"Missing required property in continue prompt, will never display\");\n        }\n        else {\n            continue_button[\"role\"] = \"continue\";\n            this.researcher_prompts.push(continue_button);\n        }\n        // sets prompt chain and removes any that can't trigger\n        if (trial.prompt_chain &&\n            trial.prompt_chain[\"message_trigger\"] === null &&\n            trial.prompt_chain[\"timer_trigger\"] === null) {\n            console.error(\"Missing required property in prompt_chain, will never trigger\");\n        }\n        else {\n            this.prompt_chain = trial.prompt_chain;\n        }\n    }\n    // Call to backend, newMessage is the document item to print (optional because when chaining don't want them to display)\n    fetchGPT(messages, newMessage) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield fetch(\"http://localhost:3000/api/chat\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                    },\n                    body: JSON.stringify({ messages, ai_model: this.ai_model }), // Corrected JSON structure\n                });\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const runner = ChatCompletionStream.fromReadableStream(response.body);\n                if (newMessage) {\n                    // prints to screen if specified, otherwise only fetch\n                    runner.on(\"content\", (delta, snapshot) => {\n                        newMessage.innerHTML = snapshot.replace(/\\n/g, \"<br>\");\n                    });\n                }\n                yield runner.finalChatCompletion(); // waits before returning the actual content\n                return runner[\"messages\"][0][\"content\"];\n            }\n            catch (error) {\n                console.error(\"Error fetching GPT data:\", error);\n                throw error; // Rethrow the error after logging it\n            }\n        });\n    }\n    // updates prompts behind the scenes when we add messages to the screen\n    updatePrompt(message, role) {\n        const time = Math.round(performance.now());\n        const newMessage = { role: role, content: message, time: time };\n        this.prompt.push(newMessage);\n    }\n    // Handles updates to system with the prompt and to the screen\n    addMessage(role, message, chatBox) {\n        const newMessage = document.createElement(\"div\");\n        // Handles logic of updating prompts and error checking\n        switch (role) {\n            case \"chatbot\": // writing to screen handled caller function\n                this.updatePrompt(message, \"assistant\");\n                return;\n            case \"user\":\n                this.updatePrompt(message, \"user\");\n                break;\n            case \"chatbot-message\": // set by researcher, needs be seperate case because doesn't update prompts\n                role = \"chatbot\";\n                break;\n            case \"system-prompt\": // set by researcher\n                break;\n            default:\n                console.error(\"Incorrect role\");\n                return;\n        }\n        newMessage.className = role + \"-message\";\n        newMessage.innerHTML = \"\";\n        chatBox.appendChild(newMessage);\n        newMessage.innerHTML = message.replace(/\\n/g, \"<br>\");\n        chatBox.scrollTop = chatBox.scrollHeight;\n    }\n    // updates and processes to the screen, workflow for one message (can be used in the process of workflow for mulitple messages)\n    updateAndProcessGPT(chatBox, prompt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const newMessage = document.createElement(\"div\");\n            newMessage.className = \"chatbot\" + \"-message\";\n            newMessage.innerHTML = \"\";\n            chatBox.appendChild(newMessage);\n            try {\n                var response = undefined;\n                // allows to pass in non defined prompts\n                if (prompt)\n                    response = yield this.fetchGPT(prompt, newMessage);\n                // special case when wanting to prompt with own thing\n                else\n                    response = yield this.fetchGPT(this.prompt, newMessage);\n                chatBox.scrollTop = chatBox.scrollHeight;\n                this.addMessage(\"chatbot\", response, chatBox); // saves to prompt\n                return response;\n            }\n            catch (error) {\n                this.addMessage(\"chatbot\", \"error fetching bot response\", chatBox);\n                return \"error fetching response\";\n            }\n        });\n    }\n    checkResearcherPrompts(chatBox, continueButton) {\n        this.researcher_prompts = this.researcher_prompts.filter((researcher_prompt) => {\n            const message_trigger = researcher_prompt[\"message_trigger\"];\n            const timer_trigger = researcher_prompt[\"timer_trigger\"];\n            const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n            if ((message_trigger !== null && this.messages_sent >= message_trigger) ||\n                (timer_trigger !== null && time_elapsed >= timer_trigger)) {\n                // Checking with prompt to trigger\n                switch (researcher_prompt[\"role\"]) {\n                    case \"chatbot-message\": // case is needed because of chatbot updating prompt\n                    case \"system-prompt\": // want these cases to have the same functionality\n                        this.addMessage(researcher_prompt[\"role\"], researcher_prompt[\"message\"], chatBox);\n                        break;\n                    case \"chatbot-prompt\": // checkes messages, updates prompt and prints sytem message if exists\n                        const prompt = researcher_prompt[\"prompt\"];\n                        const message = researcher_prompt[\"message\"];\n                        if (prompt !== null && typeof prompt === \"string\") {\n                            this.updatePrompt(prompt, \"system\");\n                        }\n                        else\n                            console.error(researcher_prompt, \"is missing prompt field or it isn't in the correct format\");\n                        if (message !== null && typeof prompt === \"string\") {\n                            this.addMessage(\"system-prompt\", message, chatBox);\n                        }\n                        break;\n                    case \"continue\": // displays continue button, error checking that pipelining is working\n                        if (!continueButton) {\n                            console.error(\"No continue button to display\");\n                            return false;\n                        }\n                        continueButton.style.display = \"block\";\n                        this.addMessage(\"system-prompt\", researcher_prompt[\"message\"], chatBox);\n                        break;\n                    default:\n                        console.error(\"Incorrect role for prompting\");\n                }\n                return false; // Remove this item from the array\n            }\n            return true; // Keep this item in the array\n        });\n    }\n    chainCondition() {\n        const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n        const message_trigger = this.prompt_chain[\"message_trigger\"];\n        const timer_trigger = this.prompt_chain[\"timer_trigger\"];\n        if ((message_trigger !== null && this.messages_sent >= message_trigger) ||\n            (timer_trigger !== null && time_elapsed >= timer_trigger)) {\n            return true;\n        }\n        else\n            return false;\n    }\n    chainPrompts(message, chatBox) {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let i = 0; i < this.prompt_chain[\"prompts\"].length; i++) {\n                var temp_prompt = [];\n                const prompt = this.prompt_chain[\"prompts\"][i];\n                const new_sys = {\n                    role: \"system\",\n                    content: prompt,\n                };\n                temp_prompt.push(new_sys);\n                const user_message = {\n                    role: \"user\",\n                    content: message,\n                };\n                temp_prompt.push(user_message);\n                console.log(\"current prompt and input:\", temp_prompt);\n                if (i === this.prompt_chain[\"prompts\"].length - 1) {\n                    yield this.updateAndProcessGPT(chatBox, temp_prompt);\n                }\n                else\n                    message = yield this.fetchGPT(temp_prompt); // Ensure to await if fetchGPT is asynchronous\n                console.log(\"assistant message:\", message);\n            }\n        });\n    }\n}\nChatPlugin.info = info;\nexport default ChatPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts","/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/openai/lib/ChatCompletionStream.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-chat/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"chat\";\n    readonly parameters: {\n        readonly ai_prompt: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        readonly ai_model: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"gpt-4o\";\n        };\n        readonly chat_field_placeholder: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"Type your message here...\";\n        };\n        readonly bot_name: {\n            readonly type: ParameterType.STRING;\n            readonly default: \"Adora-bot\";\n        };\n        readonly continue_button: {\n            readonly type: ParameterType.COMPLEX;\n            readonly default: {};\n            readonly nested: {\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                };\n                readonly message: {\n                    readonly type: ParameterType.STRING;\n                };\n            };\n        };\n        readonly additional_prompts: {\n            readonly type: ParameterType.COMPLEX;\n            readonly array: true;\n            readonly default: any;\n            readonly nested: {\n                readonly message: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: \"\";\n                };\n                readonly prompt: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: any;\n                };\n                readonly role: {\n                    readonly type: ParameterType.STRING;\n                    readonly default: \"system-prompt\";\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n        readonly prompt_chain: {\n            readonly type: ParameterType.COMPLEX;\n            readonly default: any;\n            readonly nested: {\n                readonly prompts: {\n                    readonly type: ParameterType.STRING;\n                    readonly array: true;\n                    readonly default: readonly [];\n                };\n                readonly message_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n                readonly timer_trigger: {\n                    readonly type: ParameterType.INT;\n                    readonly default: any;\n                };\n            };\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **chat**\n *\n * Chat interface for running experiments using LLMs\n *\n * @author Victor Zhang and Niranjan Baskaran\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-chat/README.md}}\n */\ndeclare class ChatPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"chat\";\n        readonly parameters: {\n            readonly ai_prompt: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            readonly ai_model: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"gpt-4o\";\n            };\n            readonly chat_field_placeholder: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"Type your message here...\";\n            };\n            readonly bot_name: {\n                readonly type: ParameterType.STRING;\n                readonly default: \"Adora-bot\";\n            };\n            readonly continue_button: {\n                readonly type: ParameterType.COMPLEX;\n                readonly default: {};\n                readonly nested: {\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                    };\n                    readonly message: {\n                        readonly type: ParameterType.STRING;\n                    };\n                };\n            };\n            readonly additional_prompts: {\n                readonly type: ParameterType.COMPLEX;\n                readonly array: true;\n                readonly default: any;\n                readonly nested: {\n                    readonly message: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: \"\";\n                    };\n                    readonly prompt: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: any;\n                    };\n                    readonly role: {\n                        readonly type: ParameterType.STRING;\n                        readonly default: \"system-prompt\";\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n            readonly prompt_chain: {\n                readonly type: ParameterType.COMPLEX;\n                readonly default: any;\n                readonly nested: {\n                    readonly prompts: {\n                        readonly type: ParameterType.STRING;\n                        readonly array: true;\n                        readonly default: readonly [];\n                    };\n                    readonly message_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                    readonly timer_trigger: {\n                        readonly type: ParameterType.INT;\n                        readonly default: any;\n                    };\n                };\n            };\n        };\n    };\n    private prompt;\n    private researcher_prompts;\n    private prompt_chain;\n    private messages_sent;\n    private timer_start;\n    private ai_model;\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    initializeTrialVariables(trial: TrialType<Info>): void;\n    fetchGPT(messages: any, newMessage?: any): Promise<string | import(\"openai/resources\").ChatCompletionContentPart[]>;\n    private updatePrompt;\n    addMessage(role: any, message: any, chatBox: any): void;\n    updateAndProcessGPT(chatBox: any, prompt?: any): Promise<any>;\n    checkResearcherPrompts(chatBox: any, continueButton: any): void;\n    private chainCondition;\n    private chainPrompts;\n}\nexport default ChatPlugin;\n"}}
