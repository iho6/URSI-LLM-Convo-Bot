{"code":"export class ChatLog {\n    constructor() {\n        this.conversation_log = [];\n        this.final_data = [];\n    }\n    setPrompt(prompt) {\n        const time = Math.round(performance.now());\n        const newMessage = {\n            role: \"system\",\n            content: prompt,\n            time: time,\n        };\n        this.final_data.push(newMessage);\n        this.prompt = prompt;\n    }\n    getPrompt() {\n        const newElement = { role: \"system\", content: this.prompt };\n        const tempConversationLog = [...this.conversation_log, newElement];\n        return tempConversationLog;\n    }\n    getChatLogs() {\n        return this.final_data;\n    }\n    // updates current prompt, possibly replace to pass in objct\n    updateConversationLog(content, role, keyPressLog, message) {\n        if (role === \"system\")\n            console.log(\"WARNING: this case is not caught and is incorrectly trigerring outadated method\", \"content:\", content, \"role:\", role);\n        const time = Math.round(performance.now());\n        const newPrompt = { role: role, content: content };\n        this.conversation_log.push(newPrompt);\n        const newMessage = Object.assign(Object.assign({ role: role, content: content, time: time }, (message ? { message: message } : {})), (keyPressLog ? { keyPressLog: keyPressLog } : {}));\n        this.final_data.push(newMessage);\n    }\n    // logMessage adds message to final data but not conversatin log\n    logMessage(message, role) {\n        const time = Math.round(performance.now());\n        const newMessage = {\n            role: role,\n            content: message,\n            time: time,\n        };\n        this.final_data.push(newMessage);\n    }\n    // Chain Condition -- have it be a list of the chain and what happens before and after\n    // called when temporary chainPrompting\n    cleanConversation() {\n        const res = this.conversation_log.filter((message, index, array) => {\n            if (\"role\" in message && message[\"role\"] === \"system\") {\n                return false;\n            }\n            // Exclude the last message because will be user message - only want existing conversation\n            if (index === array.length - 1) {\n                return false;\n            }\n            return true;\n        });\n        return res;\n    }\n    // call when adding a new prompt\n    cleanSystem(prompt, message) {\n        // cleans existing prompts\n        const res = this.conversation_log.filter((message) => {\n            if (\"role\" in message && message[\"role\"] === \"system\") {\n                return false;\n            }\n            return true;\n        });\n        this.conversation_log = res;\n        this.setPrompt(prompt);\n        return this.getPrompt();\n    }\n}\n//# sourceMappingURL=ChatLog.js.map","references":[],"map":"{\"version\":3,\"file\":\"ChatLog.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/ChatLog.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-chat/node_modules/.cache/rollup-plugin-typescript2/placeholder/ChatLog.d.ts","writeByteOrderMark":false,"text":"export declare class ChatLog {\n    private conversation_log;\n    private final_data;\n    private prompt;\n    constructor();\n    setPrompt(prompt: any): void;\n    getPrompt(): {\n        role: string;\n        content: string;\n    }[];\n    getChatLogs(): {\n        role: string;\n        content: string;\n        time: number;\n        keyPressLog?: any;\n    }[];\n    updateConversationLog(content: any, role: any, keyPressLog?: any, message?: any): void;\n    logMessage(message: any, role: any): void;\n    cleanConversation(): {}[];\n    cleanSystem(prompt: any, message?: any): {\n        role: string;\n        content: string;\n    }[];\n}\n"}}
