{"version":3,"file":"index.browser.min.js","sources":["../../../node_modules/openai/_shims/registry.mjs","../../../node_modules/openai/_shims/MultipartBody.mjs","../../../node_modules/openai/_shims/index.mjs","../../../node_modules/openai/_shims/web-runtime.mjs","../../../node_modules/openai/streaming.mjs","../../../node_modules/openai/core.mjs","../../../node_modules/openai/error.mjs","../../../node_modules/openai/lib/RunnableFunction.mjs","../../../node_modules/openai/lib/chatCompletionUtils.mjs","../../../node_modules/openai/lib/AbstractChatCompletionRunner.mjs","../../../node_modules/openai/lib/ChatCompletionStream.mjs","../src/ChatLog.ts","../src/index.ts"],"sourcesContent":["export let auto = false;\nexport let kind = undefined;\nexport let fetch = undefined;\nexport let Request = undefined;\nexport let Response = undefined;\nexport let Headers = undefined;\nexport let FormData = undefined;\nexport let Blob = undefined;\nexport let File = undefined;\nexport let ReadableStream = undefined;\nexport let getMultipartRequestOptions = undefined;\nexport let getDefaultAgent = undefined;\nexport let fileFromPath = undefined;\nexport let isFsReadStream = undefined;\nexport function setShims(shims, options = { auto: false }) {\n    if (auto) {\n        throw new Error(`you must \\`import 'openai/shims/${shims.kind}'\\` before importing anything else from openai`);\n    }\n    if (kind) {\n        throw new Error(`can't \\`import 'openai/shims/${shims.kind}'\\` after \\`import 'openai/shims/${kind}'\\``);\n    }\n    auto = options.auto;\n    kind = shims.kind;\n    fetch = shims.fetch;\n    Request = shims.Request;\n    Response = shims.Response;\n    Headers = shims.Headers;\n    FormData = shims.FormData;\n    Blob = shims.Blob;\n    File = shims.File;\n    ReadableStream = shims.ReadableStream;\n    getMultipartRequestOptions = shims.getMultipartRequestOptions;\n    getDefaultAgent = shims.getDefaultAgent;\n    fileFromPath = shims.fileFromPath;\n    isFsReadStream = shims.isFsReadStream;\n}\n//# sourceMappingURL=registry.mjs.map","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nexport class MultipartBody {\n    constructor(body) {\n        this.body = body;\n    }\n    get [Symbol.toStringTag]() {\n        return 'MultipartBody';\n    }\n}\n//# sourceMappingURL=MultipartBody.mjs.map","/**\n * Disclaimer: modules in _shims aren't intended to be imported by SDK users.\n */\nimport * as shims from './registry.mjs';\nimport * as auto from 'openai/_shims/auto/runtime';\nif (!shims.kind) shims.setShims(auto.getRuntime(), { auto: true });\nexport * from './registry.mjs';\n","import { MultipartBody } from \"./MultipartBody.mjs\";\nexport function getRuntime({ manuallyImported } = {}) {\n    const recommendation = manuallyImported ?\n        `You may need to use polyfills`\n        : `Add one of these imports before your first \\`import â€¦ from 'openai'\\`:\n- \\`import 'openai/shims/node'\\` (if you're running on Node)\n- \\`import 'openai/shims/web'\\` (otherwise)\n`;\n    let _fetch, _Request, _Response, _Headers;\n    try {\n        // @ts-ignore\n        _fetch = fetch;\n        // @ts-ignore\n        _Request = Request;\n        // @ts-ignore\n        _Response = Response;\n        // @ts-ignore\n        _Headers = Headers;\n    }\n    catch (error) {\n        throw new Error(`this environment is missing the following Web Fetch API type: ${error.message}. ${recommendation}`);\n    }\n    return {\n        kind: 'web',\n        fetch: _fetch,\n        Request: _Request,\n        Response: _Response,\n        Headers: _Headers,\n        FormData: \n        // @ts-ignore\n        typeof FormData !== 'undefined' ? FormData : (class FormData {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'FormData' is undefined. ${recommendation}`);\n            }\n        }),\n        Blob: typeof Blob !== 'undefined' ? Blob : (class Blob {\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'Blob' is undefined. ${recommendation}`);\n            }\n        }),\n        File: \n        // @ts-ignore\n        typeof File !== 'undefined' ? File : (class File {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`file uploads aren't supported in this environment yet as 'File' is undefined. ${recommendation}`);\n            }\n        }),\n        ReadableStream: \n        // @ts-ignore\n        typeof ReadableStream !== 'undefined' ? ReadableStream : (class ReadableStream {\n            // @ts-ignore\n            constructor() {\n                throw new Error(`streaming isn't supported in this environment yet as 'ReadableStream' is undefined. ${recommendation}`);\n            }\n        }),\n        getMultipartRequestOptions: async (\n        // @ts-ignore\n        form, opts) => ({\n            ...opts,\n            body: new MultipartBody(form),\n        }),\n        getDefaultAgent: (url) => undefined,\n        fileFromPath: () => {\n            throw new Error('The `fileFromPath` function is only supported in Node. See the README for more details: https://www.github.com/openai/openai-node#file-uploads');\n        },\n        isFsReadStream: (value) => false,\n    };\n}\n//# sourceMappingURL=web-runtime.mjs.map","import { ReadableStream } from \"./_shims/index.mjs\";\nimport { OpenAIError } from \"./error.mjs\";\nimport { APIError } from 'openai/error';\nexport class Stream {\n    constructor(iterator, controller) {\n        this.iterator = iterator;\n        this.controller = controller;\n    }\n    static fromSSEResponse(response, controller) {\n        let consumed = false;\n        async function* iterator() {\n            if (consumed) {\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const sse of _iterSSEMessages(response, controller)) {\n                    if (done)\n                        continue;\n                    if (sse.data.startsWith('[DONE]')) {\n                        done = true;\n                        continue;\n                    }\n                    if (sse.event === null) {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        if (data && data.error) {\n                            throw new APIError(undefined, data.error, undefined, undefined);\n                        }\n                        yield data;\n                    }\n                    else {\n                        let data;\n                        try {\n                            data = JSON.parse(sse.data);\n                        }\n                        catch (e) {\n                            console.error(`Could not parse message into JSON:`, sse.data);\n                            console.error(`From chunk:`, sse.raw);\n                            throw e;\n                        }\n                        // TODO: Is this where the error should be thrown?\n                        if (sse.event == 'error') {\n                            throw new APIError(undefined, data.error, data.message, undefined);\n                        }\n                        yield { event: sse.event, data: data };\n                    }\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === 'AbortError')\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    /**\n     * Generates a Stream from a newline-separated ReadableStream\n     * where each item is a JSON value.\n     */\n    static fromReadableStream(readableStream, controller) {\n        let consumed = false;\n        async function* iterLines() {\n            const lineDecoder = new LineDecoder();\n            const iter = readableStreamAsyncIterable(readableStream);\n            for await (const chunk of iter) {\n                for (const line of lineDecoder.decode(chunk)) {\n                    yield line;\n                }\n            }\n            for (const line of lineDecoder.flush()) {\n                yield line;\n            }\n        }\n        async function* iterator() {\n            if (consumed) {\n                throw new Error('Cannot iterate over a consumed stream, use `.tee()` to split the stream.');\n            }\n            consumed = true;\n            let done = false;\n            try {\n                for await (const line of iterLines()) {\n                    if (done)\n                        continue;\n                    if (line)\n                        yield JSON.parse(line);\n                }\n                done = true;\n            }\n            catch (e) {\n                // If the user calls `stream.controller.abort()`, we should exit without throwing.\n                if (e instanceof Error && e.name === 'AbortError')\n                    return;\n                throw e;\n            }\n            finally {\n                // If the user `break`s, abort the ongoing request.\n                if (!done)\n                    controller.abort();\n            }\n        }\n        return new Stream(iterator, controller);\n    }\n    [Symbol.asyncIterator]() {\n        return this.iterator();\n    }\n    /**\n     * Splits the stream into two streams which can be\n     * independently read from at different speeds.\n     */\n    tee() {\n        const left = [];\n        const right = [];\n        const iterator = this.iterator();\n        const teeIterator = (queue) => {\n            return {\n                next: () => {\n                    if (queue.length === 0) {\n                        const result = iterator.next();\n                        left.push(result);\n                        right.push(result);\n                    }\n                    return queue.shift();\n                },\n            };\n        };\n        return [\n            new Stream(() => teeIterator(left), this.controller),\n            new Stream(() => teeIterator(right), this.controller),\n        ];\n    }\n    /**\n     * Converts this stream to a newline-separated ReadableStream of\n     * JSON stringified values in the stream\n     * which can be turned back into a Stream with `Stream.fromReadableStream()`.\n     */\n    toReadableStream() {\n        const self = this;\n        let iter;\n        const encoder = new TextEncoder();\n        return new ReadableStream({\n            async start() {\n                iter = self[Symbol.asyncIterator]();\n            },\n            async pull(ctrl) {\n                try {\n                    const { value, done } = await iter.next();\n                    if (done)\n                        return ctrl.close();\n                    const bytes = encoder.encode(JSON.stringify(value) + '\\n');\n                    ctrl.enqueue(bytes);\n                }\n                catch (err) {\n                    ctrl.error(err);\n                }\n            },\n            async cancel() {\n                await iter.return?.();\n            },\n        });\n    }\n}\nexport async function* _iterSSEMessages(response, controller) {\n    if (!response.body) {\n        controller.abort();\n        throw new OpenAIError(`Attempted to iterate over a response with no body`);\n    }\n    const sseDecoder = new SSEDecoder();\n    const lineDecoder = new LineDecoder();\n    const iter = readableStreamAsyncIterable(response.body);\n    for await (const sseChunk of iterSSEChunks(iter)) {\n        for (const line of lineDecoder.decode(sseChunk)) {\n            const sse = sseDecoder.decode(line);\n            if (sse)\n                yield sse;\n        }\n    }\n    for (const line of lineDecoder.flush()) {\n        const sse = sseDecoder.decode(line);\n        if (sse)\n            yield sse;\n    }\n}\n/**\n * Given an async iterable iterator, iterates over it and yields full\n * SSE chunks, i.e. yields when a double new-line is encountered.\n */\nasync function* iterSSEChunks(iterator) {\n    let data = new Uint8Array();\n    for await (const chunk of iterator) {\n        if (chunk == null) {\n            continue;\n        }\n        const binaryChunk = chunk instanceof ArrayBuffer ? new Uint8Array(chunk)\n            : typeof chunk === 'string' ? new TextEncoder().encode(chunk)\n                : chunk;\n        let newData = new Uint8Array(data.length + binaryChunk.length);\n        newData.set(data);\n        newData.set(binaryChunk, data.length);\n        data = newData;\n        let patternIndex;\n        while ((patternIndex = findDoubleNewlineIndex(data)) !== -1) {\n            yield data.slice(0, patternIndex);\n            data = data.slice(patternIndex);\n        }\n    }\n    if (data.length > 0) {\n        yield data;\n    }\n}\nfunction findDoubleNewlineIndex(buffer) {\n    // This function searches the buffer for the end patterns (\\r\\r, \\n\\n, \\r\\n\\r\\n)\n    // and returns the index right after the first occurrence of any pattern,\n    // or -1 if none of the patterns are found.\n    const newline = 0x0a; // \\n\n    const carriage = 0x0d; // \\r\n    for (let i = 0; i < buffer.length - 2; i++) {\n        if (buffer[i] === newline && buffer[i + 1] === newline) {\n            // \\n\\n\n            return i + 2;\n        }\n        if (buffer[i] === carriage && buffer[i + 1] === carriage) {\n            // \\r\\r\n            return i + 2;\n        }\n        if (buffer[i] === carriage &&\n            buffer[i + 1] === newline &&\n            i + 3 < buffer.length &&\n            buffer[i + 2] === carriage &&\n            buffer[i + 3] === newline) {\n            // \\r\\n\\r\\n\n            return i + 4;\n        }\n    }\n    return -1;\n}\nclass SSEDecoder {\n    constructor() {\n        this.event = null;\n        this.data = [];\n        this.chunks = [];\n    }\n    decode(line) {\n        if (line.endsWith('\\r')) {\n            line = line.substring(0, line.length - 1);\n        }\n        if (!line) {\n            // empty line and we didn't previously encounter any messages\n            if (!this.event && !this.data.length)\n                return null;\n            const sse = {\n                event: this.event,\n                data: this.data.join('\\n'),\n                raw: this.chunks,\n            };\n            this.event = null;\n            this.data = [];\n            this.chunks = [];\n            return sse;\n        }\n        this.chunks.push(line);\n        if (line.startsWith(':')) {\n            return null;\n        }\n        let [fieldname, _, value] = partition(line, ':');\n        if (value.startsWith(' ')) {\n            value = value.substring(1);\n        }\n        if (fieldname === 'event') {\n            this.event = value;\n        }\n        else if (fieldname === 'data') {\n            this.data.push(value);\n        }\n        return null;\n    }\n}\n/**\n * A re-implementation of httpx's `LineDecoder` in Python that handles incrementally\n * reading lines from text.\n *\n * https://github.com/encode/httpx/blob/920333ea98118e9cf617f246905d7b202510941c/httpx/_decoders.py#L258\n */\nclass LineDecoder {\n    constructor() {\n        this.buffer = [];\n        this.trailingCR = false;\n    }\n    decode(chunk) {\n        let text = this.decodeText(chunk);\n        if (this.trailingCR) {\n            text = '\\r' + text;\n            this.trailingCR = false;\n        }\n        if (text.endsWith('\\r')) {\n            this.trailingCR = true;\n            text = text.slice(0, -1);\n        }\n        if (!text) {\n            return [];\n        }\n        const trailingNewline = LineDecoder.NEWLINE_CHARS.has(text[text.length - 1] || '');\n        let lines = text.split(LineDecoder.NEWLINE_REGEXP);\n        // if there is a trailing new line then the last entry will be an empty\n        // string which we don't care about\n        if (trailingNewline) {\n            lines.pop();\n        }\n        if (lines.length === 1 && !trailingNewline) {\n            this.buffer.push(lines[0]);\n            return [];\n        }\n        if (this.buffer.length > 0) {\n            lines = [this.buffer.join('') + lines[0], ...lines.slice(1)];\n            this.buffer = [];\n        }\n        if (!trailingNewline) {\n            this.buffer = [lines.pop() || ''];\n        }\n        return lines;\n    }\n    decodeText(bytes) {\n        if (bytes == null)\n            return '';\n        if (typeof bytes === 'string')\n            return bytes;\n        // Node:\n        if (typeof Buffer !== 'undefined') {\n            if (bytes instanceof Buffer) {\n                return bytes.toString();\n            }\n            if (bytes instanceof Uint8Array) {\n                return Buffer.from(bytes).toString();\n            }\n            throw new OpenAIError(`Unexpected: received non-Uint8Array (${bytes.constructor.name}) stream chunk in an environment with a global \"Buffer\" defined, which this library assumes to be Node. Please report this error.`);\n        }\n        // Browser\n        if (typeof TextDecoder !== 'undefined') {\n            if (bytes instanceof Uint8Array || bytes instanceof ArrayBuffer) {\n                this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));\n                return this.textDecoder.decode(bytes);\n            }\n            throw new OpenAIError(`Unexpected: received non-Uint8Array/ArrayBuffer (${bytes.constructor.name}) in a web platform. Please report this error.`);\n        }\n        throw new OpenAIError(`Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`);\n    }\n    flush() {\n        if (!this.buffer.length && !this.trailingCR) {\n            return [];\n        }\n        const lines = [this.buffer.join('')];\n        this.buffer = [];\n        this.trailingCR = false;\n        return lines;\n    }\n}\n// prettier-ignore\nLineDecoder.NEWLINE_CHARS = new Set(['\\n', '\\r']);\nLineDecoder.NEWLINE_REGEXP = /\\r\\n|[\\n\\r]/g;\n/** This is an internal helper function that's just used for testing */\nexport function _decodeChunks(chunks) {\n    const decoder = new LineDecoder();\n    const lines = [];\n    for (const chunk of chunks) {\n        lines.push(...decoder.decode(chunk));\n    }\n    return lines;\n}\nfunction partition(str, delimiter) {\n    const index = str.indexOf(delimiter);\n    if (index !== -1) {\n        return [str.substring(0, index), delimiter, str.substring(index + delimiter.length)];\n    }\n    return [str, '', ''];\n}\n/**\n * Most browsers don't yet have async iterable support for ReadableStream,\n * and Node has a very different way of reading bytes from its \"ReadableStream\".\n *\n * This polyfill was pulled from https://github.com/MattiasBuelens/web-streams-polyfill/pull/122#issuecomment-1627354490\n */\nexport function readableStreamAsyncIterable(stream) {\n    if (stream[Symbol.asyncIterator])\n        return stream;\n    const reader = stream.getReader();\n    return {\n        async next() {\n            try {\n                const result = await reader.read();\n                if (result?.done)\n                    reader.releaseLock(); // release lock when stream becomes closed\n                return result;\n            }\n            catch (e) {\n                reader.releaseLock(); // release lock when stream becomes errored\n                throw e;\n            }\n        },\n        async return() {\n            const cancelPromise = reader.cancel();\n            reader.releaseLock();\n            await cancelPromise;\n            return { done: true, value: undefined };\n        },\n        [Symbol.asyncIterator]() {\n            return this;\n        },\n    };\n}\n//# sourceMappingURL=streaming.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractPage_client;\nimport { VERSION } from \"./version.mjs\";\nimport { Stream } from \"./streaming.mjs\";\nimport { OpenAIError, APIError, APIConnectionError, APIConnectionTimeoutError, APIUserAbortError, } from \"./error.mjs\";\nimport { kind as shimsKind, getDefaultAgent, fetch, } from \"./_shims/index.mjs\";\nimport { isMultipartBody } from \"./uploads.mjs\";\nexport { maybeMultipartFormRequestOptions, multipartFormRequestOptions, createForm, } from \"./uploads.mjs\";\nasync function defaultParseResponse(props) {\n    const { response } = props;\n    if (props.options.stream) {\n        debug('response', response.status, response.url, response.headers, response.body);\n        // Note: there is an invariant here that isn't represented in the type system\n        // that if you set `stream: true` the response type must also be `Stream<T>`\n        if (props.options.__streamClass) {\n            return props.options.__streamClass.fromSSEResponse(response, props.controller);\n        }\n        return Stream.fromSSEResponse(response, props.controller);\n    }\n    // fetch refuses to read the body when the status code is 204.\n    if (response.status === 204) {\n        return null;\n    }\n    if (props.options.__binaryResponse) {\n        return response;\n    }\n    const contentType = response.headers.get('content-type');\n    const isJSON = contentType?.includes('application/json') || contentType?.includes('application/vnd.api+json');\n    if (isJSON) {\n        const json = await response.json();\n        debug('response', response.status, response.url, response.headers, json);\n        return json;\n    }\n    const text = await response.text();\n    debug('response', response.status, response.url, response.headers, text);\n    // TODO handle blob, arraybuffer, other content types, etc.\n    return text;\n}\n/**\n * A subclass of `Promise` providing additional helper methods\n * for interacting with the SDK.\n */\nexport class APIPromise extends Promise {\n    constructor(responsePromise, parseResponse = defaultParseResponse) {\n        super((resolve) => {\n            // this is maybe a bit weird but this has to be a no-op to not implicitly\n            // parse the response body; instead .then, .catch, .finally are overridden\n            // to parse the response\n            resolve(null);\n        });\n        this.responsePromise = responsePromise;\n        this.parseResponse = parseResponse;\n    }\n    _thenUnwrap(transform) {\n        return new APIPromise(this.responsePromise, async (props) => transform(await this.parseResponse(props)));\n    }\n    /**\n     * Gets the raw `Response` instance instead of parsing the response\n     * data.\n     *\n     * If you want to parse the response body but still get the `Response`\n     * instance, you can use {@link withResponse()}.\n     *\n     * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import â€¦ from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */\n    asResponse() {\n        return this.responsePromise.then((p) => p.response);\n    }\n    /**\n     * Gets the parsed response data and the raw `Response` instance.\n     *\n     * If you just want to get the raw `Response` instance without parsing it,\n     * you can use {@link asResponse()}.\n     *\n     *\n     * ðŸ‘‹ Getting the wrong TypeScript type for `Response`?\n     * Try setting `\"moduleResolution\": \"NodeNext\"` if you can,\n     * or add one of these imports before your first `import â€¦ from 'openai'`:\n     * - `import 'openai/shims/node'` (if you're running on Node)\n     * - `import 'openai/shims/web'` (otherwise)\n     */\n    async withResponse() {\n        const [data, response] = await Promise.all([this.parse(), this.asResponse()]);\n        return { data, response };\n    }\n    parse() {\n        if (!this.parsedPromise) {\n            this.parsedPromise = this.responsePromise.then(this.parseResponse);\n        }\n        return this.parsedPromise;\n    }\n    then(onfulfilled, onrejected) {\n        return this.parse().then(onfulfilled, onrejected);\n    }\n    catch(onrejected) {\n        return this.parse().catch(onrejected);\n    }\n    finally(onfinally) {\n        return this.parse().finally(onfinally);\n    }\n}\nexport class APIClient {\n    constructor({ baseURL, maxRetries = 2, timeout = 600000, // 10 minutes\n    httpAgent, fetch: overridenFetch, }) {\n        this.baseURL = baseURL;\n        this.maxRetries = validatePositiveInteger('maxRetries', maxRetries);\n        this.timeout = validatePositiveInteger('timeout', timeout);\n        this.httpAgent = httpAgent;\n        this.fetch = overridenFetch ?? fetch;\n    }\n    authHeaders(opts) {\n        return {};\n    }\n    /**\n     * Override this to add your own default headers, for example:\n     *\n     *  {\n     *    ...super.defaultHeaders(),\n     *    Authorization: 'Bearer 123',\n     *  }\n     */\n    defaultHeaders(opts) {\n        return {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n            'User-Agent': this.getUserAgent(),\n            ...getPlatformHeaders(),\n            ...this.authHeaders(opts),\n        };\n    }\n    /**\n     * Override this to add your own headers validation:\n     */\n    validateHeaders(headers, customHeaders) { }\n    defaultIdempotencyKey() {\n        return `stainless-node-retry-${uuid4()}`;\n    }\n    get(path, opts) {\n        return this.methodRequest('get', path, opts);\n    }\n    post(path, opts) {\n        return this.methodRequest('post', path, opts);\n    }\n    patch(path, opts) {\n        return this.methodRequest('patch', path, opts);\n    }\n    put(path, opts) {\n        return this.methodRequest('put', path, opts);\n    }\n    delete(path, opts) {\n        return this.methodRequest('delete', path, opts);\n    }\n    methodRequest(method, path, opts) {\n        return this.request(Promise.resolve(opts).then((opts) => ({ method, path, ...opts })));\n    }\n    getAPIList(path, Page, opts) {\n        return this.requestAPIList(Page, { method: 'get', path, ...opts });\n    }\n    calculateContentLength(body) {\n        if (typeof body === 'string') {\n            if (typeof Buffer !== 'undefined') {\n                return Buffer.byteLength(body, 'utf8').toString();\n            }\n            if (typeof TextEncoder !== 'undefined') {\n                const encoder = new TextEncoder();\n                const encoded = encoder.encode(body);\n                return encoded.length.toString();\n            }\n        }\n        return null;\n    }\n    buildRequest(options) {\n        const { method, path, query, headers: headers = {} } = options;\n        const body = isMultipartBody(options.body) ? options.body.body\n            : options.body ? JSON.stringify(options.body, null, 2)\n                : null;\n        const contentLength = this.calculateContentLength(body);\n        const url = this.buildURL(path, query);\n        if ('timeout' in options)\n            validatePositiveInteger('timeout', options.timeout);\n        const timeout = options.timeout ?? this.timeout;\n        const httpAgent = options.httpAgent ?? this.httpAgent ?? getDefaultAgent(url);\n        const minAgentTimeout = timeout + 1000;\n        if (typeof httpAgent?.options?.timeout === 'number' &&\n            minAgentTimeout > (httpAgent.options.timeout ?? 0)) {\n            // Allow any given request to bump our agent active socket timeout.\n            // This may seem strange, but leaking active sockets should be rare and not particularly problematic,\n            // and without mutating agent we would need to create more of them.\n            // This tradeoff optimizes for performance.\n            httpAgent.options.timeout = minAgentTimeout;\n        }\n        if (this.idempotencyHeader && method !== 'get') {\n            if (!options.idempotencyKey)\n                options.idempotencyKey = this.defaultIdempotencyKey();\n            headers[this.idempotencyHeader] = options.idempotencyKey;\n        }\n        const reqHeaders = this.buildHeaders({ options, headers, contentLength });\n        const req = {\n            method,\n            ...(body && { body: body }),\n            headers: reqHeaders,\n            ...(httpAgent && { agent: httpAgent }),\n            // @ts-ignore node-fetch uses a custom AbortSignal type that is\n            // not compatible with standard web types\n            signal: options.signal ?? null,\n        };\n        return { req, url, timeout };\n    }\n    buildHeaders({ options, headers, contentLength, }) {\n        const reqHeaders = {};\n        if (contentLength) {\n            reqHeaders['content-length'] = contentLength;\n        }\n        const defaultHeaders = this.defaultHeaders(options);\n        applyHeadersMut(reqHeaders, defaultHeaders);\n        applyHeadersMut(reqHeaders, headers);\n        // let builtin fetch set the Content-Type for multipart bodies\n        if (isMultipartBody(options.body) && shimsKind !== 'node') {\n            delete reqHeaders['content-type'];\n        }\n        this.validateHeaders(reqHeaders, headers);\n        return reqHeaders;\n    }\n    /**\n     * Used as a callback for mutating the given `FinalRequestOptions` object.\n     */\n    async prepareOptions(options) { }\n    /**\n     * Used as a callback for mutating the given `RequestInit` object.\n     *\n     * This is useful for cases where you want to add certain headers based off of\n     * the request properties, e.g. `method` or `url`.\n     */\n    async prepareRequest(request, { url, options }) { }\n    parseHeaders(headers) {\n        return (!headers ? {}\n            : Symbol.iterator in headers ?\n                Object.fromEntries(Array.from(headers).map((header) => [...header]))\n                : { ...headers });\n    }\n    makeStatusError(status, error, message, headers) {\n        return APIError.generate(status, error, message, headers);\n    }\n    request(options, remainingRetries = null) {\n        return new APIPromise(this.makeRequest(options, remainingRetries));\n    }\n    async makeRequest(optionsInput, retriesRemaining) {\n        const options = await optionsInput;\n        if (retriesRemaining == null) {\n            retriesRemaining = options.maxRetries ?? this.maxRetries;\n        }\n        await this.prepareOptions(options);\n        const { req, url, timeout } = this.buildRequest(options);\n        await this.prepareRequest(req, { url, options });\n        debug('request', url, options, req.headers);\n        if (options.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        const controller = new AbortController();\n        const response = await this.fetchWithTimeout(url, req, timeout, controller).catch(castToError);\n        if (response instanceof Error) {\n            if (options.signal?.aborted) {\n                throw new APIUserAbortError();\n            }\n            if (retriesRemaining) {\n                return this.retryRequest(options, retriesRemaining);\n            }\n            if (response.name === 'AbortError') {\n                throw new APIConnectionTimeoutError();\n            }\n            throw new APIConnectionError({ cause: response });\n        }\n        const responseHeaders = createResponseHeaders(response.headers);\n        if (!response.ok) {\n            if (retriesRemaining && this.shouldRetry(response)) {\n                const retryMessage = `retrying, ${retriesRemaining} attempts remaining`;\n                debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders);\n                return this.retryRequest(options, retriesRemaining, responseHeaders);\n            }\n            const errText = await response.text().catch((e) => castToError(e).message);\n            const errJSON = safeJSON(errText);\n            const errMessage = errJSON ? undefined : errText;\n            const retryMessage = retriesRemaining ? `(error; no more retries left)` : `(error; not retryable)`;\n            debug(`response (error; ${retryMessage})`, response.status, url, responseHeaders, errMessage);\n            const err = this.makeStatusError(response.status, errJSON, errMessage, responseHeaders);\n            throw err;\n        }\n        return { response, options, controller };\n    }\n    requestAPIList(Page, options) {\n        const request = this.makeRequest(options, null);\n        return new PagePromise(this, request, Page);\n    }\n    buildURL(path, query) {\n        const url = isAbsoluteURL(path) ?\n            new URL(path)\n            : new URL(this.baseURL + (this.baseURL.endsWith('/') && path.startsWith('/') ? path.slice(1) : path));\n        const defaultQuery = this.defaultQuery();\n        if (!isEmptyObj(defaultQuery)) {\n            query = { ...defaultQuery, ...query };\n        }\n        if (typeof query === 'object' && query && !Array.isArray(query)) {\n            url.search = this.stringifyQuery(query);\n        }\n        return url.toString();\n    }\n    stringifyQuery(query) {\n        return Object.entries(query)\n            .filter(([_, value]) => typeof value !== 'undefined')\n            .map(([key, value]) => {\n            if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n                return `${encodeURIComponent(key)}=${encodeURIComponent(value)}`;\n            }\n            if (value === null) {\n                return `${encodeURIComponent(key)}=`;\n            }\n            throw new OpenAIError(`Cannot stringify type ${typeof value}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`);\n        })\n            .join('&');\n    }\n    async fetchWithTimeout(url, init, ms, controller) {\n        const { signal, ...options } = init || {};\n        if (signal)\n            signal.addEventListener('abort', () => controller.abort());\n        const timeout = setTimeout(() => controller.abort(), ms);\n        return (this.getRequestClient()\n            // use undefined this binding; fetch errors if bound to something else in browser/cloudflare\n            .fetch.call(undefined, url, { signal: controller.signal, ...options })\n            .finally(() => {\n            clearTimeout(timeout);\n        }));\n    }\n    getRequestClient() {\n        return { fetch: this.fetch };\n    }\n    shouldRetry(response) {\n        // Note this is not a standard header.\n        const shouldRetryHeader = response.headers.get('x-should-retry');\n        // If the server explicitly says whether or not to retry, obey.\n        if (shouldRetryHeader === 'true')\n            return true;\n        if (shouldRetryHeader === 'false')\n            return false;\n        // Retry on request timeouts.\n        if (response.status === 408)\n            return true;\n        // Retry on lock timeouts.\n        if (response.status === 409)\n            return true;\n        // Retry on rate limits.\n        if (response.status === 429)\n            return true;\n        // Retry internal errors.\n        if (response.status >= 500)\n            return true;\n        return false;\n    }\n    async retryRequest(options, retriesRemaining, responseHeaders) {\n        let timeoutMillis;\n        // Note the `retry-after-ms` header may not be standard, but is a good idea and we'd like proactive support for it.\n        const retryAfterMillisHeader = responseHeaders?.['retry-after-ms'];\n        if (retryAfterMillisHeader) {\n            const timeoutMs = parseFloat(retryAfterMillisHeader);\n            if (!Number.isNaN(timeoutMs)) {\n                timeoutMillis = timeoutMs;\n            }\n        }\n        // About the Retry-After header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After\n        const retryAfterHeader = responseHeaders?.['retry-after'];\n        if (retryAfterHeader && !timeoutMillis) {\n            const timeoutSeconds = parseFloat(retryAfterHeader);\n            if (!Number.isNaN(timeoutSeconds)) {\n                timeoutMillis = timeoutSeconds * 1000;\n            }\n            else {\n                timeoutMillis = Date.parse(retryAfterHeader) - Date.now();\n            }\n        }\n        // If the API asks us to wait a certain amount of time (and it's a reasonable amount),\n        // just do what it says, but otherwise calculate a default\n        if (!(timeoutMillis && 0 <= timeoutMillis && timeoutMillis < 60 * 1000)) {\n            const maxRetries = options.maxRetries ?? this.maxRetries;\n            timeoutMillis = this.calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries);\n        }\n        await sleep(timeoutMillis);\n        return this.makeRequest(options, retriesRemaining - 1);\n    }\n    calculateDefaultRetryTimeoutMillis(retriesRemaining, maxRetries) {\n        const initialRetryDelay = 0.5;\n        const maxRetryDelay = 8.0;\n        const numRetries = maxRetries - retriesRemaining;\n        // Apply exponential backoff, but not more than the max.\n        const sleepSeconds = Math.min(initialRetryDelay * Math.pow(2, numRetries), maxRetryDelay);\n        // Apply some jitter, take up to at most 25 percent of the retry time.\n        const jitter = 1 - Math.random() * 0.25;\n        return sleepSeconds * jitter * 1000;\n    }\n    getUserAgent() {\n        return `${this.constructor.name}/JS ${VERSION}`;\n    }\n}\nexport class AbstractPage {\n    constructor(client, response, body, options) {\n        _AbstractPage_client.set(this, void 0);\n        __classPrivateFieldSet(this, _AbstractPage_client, client, \"f\");\n        this.options = options;\n        this.response = response;\n        this.body = body;\n    }\n    hasNextPage() {\n        const items = this.getPaginatedItems();\n        if (!items.length)\n            return false;\n        return this.nextPageInfo() != null;\n    }\n    async getNextPage() {\n        const nextInfo = this.nextPageInfo();\n        if (!nextInfo) {\n            throw new OpenAIError('No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.');\n        }\n        const nextOptions = { ...this.options };\n        if ('params' in nextInfo && typeof nextOptions.query === 'object') {\n            nextOptions.query = { ...nextOptions.query, ...nextInfo.params };\n        }\n        else if ('url' in nextInfo) {\n            const params = [...Object.entries(nextOptions.query || {}), ...nextInfo.url.searchParams.entries()];\n            for (const [key, value] of params) {\n                nextInfo.url.searchParams.set(key, value);\n            }\n            nextOptions.query = undefined;\n            nextOptions.path = nextInfo.url.toString();\n        }\n        return await __classPrivateFieldGet(this, _AbstractPage_client, \"f\").requestAPIList(this.constructor, nextOptions);\n    }\n    async *iterPages() {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        let page = this;\n        yield page;\n        while (page.hasNextPage()) {\n            page = await page.getNextPage();\n            yield page;\n        }\n    }\n    async *[(_AbstractPage_client = new WeakMap(), Symbol.asyncIterator)]() {\n        for await (const page of this.iterPages()) {\n            for (const item of page.getPaginatedItems()) {\n                yield item;\n            }\n        }\n    }\n}\n/**\n * This subclass of Promise will resolve to an instantiated Page once the request completes.\n *\n * It also implements AsyncIterable to allow auto-paginating iteration on an unawaited list call, eg:\n *\n *    for await (const item of client.items.list()) {\n *      console.log(item)\n *    }\n */\nexport class PagePromise extends APIPromise {\n    constructor(client, request, Page) {\n        super(request, async (props) => new Page(client, props.response, await defaultParseResponse(props), props.options));\n    }\n    /**\n     * Allow auto-paginating iteration on an unawaited list call, eg:\n     *\n     *    for await (const item of client.items.list()) {\n     *      console.log(item)\n     *    }\n     */\n    async *[Symbol.asyncIterator]() {\n        const page = await this;\n        for await (const item of page) {\n            yield item;\n        }\n    }\n}\nexport const createResponseHeaders = (headers) => {\n    return new Proxy(Object.fromEntries(\n    // @ts-ignore\n    headers.entries()), {\n        get(target, name) {\n            const key = name.toString();\n            return target[key.toLowerCase()] || target[key];\n        },\n    });\n};\n// This is required so that we can determine if a given object matches the RequestOptions\n// type at runtime. While this requires duplication, it is enforced by the TypeScript\n// compiler such that any missing / extraneous keys will cause an error.\nconst requestOptionsKeys = {\n    method: true,\n    path: true,\n    query: true,\n    body: true,\n    headers: true,\n    maxRetries: true,\n    stream: true,\n    timeout: true,\n    httpAgent: true,\n    signal: true,\n    idempotencyKey: true,\n    __binaryResponse: true,\n    __streamClass: true,\n};\nexport const isRequestOptions = (obj) => {\n    return (typeof obj === 'object' &&\n        obj !== null &&\n        !isEmptyObj(obj) &&\n        Object.keys(obj).every((k) => hasOwn(requestOptionsKeys, k)));\n};\nconst getPlatformProperties = () => {\n    if (typeof Deno !== 'undefined' && Deno.build != null) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(Deno.build.os),\n            'X-Stainless-Arch': normalizeArch(Deno.build.arch),\n            'X-Stainless-Runtime': 'deno',\n            'X-Stainless-Runtime-Version': typeof Deno.version === 'string' ? Deno.version : Deno.version?.deno ?? 'unknown',\n        };\n    }\n    if (typeof EdgeRuntime !== 'undefined') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': `other:${EdgeRuntime}`,\n            'X-Stainless-Runtime': 'edge',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    // Check if Node.js\n    if (Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]') {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': normalizePlatform(process.platform),\n            'X-Stainless-Arch': normalizeArch(process.arch),\n            'X-Stainless-Runtime': 'node',\n            'X-Stainless-Runtime-Version': process.version,\n        };\n    }\n    const browserInfo = getBrowserInfo();\n    if (browserInfo) {\n        return {\n            'X-Stainless-Lang': 'js',\n            'X-Stainless-Package-Version': VERSION,\n            'X-Stainless-OS': 'Unknown',\n            'X-Stainless-Arch': 'unknown',\n            'X-Stainless-Runtime': `browser:${browserInfo.browser}`,\n            'X-Stainless-Runtime-Version': browserInfo.version,\n        };\n    }\n    // TODO add support for Cloudflare workers, etc.\n    return {\n        'X-Stainless-Lang': 'js',\n        'X-Stainless-Package-Version': VERSION,\n        'X-Stainless-OS': 'Unknown',\n        'X-Stainless-Arch': 'unknown',\n        'X-Stainless-Runtime': 'unknown',\n        'X-Stainless-Runtime-Version': 'unknown',\n    };\n};\n// Note: modified from https://github.com/JS-DevTools/host-environment/blob/b1ab79ecde37db5d6e163c050e54fe7d287d7c92/src/isomorphic.browser.ts\nfunction getBrowserInfo() {\n    if (typeof navigator === 'undefined' || !navigator) {\n        return null;\n    }\n    // NOTE: The order matters here!\n    const browserPatterns = [\n        { key: 'edge', pattern: /Edge(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /MSIE(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'ie', pattern: /Trident(?:.*rv\\:(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'chrome', pattern: /Chrome(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'firefox', pattern: /Firefox(?:\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?/ },\n        { key: 'safari', pattern: /(?:Version\\W+(\\d+)\\.(\\d+)(?:\\.(\\d+))?)?(?:\\W+Mobile\\S*)?\\W+Safari/ },\n    ];\n    // Find the FIRST matching browser\n    for (const { key, pattern } of browserPatterns) {\n        const match = pattern.exec(navigator.userAgent);\n        if (match) {\n            const major = match[1] || 0;\n            const minor = match[2] || 0;\n            const patch = match[3] || 0;\n            return { browser: key, version: `${major}.${minor}.${patch}` };\n        }\n    }\n    return null;\n}\nconst normalizeArch = (arch) => {\n    // Node docs:\n    // - https://nodejs.org/api/process.html#processarch\n    // Deno docs:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    if (arch === 'x32')\n        return 'x32';\n    if (arch === 'x86_64' || arch === 'x64')\n        return 'x64';\n    if (arch === 'arm')\n        return 'arm';\n    if (arch === 'aarch64' || arch === 'arm64')\n        return 'arm64';\n    if (arch)\n        return `other:${arch}`;\n    return 'unknown';\n};\nconst normalizePlatform = (platform) => {\n    // Node platforms:\n    // - https://nodejs.org/api/process.html#processplatform\n    // Deno platforms:\n    // - https://doc.deno.land/deno/stable/~/Deno.build\n    // - https://github.com/denoland/deno/issues/14799\n    platform = platform.toLowerCase();\n    // NOTE: this iOS check is untested and may not work\n    // Node does not work natively on IOS, there is a fork at\n    // https://github.com/nodejs-mobile/nodejs-mobile\n    // however it is unknown at the time of writing how to detect if it is running\n    if (platform.includes('ios'))\n        return 'iOS';\n    if (platform === 'android')\n        return 'Android';\n    if (platform === 'darwin')\n        return 'MacOS';\n    if (platform === 'win32')\n        return 'Windows';\n    if (platform === 'freebsd')\n        return 'FreeBSD';\n    if (platform === 'openbsd')\n        return 'OpenBSD';\n    if (platform === 'linux')\n        return 'Linux';\n    if (platform)\n        return `Other:${platform}`;\n    return 'Unknown';\n};\nlet _platformHeaders;\nconst getPlatformHeaders = () => {\n    return (_platformHeaders ?? (_platformHeaders = getPlatformProperties()));\n};\nexport const safeJSON = (text) => {\n    try {\n        return JSON.parse(text);\n    }\n    catch (err) {\n        return undefined;\n    }\n};\n// https://stackoverflow.com/a/19709846\nconst startsWithSchemeRegexp = new RegExp('^(?:[a-z]+:)?//', 'i');\nconst isAbsoluteURL = (url) => {\n    return startsWithSchemeRegexp.test(url);\n};\nexport const sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst validatePositiveInteger = (name, n) => {\n    if (typeof n !== 'number' || !Number.isInteger(n)) {\n        throw new OpenAIError(`${name} must be an integer`);\n    }\n    if (n < 0) {\n        throw new OpenAIError(`${name} must be a positive integer`);\n    }\n    return n;\n};\nexport const castToError = (err) => {\n    if (err instanceof Error)\n        return err;\n    return new Error(err);\n};\nexport const ensurePresent = (value) => {\n    if (value == null)\n        throw new OpenAIError(`Expected a value to be given but received ${value} instead.`);\n    return value;\n};\n/**\n * Read an environment variable.\n *\n * Trims beginning and trailing whitespace.\n *\n * Will return undefined if the environment variable doesn't exist or cannot be accessed.\n */\nexport const readEnv = (env) => {\n    if (typeof process !== 'undefined') {\n        return process.env?.[env]?.trim() ?? undefined;\n    }\n    if (typeof Deno !== 'undefined') {\n        return Deno.env?.get?.(env)?.trim();\n    }\n    return undefined;\n};\nexport const coerceInteger = (value) => {\n    if (typeof value === 'number')\n        return Math.round(value);\n    if (typeof value === 'string')\n        return parseInt(value, 10);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceFloat = (value) => {\n    if (typeof value === 'number')\n        return value;\n    if (typeof value === 'string')\n        return parseFloat(value);\n    throw new OpenAIError(`Could not coerce ${value} (type: ${typeof value}) into a number`);\n};\nexport const coerceBoolean = (value) => {\n    if (typeof value === 'boolean')\n        return value;\n    if (typeof value === 'string')\n        return value === 'true';\n    return Boolean(value);\n};\nexport const maybeCoerceInteger = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceInteger(value);\n};\nexport const maybeCoerceFloat = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceFloat(value);\n};\nexport const maybeCoerceBoolean = (value) => {\n    if (value === undefined) {\n        return undefined;\n    }\n    return coerceBoolean(value);\n};\n// https://stackoverflow.com/a/34491287\nexport function isEmptyObj(obj) {\n    if (!obj)\n        return true;\n    for (const _k in obj)\n        return false;\n    return true;\n}\n// https://eslint.org/docs/latest/rules/no-prototype-builtins\nexport function hasOwn(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n}\n/**\n * Copies headers from \"newHeaders\" onto \"targetHeaders\",\n * using lower-case for all properties,\n * ignoring any keys with undefined values,\n * and deleting any keys with null values.\n */\nfunction applyHeadersMut(targetHeaders, newHeaders) {\n    for (const k in newHeaders) {\n        if (!hasOwn(newHeaders, k))\n            continue;\n        const lowerKey = k.toLowerCase();\n        if (!lowerKey)\n            continue;\n        const val = newHeaders[k];\n        if (val === null) {\n            delete targetHeaders[lowerKey];\n        }\n        else if (val !== undefined) {\n            targetHeaders[lowerKey] = val;\n        }\n    }\n}\nexport function debug(action, ...args) {\n    if (typeof process !== 'undefined' && process?.env?.['DEBUG'] === 'true') {\n        console.log(`OpenAI:DEBUG:${action}`, ...args);\n    }\n}\n/**\n * https://stackoverflow.com/a/2117523\n */\nconst uuid4 = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16) | 0;\n        const v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\nexport const isRunningInBrowser = () => {\n    return (\n    // @ts-ignore\n    typeof window !== 'undefined' &&\n        // @ts-ignore\n        typeof window.document !== 'undefined' &&\n        // @ts-ignore\n        typeof navigator !== 'undefined');\n};\nexport const isHeadersProtocol = (headers) => {\n    return typeof headers?.get === 'function';\n};\nexport const getRequiredHeader = (headers, header) => {\n    const lowerCasedHeader = header.toLowerCase();\n    if (isHeadersProtocol(headers)) {\n        // to deal with the case where the header looks like Stainless-Event-Id\n        const intercapsHeader = header[0]?.toUpperCase() +\n            header.substring(1).replace(/([^\\w])(\\w)/g, (_m, g1, g2) => g1 + g2.toUpperCase());\n        for (const key of [header, lowerCasedHeader, header.toUpperCase(), intercapsHeader]) {\n            const value = headers.get(key);\n            if (value) {\n                return value;\n            }\n        }\n    }\n    for (const [key, value] of Object.entries(headers)) {\n        if (key.toLowerCase() === lowerCasedHeader) {\n            if (Array.isArray(value)) {\n                if (value.length <= 1)\n                    return value[0];\n                console.warn(`Received ${value.length} entries for the ${header} header, using the first entry.`);\n                return value[0];\n            }\n            return value;\n        }\n    }\n    throw new Error(`Could not find ${header} header`);\n};\n/**\n * Encodes a string to Base64 format.\n */\nexport const toBase64 = (str) => {\n    if (!str)\n        return '';\n    if (typeof Buffer !== 'undefined') {\n        return Buffer.from(str).toString('base64');\n    }\n    if (typeof btoa !== 'undefined') {\n        return btoa(str);\n    }\n    throw new OpenAIError('Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined');\n};\nexport function isObj(obj) {\n    return obj != null && typeof obj === 'object' && !Array.isArray(obj);\n}\n//# sourceMappingURL=core.mjs.map","// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { castToError } from \"./core.mjs\";\nexport class OpenAIError extends Error {\n}\nexport class APIError extends OpenAIError {\n    constructor(status, error, message, headers) {\n        super(`${APIError.makeMessage(status, error, message)}`);\n        this.status = status;\n        this.headers = headers;\n        this.request_id = headers?.['x-request-id'];\n        const data = error;\n        this.error = data;\n        this.code = data?.['code'];\n        this.param = data?.['param'];\n        this.type = data?.['type'];\n    }\n    static makeMessage(status, error, message) {\n        const msg = error?.message ?\n            typeof error.message === 'string' ?\n                error.message\n                : JSON.stringify(error.message)\n            : error ? JSON.stringify(error)\n                : message;\n        if (status && msg) {\n            return `${status} ${msg}`;\n        }\n        if (status) {\n            return `${status} status code (no body)`;\n        }\n        if (msg) {\n            return msg;\n        }\n        return '(no status code or body)';\n    }\n    static generate(status, errorResponse, message, headers) {\n        if (!status) {\n            return new APIConnectionError({ cause: castToError(errorResponse) });\n        }\n        const error = errorResponse?.['error'];\n        if (status === 400) {\n            return new BadRequestError(status, error, message, headers);\n        }\n        if (status === 401) {\n            return new AuthenticationError(status, error, message, headers);\n        }\n        if (status === 403) {\n            return new PermissionDeniedError(status, error, message, headers);\n        }\n        if (status === 404) {\n            return new NotFoundError(status, error, message, headers);\n        }\n        if (status === 409) {\n            return new ConflictError(status, error, message, headers);\n        }\n        if (status === 422) {\n            return new UnprocessableEntityError(status, error, message, headers);\n        }\n        if (status === 429) {\n            return new RateLimitError(status, error, message, headers);\n        }\n        if (status >= 500) {\n            return new InternalServerError(status, error, message, headers);\n        }\n        return new APIError(status, error, message, headers);\n    }\n}\nexport class APIUserAbortError extends APIError {\n    constructor({ message } = {}) {\n        super(undefined, undefined, message || 'Request was aborted.', undefined);\n        this.status = undefined;\n    }\n}\nexport class APIConnectionError extends APIError {\n    constructor({ message, cause }) {\n        super(undefined, undefined, message || 'Connection error.', undefined);\n        this.status = undefined;\n        // in some environments the 'cause' property is already declared\n        // @ts-ignore\n        if (cause)\n            this.cause = cause;\n    }\n}\nexport class APIConnectionTimeoutError extends APIConnectionError {\n    constructor({ message } = {}) {\n        super({ message: message ?? 'Request timed out.' });\n    }\n}\nexport class BadRequestError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 400;\n    }\n}\nexport class AuthenticationError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 401;\n    }\n}\nexport class PermissionDeniedError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 403;\n    }\n}\nexport class NotFoundError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 404;\n    }\n}\nexport class ConflictError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 409;\n    }\n}\nexport class UnprocessableEntityError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 422;\n    }\n}\nexport class RateLimitError extends APIError {\n    constructor() {\n        super(...arguments);\n        this.status = 429;\n    }\n}\nexport class InternalServerError extends APIError {\n}\n//# sourceMappingURL=error.mjs.map","export function isRunnableFunctionWithParse(fn) {\n    return typeof fn.parse === 'function';\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n *\n * @deprecated - please use ParsingToolFunction instead.\n */\nexport class ParsingFunction {\n    constructor(input) {\n        this.function = input.function;\n        this.parse = input.parse;\n        this.parameters = input.parameters;\n        this.description = input.description;\n        this.name = input.name;\n    }\n}\n/**\n * This is helper class for passing a `function` and `parse` where the `function`\n * argument type matches the `parse` return type.\n */\nexport class ParsingToolFunction {\n    constructor(input) {\n        this.type = 'function';\n        this.function = input;\n    }\n}\n//# sourceMappingURL=RunnableFunction.mjs.map","export const isAssistantMessage = (message) => {\n    return message?.role === 'assistant';\n};\nexport const isFunctionMessage = (message) => {\n    return message?.role === 'function';\n};\nexport const isToolMessage = (message) => {\n    return message?.role === 'tool';\n};\nexport function isPresent(obj) {\n    return obj != null;\n}\n//# sourceMappingURL=chatCompletionUtils.mjs.map","var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _AbstractChatCompletionRunner_instances, _AbstractChatCompletionRunner_connectedPromise, _AbstractChatCompletionRunner_resolveConnectedPromise, _AbstractChatCompletionRunner_rejectConnectedPromise, _AbstractChatCompletionRunner_endPromise, _AbstractChatCompletionRunner_resolveEndPromise, _AbstractChatCompletionRunner_rejectEndPromise, _AbstractChatCompletionRunner_listeners, _AbstractChatCompletionRunner_ended, _AbstractChatCompletionRunner_errored, _AbstractChatCompletionRunner_aborted, _AbstractChatCompletionRunner_catchingPromiseCreated, _AbstractChatCompletionRunner_getFinalContent, _AbstractChatCompletionRunner_getFinalMessage, _AbstractChatCompletionRunner_getFinalFunctionCall, _AbstractChatCompletionRunner_getFinalFunctionCallResult, _AbstractChatCompletionRunner_calculateTotalUsage, _AbstractChatCompletionRunner_handleError, _AbstractChatCompletionRunner_validateParams, _AbstractChatCompletionRunner_stringifyFunctionCallResult;\nimport { APIUserAbortError, OpenAIError } from 'openai/error';\nimport { isRunnableFunctionWithParse, } from \"./RunnableFunction.mjs\";\nimport { isAssistantMessage, isFunctionMessage, isToolMessage } from \"./chatCompletionUtils.mjs\";\nconst DEFAULT_MAX_CHAT_COMPLETIONS = 10;\nexport class AbstractChatCompletionRunner {\n    constructor() {\n        _AbstractChatCompletionRunner_instances.add(this);\n        this.controller = new AbortController();\n        _AbstractChatCompletionRunner_connectedPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveConnectedPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_rejectConnectedPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_endPromise.set(this, void 0);\n        _AbstractChatCompletionRunner_resolveEndPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_rejectEndPromise.set(this, () => { });\n        _AbstractChatCompletionRunner_listeners.set(this, {});\n        this._chatCompletions = [];\n        this.messages = [];\n        _AbstractChatCompletionRunner_ended.set(this, false);\n        _AbstractChatCompletionRunner_errored.set(this, false);\n        _AbstractChatCompletionRunner_aborted.set(this, false);\n        _AbstractChatCompletionRunner_catchingPromiseCreated.set(this, false);\n        _AbstractChatCompletionRunner_handleError.set(this, (error) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_errored, true, \"f\");\n            if (error instanceof Error && error.name === 'AbortError') {\n                error = new APIUserAbortError();\n            }\n            if (error instanceof APIUserAbortError) {\n                __classPrivateFieldSet(this, _AbstractChatCompletionRunner_aborted, true, \"f\");\n                return this._emit('abort', error);\n            }\n            if (error instanceof OpenAIError) {\n                return this._emit('error', error);\n            }\n            if (error instanceof Error) {\n                const openAIError = new OpenAIError(error.message);\n                // @ts-ignore\n                openAIError.cause = error;\n                return this._emit('error', openAIError);\n            }\n            return this._emit('error', new OpenAIError(String(error)));\n        });\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_connectedPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, reject, \"f\");\n        }), \"f\");\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_endPromise, new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_resolveEndPromise, resolve, \"f\");\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_rejectEndPromise, reject, \"f\");\n        }), \"f\");\n        // Don't let these promises cause unhandled rejection errors.\n        // we will manually cause an unhandled rejection error later\n        // if the user hasn't registered any error listener or called\n        // any promise-returning method.\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_connectedPromise, \"f\").catch(() => { });\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\").catch(() => { });\n    }\n    _run(executor) {\n        // Unfortunately if we call `executor()` immediately we get runtime errors about\n        // references to `this` before the `super()` constructor call returns.\n        setTimeout(() => {\n            executor().then(() => {\n                this._emitFinal();\n                this._emit('end');\n            }, __classPrivateFieldGet(this, _AbstractChatCompletionRunner_handleError, \"f\"));\n        }, 0);\n    }\n    _addChatCompletion(chatCompletion) {\n        this._chatCompletions.push(chatCompletion);\n        this._emit('chatCompletion', chatCompletion);\n        const message = chatCompletion.choices[0]?.message;\n        if (message)\n            this._addMessage(message);\n        return chatCompletion;\n    }\n    _addMessage(message, emit = true) {\n        if (!('content' in message))\n            message.content = null;\n        this.messages.push(message);\n        if (emit) {\n            this._emit('message', message);\n            if ((isFunctionMessage(message) || isToolMessage(message)) && message.content) {\n                // Note, this assumes that {role: 'tool', content: â€¦} is always the result of a call of tool of type=function.\n                this._emit('functionCallResult', message.content);\n            }\n            else if (isAssistantMessage(message) && message.function_call) {\n                this._emit('functionCall', message.function_call);\n            }\n            else if (isAssistantMessage(message) && message.tool_calls) {\n                for (const tool_call of message.tool_calls) {\n                    if (tool_call.type === 'function') {\n                        this._emit('functionCall', tool_call.function);\n                    }\n                }\n            }\n        }\n    }\n    _connected() {\n        if (this.ended)\n            return;\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveConnectedPromise, \"f\").call(this);\n        this._emit('connect');\n    }\n    get ended() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\");\n    }\n    get errored() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_errored, \"f\");\n    }\n    get aborted() {\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_aborted, \"f\");\n    }\n    abort() {\n        this.controller.abort();\n    }\n    /**\n     * Adds the listener function to the end of the listeners array for the event.\n     * No checks are made to see if the listener has already been added. Multiple calls passing\n     * the same combination of event and listener will result in the listener being added, and\n     * called, multiple times.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    on(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener });\n        return this;\n    }\n    /**\n     * Removes the specified listener from the listener array for the event.\n     * off() will remove, at most, one instance of a listener from the listener array. If any single\n     * listener has been added multiple times to the listener array for the specified event, then\n     * off() must be called multiple times to remove each instance.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    off(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (!listeners)\n            return this;\n        const index = listeners.findIndex((l) => l.listener === listener);\n        if (index >= 0)\n            listeners.splice(index, 1);\n        return this;\n    }\n    /**\n     * Adds a one-time listener function for the event. The next time the event is triggered,\n     * this listener is removed and then invoked.\n     * @returns this ChatCompletionStream, so that calls can be chained\n     */\n    once(event, listener) {\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] || (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = []);\n        listeners.push({ listener, once: true });\n        return this;\n    }\n    /**\n     * This is similar to `.once()`, but returns a Promise that resolves the next time\n     * the event is triggered, instead of calling a listener callback.\n     * @returns a Promise that resolves the next time given event is triggered,\n     * or rejects if an error is emitted.  (If you request the 'error' event,\n     * returns a promise that resolves with the error).\n     *\n     * Example:\n     *\n     *   const message = await stream.emitted('message') // rejects if the stream errors\n     */\n    emitted(event) {\n        return new Promise((resolve, reject) => {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n            if (event !== 'error')\n                this.once('error', reject);\n            this.once(event, resolve);\n        });\n    }\n    async done() {\n        __classPrivateFieldSet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, true, \"f\");\n        await __classPrivateFieldGet(this, _AbstractChatCompletionRunner_endPromise, \"f\");\n    }\n    /**\n     * @returns a promise that resolves with the final ChatCompletion, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletion.\n     */\n    async finalChatCompletion() {\n        await this.done();\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (!completion)\n            throw new OpenAIError('stream ended without producing a ChatCompletion');\n        return completion;\n    }\n    /**\n     * @returns a promise that resolves with the content of the final ChatCompletionMessage, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalContent() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the the final assistant ChatCompletionMessage response,\n     * or rejects if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalMessage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n    }\n    /**\n     * @returns a promise that resolves with the content of the final FunctionCall, or rejects\n     * if an error occurred or the stream ended prematurely without producing a ChatCompletionMessage.\n     */\n    async finalFunctionCall() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n    }\n    async finalFunctionCallResult() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n    }\n    async totalUsage() {\n        await this.done();\n        return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this);\n    }\n    allChatCompletions() {\n        return [...this._chatCompletions];\n    }\n    _emit(event, ...args) {\n        // make sure we don't emit any events after end\n        if (__classPrivateFieldGet(this, _AbstractChatCompletionRunner_ended, \"f\")) {\n            return;\n        }\n        if (event === 'end') {\n            __classPrivateFieldSet(this, _AbstractChatCompletionRunner_ended, true, \"f\");\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_resolveEndPromise, \"f\").call(this);\n        }\n        const listeners = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event];\n        if (listeners) {\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_listeners, \"f\")[event] = listeners.filter((l) => !l.once);\n            listeners.forEach(({ listener }) => listener(...args));\n        }\n        if (event === 'abort') {\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n            return;\n        }\n        if (event === 'error') {\n            // NOTE: _emit('error', error) should only be called from #handleError().\n            const error = args[0];\n            if (!__classPrivateFieldGet(this, _AbstractChatCompletionRunner_catchingPromiseCreated, \"f\") && !listeners?.length) {\n                // Trigger an unhandled rejection if the user hasn't registered any error handlers.\n                // If you are seeing stack traces here, make sure to handle errors via either:\n                // - runner.on('error', () => ...)\n                // - await runner.done()\n                // - await runner.finalChatCompletion()\n                // - etc.\n                Promise.reject(error);\n            }\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectConnectedPromise, \"f\").call(this, error);\n            __classPrivateFieldGet(this, _AbstractChatCompletionRunner_rejectEndPromise, \"f\").call(this, error);\n            this._emit('end');\n        }\n    }\n    _emitFinal() {\n        const completion = this._chatCompletions[this._chatCompletions.length - 1];\n        if (completion)\n            this._emit('finalChatCompletion', completion);\n        const finalMessage = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this);\n        if (finalMessage)\n            this._emit('finalMessage', finalMessage);\n        const finalContent = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalContent).call(this);\n        if (finalContent)\n            this._emit('finalContent', finalContent);\n        const finalFunctionCall = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCall).call(this);\n        if (finalFunctionCall)\n            this._emit('finalFunctionCall', finalFunctionCall);\n        const finalFunctionCallResult = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalFunctionCallResult).call(this);\n        if (finalFunctionCallResult != null)\n            this._emit('finalFunctionCallResult', finalFunctionCallResult);\n        if (this._chatCompletions.some((c) => c.usage)) {\n            this._emit('totalUsage', __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_calculateTotalUsage).call(this));\n        }\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_validateParams).call(this, params);\n        const chatCompletion = await completions.create({ ...params, stream: false }, { ...options, signal: this.controller.signal });\n        this._connected();\n        return this._addChatCompletion(chatCompletion);\n    }\n    async _runChatCompletion(completions, params, options) {\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        return await this._createChatCompletion(completions, params, options);\n    }\n    async _runFunctions(completions, params, options) {\n        const role = 'function';\n        const { function_call = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof function_call !== 'string' && function_call?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.functions) {\n            functionsByName[f.name || f.function.name] = f;\n        }\n        const functions = params.functions.map((f) => ({\n            name: f.name || f.function.name,\n            parameters: f.parameters,\n            description: f.description,\n        }));\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                function_call,\n                functions,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.function_call)\n                return;\n            const { name, arguments: args } = message.function_call;\n            const fn = functionsByName[name];\n            if (!fn) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. Available options are: ${functions\n                    .map((f) => JSON.stringify(f.name))\n                    .join(', ')}. Please try again`;\n                this._addMessage({ role, name, content });\n                continue;\n            }\n            else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                const content = `Invalid function_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                this._addMessage({ role, name, content });\n                continue;\n            }\n            let parsed;\n            try {\n                parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n            }\n            catch (error) {\n                this._addMessage({\n                    role,\n                    name,\n                    content: error instanceof Error ? error.message : String(error),\n                });\n                continue;\n            }\n            // @ts-expect-error it can't rule out `never` type.\n            const rawContent = await fn.function(parsed, this);\n            const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n            this._addMessage({ role, name, content });\n            if (singleFunctionToCall)\n                return;\n        }\n    }\n    async _runTools(completions, params, options) {\n        const role = 'tool';\n        const { tool_choice = 'auto', stream, ...restParams } = params;\n        const singleFunctionToCall = typeof tool_choice !== 'string' && tool_choice?.function?.name;\n        const { maxChatCompletions = DEFAULT_MAX_CHAT_COMPLETIONS } = options || {};\n        const functionsByName = {};\n        for (const f of params.tools) {\n            if (f.type === 'function') {\n                functionsByName[f.function.name || f.function.function.name] = f.function;\n            }\n        }\n        const tools = 'tools' in params ?\n            params.tools.map((t) => t.type === 'function' ?\n                {\n                    type: 'function',\n                    function: {\n                        name: t.function.name || t.function.function.name,\n                        parameters: t.function.parameters,\n                        description: t.function.description,\n                    },\n                }\n                : t)\n            : undefined;\n        for (const message of params.messages) {\n            this._addMessage(message, false);\n        }\n        for (let i = 0; i < maxChatCompletions; ++i) {\n            const chatCompletion = await this._createChatCompletion(completions, {\n                ...restParams,\n                tool_choice,\n                tools,\n                messages: [...this.messages],\n            }, options);\n            const message = chatCompletion.choices[0]?.message;\n            if (!message) {\n                throw new OpenAIError(`missing message in ChatCompletion response`);\n            }\n            if (!message.tool_calls) {\n                return;\n            }\n            for (const tool_call of message.tool_calls) {\n                if (tool_call.type !== 'function')\n                    continue;\n                const tool_call_id = tool_call.id;\n                const { name, arguments: args } = tool_call.function;\n                const fn = functionsByName[name];\n                if (!fn) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. Available options are: ${tools\n                        .map((f) => JSON.stringify(f.function.name))\n                        .join(', ')}. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                else if (singleFunctionToCall && singleFunctionToCall !== name) {\n                    const content = `Invalid tool_call: ${JSON.stringify(name)}. ${JSON.stringify(singleFunctionToCall)} requested. Please try again`;\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                let parsed;\n                try {\n                    parsed = isRunnableFunctionWithParse(fn) ? await fn.parse(args) : args;\n                }\n                catch (error) {\n                    const content = error instanceof Error ? error.message : String(error);\n                    this._addMessage({ role, tool_call_id, content });\n                    continue;\n                }\n                // @ts-expect-error it can't rule out `never` type.\n                const rawContent = await fn.function(parsed, this);\n                const content = __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_stringifyFunctionCallResult).call(this, rawContent);\n                this._addMessage({ role, tool_call_id, content });\n                if (singleFunctionToCall) {\n                    return;\n                }\n            }\n        }\n        return;\n    }\n}\n_AbstractChatCompletionRunner_connectedPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectConnectedPromise = new WeakMap(), _AbstractChatCompletionRunner_endPromise = new WeakMap(), _AbstractChatCompletionRunner_resolveEndPromise = new WeakMap(), _AbstractChatCompletionRunner_rejectEndPromise = new WeakMap(), _AbstractChatCompletionRunner_listeners = new WeakMap(), _AbstractChatCompletionRunner_ended = new WeakMap(), _AbstractChatCompletionRunner_errored = new WeakMap(), _AbstractChatCompletionRunner_aborted = new WeakMap(), _AbstractChatCompletionRunner_catchingPromiseCreated = new WeakMap(), _AbstractChatCompletionRunner_handleError = new WeakMap(), _AbstractChatCompletionRunner_instances = new WeakSet(), _AbstractChatCompletionRunner_getFinalContent = function _AbstractChatCompletionRunner_getFinalContent() {\n    return __classPrivateFieldGet(this, _AbstractChatCompletionRunner_instances, \"m\", _AbstractChatCompletionRunner_getFinalMessage).call(this).content ?? null;\n}, _AbstractChatCompletionRunner_getFinalMessage = function _AbstractChatCompletionRunner_getFinalMessage() {\n    let i = this.messages.length;\n    while (i-- > 0) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message)) {\n            return { ...message, content: message.content ?? null };\n        }\n    }\n    throw new OpenAIError('stream ended without producing a ChatCompletionMessage with role=assistant');\n}, _AbstractChatCompletionRunner_getFinalFunctionCall = function _AbstractChatCompletionRunner_getFinalFunctionCall() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isAssistantMessage(message) && message?.function_call) {\n            return message.function_call;\n        }\n        if (isAssistantMessage(message) && message?.tool_calls?.length) {\n            return message.tool_calls.at(-1)?.function;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_getFinalFunctionCallResult = function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {\n    for (let i = this.messages.length - 1; i >= 0; i--) {\n        const message = this.messages[i];\n        if (isFunctionMessage(message) && message.content != null) {\n            return message.content;\n        }\n        if (isToolMessage(message) &&\n            message.content != null &&\n            this.messages.some((x) => x.role === 'assistant' &&\n                x.tool_calls?.some((y) => y.type === 'function' && y.id === message.tool_call_id))) {\n            return message.content;\n        }\n    }\n    return;\n}, _AbstractChatCompletionRunner_calculateTotalUsage = function _AbstractChatCompletionRunner_calculateTotalUsage() {\n    const total = {\n        completion_tokens: 0,\n        prompt_tokens: 0,\n        total_tokens: 0,\n    };\n    for (const { usage } of this._chatCompletions) {\n        if (usage) {\n            total.completion_tokens += usage.completion_tokens;\n            total.prompt_tokens += usage.prompt_tokens;\n            total.total_tokens += usage.total_tokens;\n        }\n    }\n    return total;\n}, _AbstractChatCompletionRunner_validateParams = function _AbstractChatCompletionRunner_validateParams(params) {\n    if (params.n != null && params.n > 1) {\n        throw new OpenAIError('ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.');\n    }\n}, _AbstractChatCompletionRunner_stringifyFunctionCallResult = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(rawContent) {\n    return (typeof rawContent === 'string' ? rawContent\n        : rawContent === undefined ? 'undefined'\n            : JSON.stringify(rawContent));\n};\n//# sourceMappingURL=AbstractChatCompletionRunner.mjs.map","var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar _ChatCompletionStream_instances, _ChatCompletionStream_currentChatCompletionSnapshot, _ChatCompletionStream_beginRequest, _ChatCompletionStream_addChunk, _ChatCompletionStream_endRequest, _ChatCompletionStream_accumulateChatCompletion;\nimport { OpenAIError, APIUserAbortError } from 'openai/error';\nimport { AbstractChatCompletionRunner, } from \"./AbstractChatCompletionRunner.mjs\";\nimport { Stream } from 'openai/streaming';\nexport class ChatCompletionStream extends AbstractChatCompletionRunner {\n    constructor() {\n        super(...arguments);\n        _ChatCompletionStream_instances.add(this);\n        _ChatCompletionStream_currentChatCompletionSnapshot.set(this, void 0);\n    }\n    get currentChatCompletionSnapshot() {\n        return __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n    }\n    /**\n     * Intended for use on the frontend, consuming a stream produced with\n     * `.toReadableStream()` on the backend.\n     *\n     * Note that messages sent to the model do not appear in `.on('message')`\n     * in this context.\n     */\n    static fromReadableStream(stream) {\n        const runner = new ChatCompletionStream();\n        runner._run(() => runner._fromReadableStream(stream));\n        return runner;\n    }\n    static createChatCompletion(completions, params, options) {\n        const runner = new ChatCompletionStream();\n        runner._run(() => runner._runChatCompletion(completions, { ...params, stream: true }, { ...options, headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'stream' } }));\n        return runner;\n    }\n    async _createChatCompletion(completions, params, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        const stream = await completions.create({ ...params, stream: true }, { ...options, signal: this.controller.signal });\n        this._connected();\n        for await (const chunk of stream) {\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    async _fromReadableStream(readableStream, options) {\n        const signal = options?.signal;\n        if (signal) {\n            if (signal.aborted)\n                this.controller.abort();\n            signal.addEventListener('abort', () => this.controller.abort());\n        }\n        __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_beginRequest).call(this);\n        this._connected();\n        const stream = Stream.fromReadableStream(readableStream, this.controller);\n        let chatId;\n        for await (const chunk of stream) {\n            if (chatId && chatId !== chunk.id) {\n                // A new request has been made.\n                this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n            }\n            __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_addChunk).call(this, chunk);\n            chatId = chunk.id;\n        }\n        if (stream.controller.signal?.aborted) {\n            throw new APIUserAbortError();\n        }\n        return this._addChatCompletion(__classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_endRequest).call(this));\n    }\n    [(_ChatCompletionStream_currentChatCompletionSnapshot = new WeakMap(), _ChatCompletionStream_instances = new WeakSet(), _ChatCompletionStream_beginRequest = function _ChatCompletionStream_beginRequest() {\n        if (this.ended)\n            return;\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n    }, _ChatCompletionStream_addChunk = function _ChatCompletionStream_addChunk(chunk) {\n        if (this.ended)\n            return;\n        const completion = __classPrivateFieldGet(this, _ChatCompletionStream_instances, \"m\", _ChatCompletionStream_accumulateChatCompletion).call(this, chunk);\n        this._emit('chunk', chunk, completion);\n        const delta = chunk.choices[0]?.delta?.content;\n        const snapshot = completion.choices[0]?.message;\n        if (delta != null && snapshot?.role === 'assistant' && snapshot?.content) {\n            this._emit('content', delta, snapshot.content);\n        }\n    }, _ChatCompletionStream_endRequest = function _ChatCompletionStream_endRequest() {\n        if (this.ended) {\n            throw new OpenAIError(`stream has ended, this shouldn't happen`);\n        }\n        const snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        if (!snapshot) {\n            throw new OpenAIError(`request ended without sending any chunks`);\n        }\n        __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, undefined, \"f\");\n        return finalizeChatCompletion(snapshot);\n    }, _ChatCompletionStream_accumulateChatCompletion = function _ChatCompletionStream_accumulateChatCompletion(chunk) {\n        var _a, _b, _c;\n        let snapshot = __classPrivateFieldGet(this, _ChatCompletionStream_currentChatCompletionSnapshot, \"f\");\n        const { choices, ...rest } = chunk;\n        if (!snapshot) {\n            snapshot = __classPrivateFieldSet(this, _ChatCompletionStream_currentChatCompletionSnapshot, {\n                ...rest,\n                choices: [],\n            }, \"f\");\n        }\n        else {\n            Object.assign(snapshot, rest);\n        }\n        for (const { delta, finish_reason, index, logprobs = null, ...other } of chunk.choices) {\n            let choice = snapshot.choices[index];\n            if (!choice) {\n                choice = snapshot.choices[index] = { finish_reason, index, message: {}, logprobs, ...other };\n            }\n            if (logprobs) {\n                if (!choice.logprobs) {\n                    choice.logprobs = Object.assign({}, logprobs);\n                }\n                else {\n                    const { content, ...rest } = logprobs;\n                    Object.assign(choice.logprobs, rest);\n                    if (content) {\n                        (_a = choice.logprobs).content ?? (_a.content = []);\n                        choice.logprobs.content.push(...content);\n                    }\n                }\n            }\n            if (finish_reason)\n                choice.finish_reason = finish_reason;\n            Object.assign(choice, other);\n            if (!delta)\n                continue; // Shouldn't happen; just in case.\n            const { content, function_call, role, tool_calls, ...rest } = delta;\n            Object.assign(choice.message, rest);\n            if (content)\n                choice.message.content = (choice.message.content || '') + content;\n            if (role)\n                choice.message.role = role;\n            if (function_call) {\n                if (!choice.message.function_call) {\n                    choice.message.function_call = function_call;\n                }\n                else {\n                    if (function_call.name)\n                        choice.message.function_call.name = function_call.name;\n                    if (function_call.arguments) {\n                        (_b = choice.message.function_call).arguments ?? (_b.arguments = '');\n                        choice.message.function_call.arguments += function_call.arguments;\n                    }\n                }\n            }\n            if (tool_calls) {\n                if (!choice.message.tool_calls)\n                    choice.message.tool_calls = [];\n                for (const { index, id, type, function: fn, ...rest } of tool_calls) {\n                    const tool_call = ((_c = choice.message.tool_calls)[index] ?? (_c[index] = {}));\n                    Object.assign(tool_call, rest);\n                    if (id)\n                        tool_call.id = id;\n                    if (type)\n                        tool_call.type = type;\n                    if (fn)\n                        tool_call.function ?? (tool_call.function = { arguments: '' });\n                    if (fn?.name)\n                        tool_call.function.name = fn.name;\n                    if (fn?.arguments)\n                        tool_call.function.arguments += fn.arguments;\n                }\n            }\n        }\n        return snapshot;\n    }, Symbol.asyncIterator)]() {\n        const pushQueue = [];\n        const readQueue = [];\n        let done = false;\n        this.on('chunk', (chunk) => {\n            const reader = readQueue.shift();\n            if (reader) {\n                reader.resolve(chunk);\n            }\n            else {\n                pushQueue.push(chunk);\n            }\n        });\n        this.on('end', () => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.resolve(undefined);\n            }\n            readQueue.length = 0;\n        });\n        this.on('abort', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        this.on('error', (err) => {\n            done = true;\n            for (const reader of readQueue) {\n                reader.reject(err);\n            }\n            readQueue.length = 0;\n        });\n        return {\n            next: async () => {\n                if (!pushQueue.length) {\n                    if (done) {\n                        return { value: undefined, done: true };\n                    }\n                    return new Promise((resolve, reject) => readQueue.push({ resolve, reject })).then((chunk) => (chunk ? { value: chunk, done: false } : { value: undefined, done: true }));\n                }\n                const chunk = pushQueue.shift();\n                return { value: chunk, done: false };\n            },\n            return: async () => {\n                this.abort();\n                return { value: undefined, done: true };\n            },\n        };\n    }\n    toReadableStream() {\n        const stream = new Stream(this[Symbol.asyncIterator].bind(this), this.controller);\n        return stream.toReadableStream();\n    }\n}\nfunction finalizeChatCompletion(snapshot) {\n    const { id, choices, created, model, system_fingerprint, ...rest } = snapshot;\n    return {\n        ...rest,\n        id,\n        choices: choices.map(({ message, finish_reason, index, logprobs, ...choiceRest }) => {\n            if (!finish_reason)\n                throw new OpenAIError(`missing finish_reason for choice ${index}`);\n            const { content = null, function_call, tool_calls, ...messageRest } = message;\n            const role = message.role; // this is what we expect; in theory it could be different which would make our types a slight lie but would be fine.\n            if (!role)\n                throw new OpenAIError(`missing role for choice ${index}`);\n            if (function_call) {\n                const { arguments: args, name } = function_call;\n                if (args == null)\n                    throw new OpenAIError(`missing function_call.arguments for choice ${index}`);\n                if (!name)\n                    throw new OpenAIError(`missing function_call.name for choice ${index}`);\n                return {\n                    ...choiceRest,\n                    message: { content, function_call: { arguments: args, name }, role },\n                    finish_reason,\n                    index,\n                    logprobs,\n                };\n            }\n            if (tool_calls) {\n                return {\n                    ...choiceRest,\n                    index,\n                    finish_reason,\n                    logprobs,\n                    message: {\n                        ...messageRest,\n                        role,\n                        content,\n                        tool_calls: tool_calls.map((tool_call, i) => {\n                            const { function: fn, type, id, ...toolRest } = tool_call;\n                            const { arguments: args, name, ...fnRest } = fn || {};\n                            if (id == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].id\\n${str(snapshot)}`);\n                            if (type == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].type\\n${str(snapshot)}`);\n                            if (name == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.name\\n${str(snapshot)}`);\n                            if (args == null)\n                                throw new OpenAIError(`missing choices[${index}].tool_calls[${i}].function.arguments\\n${str(snapshot)}`);\n                            return { ...toolRest, id, type, function: { ...fnRest, name, arguments: args } };\n                        }),\n                    },\n                };\n            }\n            return {\n                ...choiceRest,\n                message: { ...messageRest, content, role },\n                finish_reason,\n                index,\n                logprobs,\n            };\n        }),\n        created,\n        model,\n        object: 'chat.completion',\n        ...(system_fingerprint ? { system_fingerprint } : {}),\n    };\n}\nfunction str(x) {\n    return JSON.stringify(x);\n}\n//# sourceMappingURL=ChatCompletionStream.mjs.map","export class ChatLog {\n  private conversation_log: { role: string; content: string }[]; // keeps track of previous conversation to send to GPT\n  private final_data: { role: string; content: string; time: number; keyPressLog?: any }[]; // keeps track of data to print\n  private prompt: string;\n\n  constructor() {\n    this.conversation_log = [];\n    this.final_data = [];\n  }\n\n  setPrompt(prompt) {\n    const time = Math.round(performance.now());\n\n    const newMessage = {\n      role: \"system\",\n      content: prompt,\n      time: time,\n    };\n\n    this.final_data.push(newMessage);\n    this.prompt = prompt;\n  }\n\n  getPrompt() {\n    const newElement = { role: \"system\", content: this.prompt };\n    const tempConversationLog = [...this.conversation_log, newElement];\n    return tempConversationLog;\n  }\n\n  getChatLogs() {\n    return this.final_data;\n  }\n\n  // updates current prompt, possibly replace to pass in objct\n  updateConversationLog(content, role, keyPressLog?, message?): void {\n    if (role === \"system\")\n      console.log(\n        \"WARNING: this case is not caught and is incorrectly trigerring outadated method\",\n        \"content:\",\n        content,\n        \"role:\",\n        role\n      );\n\n    const time = Math.round(performance.now());\n    const newPrompt = { role: role, content: content };\n    this.conversation_log.push(newPrompt);\n\n    const newMessage = {\n      role: role,\n      content: content,\n      time: time,\n      ...(message ? { message: message } : {}),\n      ...(keyPressLog ? { keyPressLog: keyPressLog } : {}),\n    };\n    this.final_data.push(newMessage);\n  }\n\n  // logMessage adds message to final data but not conversatin log\n  logMessage(message, role) {\n    const time = Math.round(performance.now());\n\n    const newMessage = {\n      role: role,\n      content: message,\n      time: time,\n    };\n    this.final_data.push(newMessage);\n  }\n\n  // Chain Condition -- have it be a list of the chain and what happens before and after\n  // called when temporary chainPrompting\n  cleanConversation(): {}[] {\n    const res = this.conversation_log.filter((message: any, index: number, array: any[]) => {\n      if (\"role\" in message && message[\"role\"] === \"system\") {\n        return false;\n      }\n      // Exclude the last message because will be user message - only want existing conversation\n      if (index === array.length - 1) {\n        return false;\n      }\n      return true;\n    });\n\n    return res;\n  }\n\n  // call when adding a new prompt\n  cleanSystem(prompt, message?) {\n    // cleans existing prompts\n    const res = this.conversation_log.filter((message: any) => {\n      if (\"role\" in message && message[\"role\"] === \"system\") {\n        return false;\n      }\n      return true;\n    });\n\n    this.conversation_log = res;\n\n    this.setPrompt(prompt);\n    return this.getPrompt();\n  }\n}\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\nimport { ChatCompletionStream } from \"openai/lib/ChatCompletionStream\";\n\nimport { ChatLog } from \"./ChatLog\";\n\nconst info = <const>{\n  name: \"chat\",\n  parameters: {\n    // BOOL, STRING, INT, FLOAT, FUNCTION, KEY, KEYS, SELECT, HTML_STRING, IMAGE, AUDIO, VIDEO, OBJECT, COMPLEX\n    ai_prompt: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    ai_model: {\n      type: ParameterType.STRING,\n      default: \"gpt-4o\",\n    },\n    chat_field_placeholder: {\n      type: ParameterType.STRING,\n      default: \"Type your message here...\",\n    },\n    // bot_name: {\n    //   type: ParameterType.STRING,\n    //   default: undefined,\n    // },\n    continue_button: {\n      type: ParameterType.COMPLEX,\n      default: { message_trigger: 0 },\n      nested: {\n        timer_trigger: {\n          type: ParameterType.INT,\n        },\n        message_trigger: {\n          type: ParameterType.INT,\n        },\n        message: {\n          type: ParameterType.STRING,\n        },\n      },\n    },\n    additional_prompts: {\n      type: ParameterType.COMPLEX,\n      array: true,\n      default: undefined,\n      nested: {\n        message: {\n          // messages to display on screen\n          type: ParameterType.STRING,\n          default: \"\",\n        },\n        prompt: {\n          // prompting to pass in\n          type: ParameterType.STRING,\n          default: null,\n        },\n        role: {\n          // \"prompt\" (\"system-prompt\"), \"chatbot-message\",\"chatbot-prompt\"\n          type: ParameterType.STRING,\n          default: \"system-prompt\",\n        },\n        message_trigger: {\n          type: ParameterType.INT,\n          default: null,\n        },\n        timer_trigger: {\n          type: ParameterType.INT,\n          default: null,\n        },\n      },\n    },\n    // when triggers it doesn't stop, do we want to give it a stop?\n    prompt_chain: {\n      type: ParameterType.COMPLEX,\n      default: [],\n      nested: {\n        prompts: {\n          type: ParameterType.STRING,\n          array: true,\n          default: [],\n        },\n        message_trigger: {\n          type: ParameterType.INT,\n          default: 99999999999999999999999, // silencing error message\n        },\n        timer_trigger: {\n          type: ParameterType.INT,\n          default: null,\n        },\n      },\n    },\n    selection_prompt: {\n      type: ParameterType.COMPLEX,\n      default: {},\n      nested: {\n        prompts: {\n          type: ParameterType.STRING,\n          array: true,\n          default: [],\n        },\n        selection_prompt: {\n          type: ParameterType.STRING,\n          default: \"Select one of these prompts:\",\n        },\n        message_trigger: {\n          type: ParameterType.INT,\n          default: 99999999999999999999999, // silencing error message\n        },\n        timer_trigger: {\n          type: ParameterType.INT,\n          default: null,\n        },\n      },\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **chat**\n *\n * Chat interface for running experiments using LLMs\n *\n * @author Victor Zhang and Niranjan Baskaran\n * @see {@link https://github.com/jspsych/jspsych-contrib/packages/plugin-chat/README.md}}\n */\nclass ChatPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  private researcher_prompts: {}[]; // keeps track of researcher's prompts that need to be displayed\n  private prompt_chain: {};\n  private selection_prompt: {};\n  private messages_sent: number; // notes number of messages sent to calculate prompts\n  private timer_start: number; // notes beginning of session in order to calculate prompts\n  private ai_model: string; // keeps track of model\n  private chatLog: ChatLog;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.initializeTrialVariables(trial);\n    // var botTitle = trial.bot_name\n    //   ? `<div class=\"bot-title\">\n    //   <h1 class=\"bot-title-text\">` +\n    //     trial.bot_name +\n    //     `</h1>\n    // </div>`\n    //   : \"\";\n\n    var html =\n      `<div class=\"chat-page\">` +\n      // botTitle +\n      `<div class=\"chat-container\">\n        <div class=\"chat-box\" id=\"chat-box\"></div>\n\n        <div class=\"chat-fields\"> \n          <textarea type=\"text\" id=\"user-input\" placeholder=\"` +\n      trial.chat_field_placeholder +\n      `\"></textarea>\n          <button id=\"send-btn\">Send</button>\n          <button id=\"continue-btn\" style=\"display: none;\">Continue</button>\n        </div>\n      </div>\n    </div>`;\n\n    display_element.innerHTML = html;\n    document.body.style.backgroundColor = \"#9c9ad05c\";\n    const chatBox = display_element.querySelector(\"#chat-box\") as HTMLElement;\n    const userInput = display_element.querySelector(\"#user-input\") as HTMLInputElement;\n    const sendButton = display_element.querySelector(\"#send-btn\") as HTMLButtonElement;\n    const continueButton = display_element.querySelector(\"#continue-btn\") as HTMLButtonElement;\n    var keyPressLog = [];\n\n    // Setting up Trial Logic\n    // Function to handle logic of sending user message, and data collection\n    const sendMessage = async () => {\n      const message = userInput.value.trim();\n      this.addMessage(\"user\", message, chatBox, (keyPressLog = keyPressLog));\n      keyPressLog = [];\n      userInput.value = \"\";\n\n      // prompt chaining or simple requests\n      if (message !== \"\" && this.selection_prompt && this.checkCondition(\"selection_prompt\"))\n        await this.selectionPrompt(message, chatBox);\n      else if (message !== \"\" && this.prompt_chain && this.checkCondition(\"prompt_chain\")) {\n        await this.chainPrompts(message, chatBox);\n      } else if (message !== \"\") {\n        await this.updateAndProcessGPT(chatBox);\n      }\n\n      chatBox.scrollTop = chatBox.scrollHeight;\n      // inc messages and check researcher prompts\n      this.messages_sent += 1;\n      this.checkResearcherPrompts(chatBox, continueButton);\n    };\n\n    // Event listener for send button click\n    sendButton.addEventListener(\"click\", function (event) {\n      if (userInput.value.trim() != \"\") {\n        sendMessage();\n      }\n    });\n\n    // Event listener for Enter key press\n    userInput.addEventListener(\"keydown\", function (event) {\n      if (event.key === \"Enter\") {\n        if (!event.shiftKey) {\n          event.preventDefault(); // Prevent default behavior of adding new line\n          sendMessage();\n        }\n      }\n    });\n\n    // Event listener for all keypresses on userInput\n    userInput.addEventListener(\"keydown\", function (event) {\n      keyPressLog.push(event.key);\n    });\n\n    continueButton.addEventListener(\"click\", () => {\n      this.jsPsych.finishTrial({\n        logs: this.chatLog.getChatLogs(),\n      });\n    });\n\n    // Setting up Trial\n    this.checkResearcherPrompts(chatBox, continueButton);\n  }\n\n  // includes error checking to minimize error checking later\n  initializeTrialVariables(trial: TrialType<Info>) {\n    this.timer_start = performance.now();\n    this.chatLog = new ChatLog();\n    this.messages_sent = 0;\n    this.ai_model = trial.ai_model;\n\n    // this.chatLog.updateConversationLog(trial.ai_prompt, \"system\");\n    this.chatLog.setPrompt(trial.ai_prompt); // sets researcher prompts and removes any that can't trigger\n\n    this.researcher_prompts = trial.additional_prompts\n      ? trial.additional_prompts.filter((researcher_prompt) => {\n          if (\n            researcher_prompt[\"message_trigger\"] === null &&\n            researcher_prompt[\"timer_trigger\"] === null\n          ) {\n            console.error(\"Missing required property in researcher prompt:\", researcher_prompt);\n            return false;\n          }\n          return true;\n        })\n      : [];\n\n    // sets continue button and removes any that can't trigger\n    const continue_button = trial.continue_button;\n    if (continue_button[\"message_trigger\"] === null && continue_button[\"timer_trigger\"] === null) {\n      console.error(\"Missing required trigger property in continue prompt, will never display\");\n    } else {\n      continue_button[\"role\"] = \"continue\";\n      this.researcher_prompts.push(continue_button);\n    }\n\n    // sets prompt chain and removes any that can't trigger\n    if (\n      trial.prompt_chain &&\n      trial.prompt_chain[\"message_trigger\"] === null &&\n      trial.prompt_chain[\"timer_trigger\"] === null\n    ) {\n      console.error(\"Missing required trigger property in prompt_chain, will never trigger\");\n    } else {\n      this.prompt_chain = trial.prompt_chain;\n    }\n\n    if (\n      trial.selection_prompt &&\n      trial.selection_prompt[\"message_trigger\"] === null &&\n      trial.selection_prompt[\"timer_trigger\"] === null\n    ) {\n      console.error(\"Missing required trigger property in selection_prompt, will never trigger\");\n    } else {\n      this.selection_prompt = trial.selection_prompt;\n    }\n  }\n\n  // Call to backend, newMessage is the document item to print (optional because when chaining don't want them to display)\n  async fetchGPT(messages, chatBox, newMessage?) {\n    try {\n      var response;\n      if (window.location.href.includes(\"127.0.0.1\")) {\n        // local chat vs hosting\n        response = await fetch(\"http://localhost:3000/api/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ messages, ai_model: this.ai_model }), // Corrected JSON structure\n        });\n      } else {\n        response = await fetch(\"/api/chat\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ messages, ai_model: this.ai_model }), // Corrected JSON structure\n        });\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const runner = ChatCompletionStream.fromReadableStream(response.body);\n\n      if (newMessage) {\n        // prints to screen if specified, otherwise only fetch\n        runner.on(\"content\", (delta, snapshot) => {\n          newMessage.innerHTML += delta.replace(/\\n/g, \"<br>\");\n          chatBox.scrollTop = chatBox.scrollHeight;\n        });\n      }\n\n      await runner.finalChatCompletion(); // waits before returning the actual content\n      return runner[\"messages\"][0][\"content\"];\n    } catch (error) {\n      console.error(\"Error fetching GPT data:\", error);\n      throw error; // Rethrow the error after logging it\n    }\n  }\n\n  // Handles updates to system with the prompt and to the screen\n  addMessage(role, message, chatBox, keyPressLog?) {\n    const newMessage = document.createElement(\"div\");\n    // Handles logic of updating prompts and error checking\n    switch (role) {\n      case \"chatbot\": // writing to screen handled caller function\n        this.chatLog.updateConversationLog(message, \"assistant\");\n        return;\n      case \"user\":\n        this.chatLog.updateConversationLog(message, \"user\", keyPressLog);\n        break;\n      case \"chatbot-message\": // set by researcher, needs be seperate case because doesn't update prompts\n        role = \"chatbot\";\n        this.chatLog.logMessage(message, role);\n        break;\n      case \"system-prompt\": // set by researcher\n        this.chatLog.logMessage(message, role);\n        break;\n      case \"chatbot-prompt\": // logging already handled by \"cleanSystem\"\n        role = \"system-prompt\";\n        break;\n      default:\n        console.error(\"Incorrect role\");\n        return;\n    }\n\n    newMessage.className = role + \"-message\";\n    newMessage.innerHTML = \"\";\n    chatBox.appendChild(newMessage);\n    newMessage.innerHTML = message.replace(/\\n/g, \"<br>\");\n    chatBox.scrollTop = chatBox.scrollHeight;\n  }\n\n  // updates and processes to the screen, workflow for one message (can be used in the process of workflow for mulitple messages)\n  async updateAndProcessGPT(chatBox, prompt?) {\n    const newMessage = document.createElement(\"div\");\n    newMessage.className = \"chatbot\" + \"-message\";\n    newMessage.innerHTML = \"\";\n    chatBox.appendChild(newMessage);\n\n    try {\n      var response = undefined;\n\n      if (prompt) {\n        // allows to pass in non defined prompts\n        response = await this.fetchGPT(prompt, chatBox, newMessage);\n        console.log(prompt);\n      } else {\n        // special case when wanting to prompt with own thing\n        response = await this.fetchGPT(this.chatLog.getPrompt(), chatBox, newMessage);\n        console.log(this.chatLog.getPrompt());\n      }\n\n      chatBox.scrollTop = chatBox.scrollHeight;\n      this.addMessage(\"chatbot\", response, chatBox); // saves to prompt\n      return response;\n    } catch (error) {\n      newMessage.innerHTML = \"error fetching bot response\";\n      return \"error fetching response\";\n    }\n  }\n\n  // logic for triggering logic\n  checkResearcherPrompts(chatBox, continueButton): void {\n    this.researcher_prompts = this.researcher_prompts.filter((researcher_prompt) => {\n      const message_trigger = researcher_prompt[\"message_trigger\"];\n      const timer_trigger = researcher_prompt[\"timer_trigger\"];\n      const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n\n      if (\n        (message_trigger !== null && this.messages_sent >= message_trigger) ||\n        (timer_trigger !== null && time_elapsed >= timer_trigger)\n      ) {\n        // Checking with prompt to trigger\n        switch (researcher_prompt[\"role\"]) {\n          case \"chatbot-message\": // case is needed because of chatbot updating prompt\n          case \"system-prompt\": // want these cases to have the same functionality\n            this.addMessage(researcher_prompt[\"role\"], researcher_prompt[\"message\"], chatBox);\n            break;\n          case \"chatbot-prompt\": // checks messages, updates prompt and prints sytem message if exists\n            const prompt = researcher_prompt[\"prompt\"];\n            const message = researcher_prompt[\"message\"];\n\n            if (prompt !== null && typeof prompt === \"string\") {\n              this.chatLog.cleanSystem(prompt, message);\n            } else\n              console.error(\n                researcher_prompt,\n                \"is missing prompt field or it isn't in the correct format\"\n              );\n\n            if (message !== null && typeof prompt === \"string\" && message !== \"\") {\n              this.addMessage(researcher_prompt[\"role\"], message, chatBox);\n            }\n            break;\n          case \"continue\": // displays continue button, error checking that pipelining is working\n            if (!continueButton) {\n              console.error(\"No continue button to display\");\n              return false;\n            }\n            continueButton.style.display = \"block\";\n            // implement check here\n            this.addMessage(\"system-prompt\", researcher_prompt[\"message\"], chatBox);\n            break;\n          default:\n            console.error(\"Incorrect role for prompting\");\n        }\n\n        return false; // Remove this item from the array\n      }\n      return true; // Keep this item in the array\n    });\n  }\n\n  // checking whether chain prompts can trigger\n  private checkCondition(name) {\n    const time_elapsed = performance.now() - this.timer_start; // could instead keep subtracting from time_elapsed\n    const message_trigger = this[name][\"message_trigger\"];\n    const timer_trigger = this[name][\"timer_trigger\"];\n\n    if (\n      (message_trigger !== null && this.messages_sent >= message_trigger) ||\n      (timer_trigger !== null && time_elapsed >= timer_trigger)\n    )\n      return true;\n    else return false;\n  }\n\n  // triggering prompts in chain and prompting/logging logic\n  private async chainPrompts(message, chatBox) {\n    const cleaned_prompt = this.chatLog.cleanConversation();\n    const logChain = [];\n\n    for (let i = 0; i < this.prompt_chain[\"prompts\"].length; i++) {\n      const chain_prompt_system = this.prompt_chain[\"prompts\"][i];\n\n      const temp_prompt = [\n        ...cleaned_prompt,\n        {\n          role: \"system\",\n          content: chain_prompt_system,\n        },\n        {\n          role: \"user\",\n          content: message,\n        },\n      ];\n\n      logChain.push(\n        {\n          role: `chain-system-${i}`,\n          content: chain_prompt_system,\n        },\n        {\n          role: `link-response-${i}`,\n          content: message,\n        }\n      );\n\n      if (i === this.prompt_chain[\"prompts\"].length - 1) {\n        message = await this.updateAndProcessGPT(chatBox, temp_prompt);\n        logChain.push({ role: \"assistant\", content: message });\n      } else {\n        message = await this.fetchGPT(temp_prompt, chatBox); // Ensure to await if fetchGPT is asynchronous\n      }\n    }\n\n    this.chatLog.logMessage(logChain, \"chain-prompt\");\n  }\n\n  private async selectionPrompt(message, chatBox) {\n    const cleaned_prompt = this.chatLog.cleanConversation(); // maybe be able to refactor and cleanSystem()\n    var bot_responses = \"\";\n\n    for (var i = 0; i < this.selection_prompt[\"prompts\"].length; i++) {\n      const input_prompt = this.selection_prompt[\"prompts\"][i];\n      const combined_prompt = [\n        ...cleaned_prompt,\n        { role: \"system\", content: input_prompt },\n        { role: \"user\", content: message },\n      ];\n\n      console.log(\"individual_prompt:\", combined_prompt);\n      const response = await this.fetchGPT(combined_prompt, chatBox);\n\n      bot_responses = bot_responses + \"(\" + i + \") \" + response + \"\\n\\n\";\n    }\n\n    const system_user =\n      this.selection_prompt[\"selection_prompt\"] +\n      \"Task: You should select one of the three possible responses that would best achieve your goal with the intention of outputting it to the user\" +\n      \"What you should output: You should output the choice that you have selected, but without any indication that this was a numbered choice. Do not tell the user that you selected a certain response. The user should not know that there were choices.\" +\n      \" User message: `\" +\n      message +\n      \"`\";\n\n    this.chatLog.logMessage(\n      [\n        { role: \"prompt-selection\", content: system_user },\n        { role: \"content-choices/chatbot-answers\", content: bot_responses },\n      ],\n      \"selection_prompt\"\n    );\n\n    const prompt_select = [\n      ...cleaned_prompt,\n      { role: \"system\", content: system_user },\n      { role: \"user\", content: bot_responses },\n    ];\n\n    const response_message = await this.updateAndProcessGPT(chatBox, prompt_select);\n  }\n}\n\nexport default ChatPlugin;\n"],"names":["auto","kind","undefined","ReadableStream","MultipartBody","_Symbol$toStringTag","body","_classCallCheck","this","_createClass","key","Symbol","toStringTag","get","shims","options","arguments","length","Error","concat","fetch","Request","Response","Headers","FormData","Blob","File","getMultipartRequestOptions","getDefaultAgent","fileFromPath","isFsReadStream","_fetch","_Request","_Response","_Headers","_getMultipartRequestOptions","recommendation","manuallyImported","error","message","_asyncToGenerator","_regeneratorRuntime","mark","_callee","form","opts","wrap","_context","prev","next","abrupt","_objectSpread","stop","_x","_x2","apply","url","value","Stream","_Symbol$asyncIterator","iterator","controller","asyncIterator","left","right","teeIterator","queue","result","push","shift","iter","self","encoder","TextEncoder","start","pull","ctrl","_callee2","_yield$iter$next","bytes","_context2","sent","done","close","encode","JSON","stringify","enqueue","t0","cancel","_callee3","_iter$return","_iter","_context3","call","response","consumed","_iterator2","_wrapAsyncGenerator","_callee4","_iteratorAbruptCompletion","_didIteratorError","_iteratorError","_iterator","_step","sse","data","_data","_context4","_asyncIterator","_iterSSEMessages","_awaitAsyncGenerator","startsWith","event","parse","console","raw","APIError","t1","t2","finish","t3","name","abort","readableStream","iterLines","_iterLines","_callee5","lineDecoder","_iteratorAbruptCompletion2","_didIteratorError2","_iteratorError2","_iterator3","_step2","chunk","_iterator8","_step6","line","_iterator9","_step7","_line","_context5","LineDecoder","readableStreamAsyncIterable","_createForOfIteratorHelper","decode","s","n","e","f","flush","_iterator5","_callee6","_iteratorAbruptCompletion3","_didIteratorError3","_iteratorError3","_iterator4","_step3","_context6","_iterSSEMessages2","_callee7","sseDecoder","_iteratorAbruptCompletion4","_didIteratorError4","_iteratorError4","_iterator6","_step4","sseChunk","_iterator10","_step8","_iterator11","_step9","_line2","_sse","_context7","OpenAIError","SSEDecoder","iterSSEChunks","_x3","_iterSSEChunks","_callee8","_iteratorAbruptCompletion5","_didIteratorError5","_iteratorError5","_iterator7","_step5","binaryChunk","newData","patternIndex","_context8","Uint8Array","ArrayBuffer","set","findDoubleNewlineIndex","slice","buffer","i","chunks","endsWith","substring","join","_partition","str","delimiter","index","indexOf","partition","_partition2","_slicedToArray","fieldname","trailingCR","text","decodeText","trailingNewline","NEWLINE_CHARS","has","lines","split","NEWLINE_REGEXP","pop","_toConsumableArray","Buffer","toString","from","constructor","TextDecoder","_this$textDecoder","textDecoder","stream","reader","getReader","_defineProperty","_callee9","_context9","read","releaseLock","return","_callee10","cancelPromise","_context10","Set","_Error","_callSuper","_inherits","_wrapNativeSuper","_OpenAIError","status","headers","_this","makeMessage","request_id","code","param","type","msg","errorResponse","APIConnectionError","cause","err","BadRequestError","AuthenticationError","PermissionDeniedError","NotFoundError","ConflictError","UnprocessableEntityError","RateLimitError","InternalServerError","APIUserAbortError","_APIError","_this2","_APIError2","_ref2","_this3","_APIError3","_this4","_APIError4","_this5","_APIError5","_this6","_APIError6","_this7","_APIError7","_this8","_APIError8","_this9","_APIError9","_this10","_APIError10","isRunnableFunctionWithParse","fn","isAssistantMessage","role","isFunctionMessage","isToolMessage","AbstractChatCompletionRunner","AbortController","_AbstractChatCompletionRunner_connectedPromise","_AbstractChatCompletionRunner_resolveConnectedPromise","_AbstractChatCompletionRunner_rejectConnectedPromise","_AbstractChatCompletionRunner_endPromise","_AbstractChatCompletionRunner_resolveEndPromise","_AbstractChatCompletionRunner_rejectEndPromise","_AbstractChatCompletionRunner_listeners","_chatCompletions","messages","_AbstractChatCompletionRunner_ended","_AbstractChatCompletionRunner_errored","_AbstractChatCompletionRunner_aborted","_AbstractChatCompletionRunner_catchingPromiseCreated","_AbstractChatCompletionRunner_handleError","__classPrivateFieldSet","_emit","openAIError","String","Promise","resolve","reject","__classPrivateFieldGet","_runTools2","_runFunctions2","_runChatCompletion2","_createChatCompletion2","_totalUsage","_finalFunctionCallResult","_finalFunctionCall","_finalMessage","_finalContent","_finalChatCompletion","_done","executor","setTimeout","then","_emitFinal","chatCompletion","_chatCompletion$choic","choices","_addMessage","emit","content","function_call","tool_calls","tool_call","ended","listener","listeners","findIndex","l","splice","once","completion","_AbstractChatCompletionRunner_instances","_AbstractChatCompletionRunner_getFinalContent","_AbstractChatCompletionRunner_getFinalMessage","_AbstractChatCompletionRunner_getFinalFunctionCall","_AbstractChatCompletionRunner_getFinalFunctionCallResult","_AbstractChatCompletionRunner_calculateTotalUsage","_len","args","Array","_key","filter","forEach","_ref","finalMessage","finalContent","finalFunctionCall","finalFunctionCallResult","some","c","usage","completions","params","signal","aborted","addEventListener","_AbstractChatCompletionRunner_validateParams","create","_connected","_addChatCompletion","_createChatCompletion","_x4","_x5","_x6","_params$function_call","restParams","singleFunctionToCall","_ref2$maxChatCompleti","maxChatCompletions","functionsByName","functions","_message","_chatCompletion$choic2","_message$function_cal","_content","_content2","parsed","rawContent","_objectWithoutProperties","_excluded","DEFAULT_MAX_CHAT_COMPLETIONS","map","parameters","description","_AbstractChatCompletionRunner_stringifyFunctionCallResult","_x7","_x8","_x9","_callee11","_tool_choice$function","_params$tool_choice","tool_choice","_ref3$maxChatCompleti","tools","_message2","_chatCompletion$choic3","tool_call_id","_tool_call$function","_content3","_content4","_content5","_context11","_excluded2","t","function","id","_x10","_x11","_x12","_classPrivateFieldGe","_message$content","_message$tool_calls","_message$tool_calls$a","at","_ret","_loop","x","_x$tool_calls","y","v","total","completion_tokens","prompt_tokens","total_tokens","ChatCompletionStream","_AbstractChatCompleti","_ChatCompletionStream_currentChatCompletionSnapshot","_assertThisInitialized","_fromReadableStream2","_stream$controller$si","_ChatCompletionStream_instances","_ChatCompletionStream_beginRequest","_ChatCompletionStream_addChunk","_ChatCompletionStream_endRequest","_stream$controller$si2","chatId","fromReadableStream","_return2","_next","pushQueue","readQueue","on","_i","_readQueue","_i2","_readQueue2","_i3","_readQueue3","bind","toReadableStream","runner","_run","_fromReadableStream","_runChatCompletion","WeakMap","WeakSet","_chunk$choices$","_completion$choices$","_ChatCompletionStream_accumulateChatCompletion","delta","snapshot","created","model","system_fingerprint","rest","_excluded6","_ref4","finish_reason","logprobs","choiceRest","_excluded7","messageRest","_excluded8","toolRest","_excluded9","_ref5","fnRest","_excluded10","object","finalizeChatCompletion","Object","assign","_ref2$logprobs","other","choice","_a$content","_choice$logprobs$cont","_excluded3","_a","_b$arguments","_excluded4","_b","_c$_index","_ref3","_excluded5","_c","ChatLog","conversation_log","final_data","prompt","newMessage","time","Math","round","performance","now","newElement","keyPressLog","log","newPrompt","array","res","setPrompt","getPrompt","info","ai_prompt","ParameterType","STRING","default","ai_model","chat_field_placeholder","continue_button","COMPLEX","message_trigger","nested","timer_trigger","INT","additional_prompts","prompt_chain","prompts","selection_prompt","ChatPlugin","jsPsych","display_element","trial","initializeTrialVariables","html","innerHTML","document","style","backgroundColor","chatBox","querySelector","userInput","sendButton","continueButton","sendMessage","__awaiter","trim","addMessage","checkCondition","selectionPrompt","chainPrompts","updateAndProcessGPT","scrollTop","scrollHeight","messages_sent","checkResearcherPrompts","shiftKey","preventDefault","finishTrial","logs","chatLog","getChatLogs","timer_start","researcher_prompts","researcher_prompt","window","location","href","includes","method","ok","replace","finalChatCompletion","createElement","updateConversationLog","logMessage","className","appendChild","fetchGPT","time_elapsed","cleanSystem","display","cleaned_prompt","cleanConversation","logChain","chain_prompt_system","temp_prompt","bot_responses","input_prompt","combined_prompt","system_user","prompt_select"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10]}