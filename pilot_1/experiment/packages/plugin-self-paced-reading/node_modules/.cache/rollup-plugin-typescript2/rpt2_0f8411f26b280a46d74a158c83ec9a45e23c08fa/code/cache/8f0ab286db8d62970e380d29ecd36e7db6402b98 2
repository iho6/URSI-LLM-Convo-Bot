{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"self-paced-reading\",\n    parameters: {\n        sentence: {\n            type: ParameterType.STRING,\n            pretty_name: \"Sentence\",\n            default: undefined,\n        },\n        font_family: {\n            type: ParameterType.STRING,\n            pretty_name: \"Font family\",\n            default: \"monospace\",\n        },\n        font_size: {\n            type: ParameterType.STRING,\n            pretty_name: \"Font size\",\n            default: \"24px\",\n        },\n        font_weight: {\n            type: ParameterType.STRING,\n            pretty_name: \"Font weight\",\n            default: \"normal\",\n        },\n        font_colour: {\n            type: ParameterType.STRING,\n            pretty_name: \"Font colour\",\n            default: \"black\",\n        },\n        mask_type: {\n            type: ParameterType.INT,\n            pretty_name: \"Mask type\",\n            default: 1,\n        },\n        mask_character: {\n            type: ParameterType.STRING,\n            pretty_name: \"Mask character\",\n            default: \"_\",\n        },\n        mask_on_word: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Mask word\",\n            default: true,\n        },\n        mask_gap_character: {\n            type: ParameterType.STRING,\n            pretty_name: \"Mask gap character.\",\n            default: \" \",\n        },\n        mask_offset: {\n            type: ParameterType.INT,\n            pretty_name: \"Mask offset\",\n            default: 0,\n        },\n        mask_weight: {\n            type: ParameterType.STRING,\n            pretty_name: \"Mask weight\",\n            default: \"normal\",\n        },\n        mask_colour: {\n            type: ParameterType.STRING,\n            pretty_name: \"Mask colour\",\n            default: \"black\",\n        },\n        line_height: {\n            type: ParameterType.INT,\n            pretty_name: \"Line height\",\n            default: 80,\n        },\n        canvas_colour: {\n            type: ParameterType.STRING,\n            pretty_name: \"Canvas colour\",\n            default: \"white\",\n        },\n        canvas_size: {\n            type: ParameterType.INT,\n            array: true,\n            pretty_name: \"Canvas size\",\n            default: [1280, 960],\n        },\n        canvas_border: {\n            type: ParameterType.STRING,\n            pretty_name: \"Canvas border\",\n            default: \"0px solid black\",\n        },\n        canvas_clear_border: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Clear canvas border\",\n            default: false,\n        },\n        translate_origin: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Translate origin\",\n            default: true,\n        },\n        choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Keys\",\n            default: [\" \"],\n        },\n        xy_position: {\n            type: ParameterType.INT,\n            array: true,\n            pretty_name: \"XY position\",\n            default: [0, 0],\n        },\n        x_align: {\n            type: ParameterType.STRING,\n            pretty_name: \"X alignment\",\n            default: \"center\",\n        },\n        y_align: {\n            type: ParameterType.STRING,\n            pretty_name: \"Y alignment\",\n            default: \"top\",\n        },\n        inter_word_interval: {\n            type: ParameterType.INT,\n            pretty_name: \"inter-word-interval\",\n            default: 0,\n        },\n    },\n};\nfunction text_mask(txt, mask_character) {\n    return mask_character.repeat(txt.length);\n}\n// deal with mask type 1 and 2\nlet mask_operator = {\n    1: (a, b) => a !== b,\n    2: (a, b) => a > b,\n};\nfunction display_word(mask_type) {\n    return (words, word_number) => words\n        .map((word, idx) => mask_operator[mask_type](idx, word_number) ? text_mask(word, \" \") : word)\n        .join(\" \");\n}\nfunction display_mask(mask_type, mask_on_word, mask_character, mask_gap_character) {\n    return (words, word_number) => words\n        .map((word, idx) => mask_operator[mask_type](idx, word_number)\n        ? text_mask(word, mask_character)\n        : text_mask(word, mask_on_word ? mask_character : \" \"))\n        .join(mask_gap_character);\n}\nfunction set_canvas(canvas, ctx, colour, translate_origin) {\n    let canvas_rect;\n    if (translate_origin) {\n        ctx.translate(canvas.width / 2, canvas.height / 2); // make center (0, 0)\n        canvas_rect = [-canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height];\n    }\n    else {\n        canvas_rect = [0, 0, canvas.width, canvas.height];\n    }\n    ctx.fillStyle = colour;\n    ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n    return canvas_rect;\n}\n/**\n * **self-paced-reading**\n *\n * jsPsych plugin for self paced reading paradigms.\n *\n * @author igmmgi\n * @see {@link https://www.jspsych.org/plugins/jspsych-self-paced-reading/ self-paced-reading plugin documentation on jspsych.org}\n */\nclass SelfPacedReadingPlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        display_element.innerHTML =\n            \"<div>\" +\n                '<canvas id=\"canvas\" width=\"' +\n                trial.canvas_size[0] +\n                '\" height=\"' +\n                trial.canvas_size[1] +\n                '\" style=\"border: ' +\n                trial.canvas_border +\n                ';\"></canvas>' +\n                \"</div>\";\n        let canvas = document.getElementById(\"canvas\");\n        let ctx = canvas.getContext(\"2d\");\n        let canvas_rect = set_canvas(canvas, ctx, trial.canvas_colour, trial.translate_origin);\n        // basic font style\n        ctx.textAlign = trial.x_align;\n        ctx.textBaseline = \"middle\";\n        // text properties\n        let words = [];\n        let line_length = [];\n        let sentence_length = 0;\n        let word_number = -1; // initialized to -1 because trial begins with no words displayed\n        let word_number_line = -1;\n        let line_number = 0;\n        let sentence = trial.sentence.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n        let sentence_split;\n        let words_concat = sentence.split(\" \");\n        let sentence_font = trial.font_weight + \" \" + trial.font_size + \" \" + trial.font_family;\n        let mask_font = trial.mask_weight + \" \" + trial.font_size + \" \" + trial.font_family;\n        let rts = [0];\n        // if mask type = 3, repeat mask character x number of letters in first word\n        let mask_character = trial.mask_type !== 3\n            ? trial.mask_character\n            : trial.mask_character.repeat(words_concat[0].length);\n        // deal with potential multi-line sentences with user defined splits\n        if (trial.mask_type !== 3) {\n            sentence_split = trial.sentence.split(\"\\n\").map((s) => s.trim());\n            for (let i = 0; i < sentence_split.length; i++) {\n                words[i] = sentence_split[i].split(\" \");\n                sentence_length += words[i].length;\n                line_length.push(words[i].length);\n            }\n            // center multi-line text on original y position\n            if (words.length > 1 && trial.y_align === \"center\") {\n                trial.xy_position[1] -= words.length * 0.5 * trial.line_height;\n            }\n        }\n        else {\n            words = trial.sentence.split(\" \");\n            sentence_length = words.length;\n        }\n        const word = display_word(trial.mask_type);\n        const mask = display_mask(trial.mask_type, trial.mask_on_word, mask_character, trial.mask_gap_character);\n        function clear_canvas() {\n            ctx.fillStyle = trial.canvas_colour;\n            ctx.font = trial.canvas_colour;\n            ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n        }\n        function draw_mask() {\n            ctx.font = mask_font;\n            ctx.fillStyle = trial.mask_colour;\n            if (trial.mask_type !== 3) {\n                for (let i = 0; i < words.length; i++) {\n                    let mw = i === line_number ? word_number_line : -1;\n                    ctx.fillText(mask(words[i], mw), trial.xy_position[0], trial.xy_position[1] + i * trial.line_height + trial.mask_offset);\n                }\n            }\n            else if (trial.mask_type === 3 && word_number === -1) {\n                ctx.fillText(mask_character, trial.xy_position[0], trial.xy_position[1] + trial.mask_offset);\n            }\n        }\n        function draw_word() {\n            ctx.font = sentence_font;\n            ctx.fillStyle = trial.font_colour;\n            if (trial.mask_type !== 3) {\n                // previous lines in multi-line\n                for (let i = 0; i < line_number; i++) {\n                    ctx.fillText(word(words[i], words[i].length), trial.xy_position[0], trial.xy_position[1] + i * trial.line_height);\n                }\n                // current line\n                ctx.fillText(word(words[line_number], word_number_line), trial.xy_position[0], trial.xy_position[1] + line_number * trial.line_height);\n            }\n            else if (trial.mask_type === 3 && word_number > -1) {\n                ctx.fillText(words[word_number], trial.xy_position[0], trial.xy_position[1]);\n            }\n            // set line/word numbers\n            if (word_number_line + 1 < line_length[line_number]) {\n                word_number_line++;\n            }\n            else if (line_number < words.length - 1) {\n                line_number++;\n                word_number_line = 0;\n            }\n        }\n        // store responses\n        // must be an object, as this is what jsPsych.finishTrial() expects\n        let trial_data = {\n            word: [],\n            rt: [],\n            rt_total: [],\n            sentence: sentence,\n        };\n        // initial draw\n        draw_mask();\n        draw_word();\n        // function to end trial when it is time\n        const end_trial = () => {\n            if (trial.canvas_clear_border) {\n                display_element.innerHTML = \" \";\n            }\n            else {\n                ctx.fillStyle = trial.canvas_colour;\n                ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n            }\n            // kill any remaining setTimeout handlers + kill keyboard listeners\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // function to handle responses by the subject\n        const after_response = (info) => {\n            // gather/store data\n            rts.push(info.rt);\n            // trial.inter_word_interval not relevant for initial rt\n            let iwi = word_number === -1 ? 0 : trial.inter_word_interval;\n            // rts[rts.length - 1] is the cumulative rt for the trial\n            let current_rt = rts[rts.length - 1] - rts[rts.length - 2] - iwi;\n            // no words displayed at the start of trial\n            let current_word = word_number === -1 ? null : words_concat[word_number];\n            if (current_rt > 0) {\n                // valid rts\n                trial_data.rt.push(current_rt);\n                trial_data.rt_total.push(rts[rts.length - 1]);\n                trial_data.word.push(current_word);\n                // keep drawing until words in sentence complete\n                word_number++;\n                this.jsPsych.pluginAPI.setTimeout(function () {\n                    // word_number will equal sentence_length after (valid) keypress on last word\n                    if (word_number < sentence_length) {\n                        clear_canvas();\n                        draw_mask();\n                        draw_word();\n                    }\n                    else {\n                        end_trial();\n                    }\n                }, trial.inter_word_interval);\n            }\n            else {\n                // invalid (i.e. negative) rts possible when trial.inter_word_interval is > 0\n                rts.pop(); // throw out invalid rt\n            }\n        };\n        let keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n            callback_function: after_response,\n            valid_responses: trial.choices,\n            rt_method: \"performance\",\n            persist: true,\n            allow_held_key: false,\n        });\n    }\n}\nSelfPacedReadingPlugin.info = info;\nexport default SelfPacedReadingPlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-self-paced-reading/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"self-paced-reading\";\n    readonly parameters: {\n        readonly sentence: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Sentence\";\n            readonly default: any;\n        };\n        readonly font_family: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Font family\";\n            readonly default: \"monospace\";\n        };\n        readonly font_size: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Font size\";\n            readonly default: \"24px\";\n        };\n        readonly font_weight: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Font weight\";\n            readonly default: \"normal\";\n        };\n        readonly font_colour: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Font colour\";\n            readonly default: \"black\";\n        };\n        readonly mask_type: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Mask type\";\n            readonly default: 1;\n        };\n        readonly mask_character: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Mask character\";\n            readonly default: \"_\";\n        };\n        readonly mask_on_word: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Mask word\";\n            readonly default: true;\n        };\n        readonly mask_gap_character: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Mask gap character.\";\n            readonly default: \" \";\n        };\n        readonly mask_offset: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Mask offset\";\n            readonly default: 0;\n        };\n        readonly mask_weight: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Mask weight\";\n            readonly default: \"normal\";\n        };\n        readonly mask_colour: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Mask colour\";\n            readonly default: \"black\";\n        };\n        readonly line_height: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Line height\";\n            readonly default: 80;\n        };\n        readonly canvas_colour: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Canvas colour\";\n            readonly default: \"white\";\n        };\n        readonly canvas_size: {\n            readonly type: ParameterType.INT;\n            readonly array: true;\n            readonly pretty_name: \"Canvas size\";\n            readonly default: readonly [1280, 960];\n        };\n        readonly canvas_border: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Canvas border\";\n            readonly default: \"0px solid black\";\n        };\n        readonly canvas_clear_border: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Clear canvas border\";\n            readonly default: false;\n        };\n        readonly translate_origin: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Translate origin\";\n            readonly default: true;\n        };\n        readonly choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Keys\";\n            readonly default: readonly [\" \"];\n        };\n        readonly xy_position: {\n            readonly type: ParameterType.INT;\n            readonly array: true;\n            readonly pretty_name: \"XY position\";\n            readonly default: readonly [0, 0];\n        };\n        readonly x_align: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"X alignment\";\n            readonly default: \"center\";\n        };\n        readonly y_align: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Y alignment\";\n            readonly default: \"top\";\n        };\n        readonly inter_word_interval: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"inter-word-interval\";\n            readonly default: 0;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **self-paced-reading**\n *\n * jsPsych plugin for self paced reading paradigms.\n *\n * @author igmmgi\n * @see {@link https://www.jspsych.org/plugins/jspsych-self-paced-reading/ self-paced-reading plugin documentation on jspsych.org}\n */\ndeclare class SelfPacedReadingPlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"self-paced-reading\";\n        readonly parameters: {\n            readonly sentence: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Sentence\";\n                readonly default: any;\n            };\n            readonly font_family: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Font family\";\n                readonly default: \"monospace\";\n            };\n            readonly font_size: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Font size\";\n                readonly default: \"24px\";\n            };\n            readonly font_weight: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Font weight\";\n                readonly default: \"normal\";\n            };\n            readonly font_colour: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Font colour\";\n                readonly default: \"black\";\n            };\n            readonly mask_type: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Mask type\";\n                readonly default: 1;\n            };\n            readonly mask_character: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Mask character\";\n                readonly default: \"_\";\n            };\n            readonly mask_on_word: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Mask word\";\n                readonly default: true;\n            };\n            readonly mask_gap_character: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Mask gap character.\";\n                readonly default: \" \";\n            };\n            readonly mask_offset: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Mask offset\";\n                readonly default: 0;\n            };\n            readonly mask_weight: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Mask weight\";\n                readonly default: \"normal\";\n            };\n            readonly mask_colour: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Mask colour\";\n                readonly default: \"black\";\n            };\n            readonly line_height: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Line height\";\n                readonly default: 80;\n            };\n            readonly canvas_colour: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Canvas colour\";\n                readonly default: \"white\";\n            };\n            readonly canvas_size: {\n                readonly type: ParameterType.INT;\n                readonly array: true;\n                readonly pretty_name: \"Canvas size\";\n                readonly default: readonly [1280, 960];\n            };\n            readonly canvas_border: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Canvas border\";\n                readonly default: \"0px solid black\";\n            };\n            readonly canvas_clear_border: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Clear canvas border\";\n                readonly default: false;\n            };\n            readonly translate_origin: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Translate origin\";\n                readonly default: true;\n            };\n            readonly choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Keys\";\n                readonly default: readonly [\" \"];\n            };\n            readonly xy_position: {\n                readonly type: ParameterType.INT;\n                readonly array: true;\n                readonly pretty_name: \"XY position\";\n                readonly default: readonly [0, 0];\n            };\n            readonly x_align: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"X alignment\";\n                readonly default: \"center\";\n            };\n            readonly y_align: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Y alignment\";\n                readonly default: \"top\";\n            };\n            readonly inter_word_interval: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"inter-word-interval\";\n                readonly default: 0;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n}\nexport default SelfPacedReadingPlugin;\n"}}
