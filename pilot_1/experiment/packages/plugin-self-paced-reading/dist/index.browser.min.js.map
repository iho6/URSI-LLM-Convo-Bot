{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"self-paced-reading\",\n  parameters: {\n    sentence: {\n      type: ParameterType.STRING,\n      pretty_name: \"Sentence\",\n      default: undefined,\n    },\n    font_family: {\n      type: ParameterType.STRING,\n      pretty_name: \"Font family\",\n      default: \"monospace\",\n    },\n    font_size: {\n      type: ParameterType.STRING,\n      pretty_name: \"Font size\",\n      default: \"24px\",\n    },\n    font_weight: {\n      type: ParameterType.STRING,\n      pretty_name: \"Font weight\",\n      default: \"normal\",\n    },\n    font_colour: {\n      type: ParameterType.STRING,\n      pretty_name: \"Font colour\",\n      default: \"black\",\n    },\n    mask_type: {\n      type: ParameterType.INT,\n      pretty_name: \"Mask type\",\n      default: 1,\n    },\n    mask_character: {\n      type: ParameterType.STRING,\n      pretty_name: \"Mask character\",\n      default: \"_\",\n    },\n    mask_on_word: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Mask word\",\n      default: true,\n    },\n    mask_gap_character: {\n      type: ParameterType.STRING,\n      pretty_name: \"Mask gap character.\",\n      default: \" \",\n    },\n    mask_offset: {\n      type: ParameterType.INT,\n      pretty_name: \"Mask offset\",\n      default: 0,\n    },\n    mask_weight: {\n      type: ParameterType.STRING,\n      pretty_name: \"Mask weight\",\n      default: \"normal\",\n    },\n    mask_colour: {\n      type: ParameterType.STRING,\n      pretty_name: \"Mask colour\",\n      default: \"black\",\n    },\n    line_height: {\n      type: ParameterType.INT,\n      pretty_name: \"Line height\",\n      default: 80,\n    },\n    canvas_colour: {\n      type: ParameterType.STRING,\n      pretty_name: \"Canvas colour\",\n      default: \"white\",\n    },\n    canvas_size: {\n      type: ParameterType.INT,\n      array: true,\n      pretty_name: \"Canvas size\",\n      default: [1280, 960],\n    },\n    canvas_border: {\n      type: ParameterType.STRING,\n      pretty_name: \"Canvas border\",\n      default: \"0px solid black\",\n    },\n    canvas_clear_border: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Clear canvas border\",\n      default: false,\n    },\n    translate_origin: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Translate origin\",\n      default: true,\n    },\n    choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keys\",\n      default: [\" \"],\n    },\n    xy_position: {\n      type: ParameterType.INT,\n      array: true,\n      pretty_name: \"XY position\",\n      default: [0, 0],\n    },\n    x_align: {\n      type: ParameterType.STRING,\n      pretty_name: \"X alignment\",\n      default: \"center\",\n    },\n    y_align: {\n      type: ParameterType.STRING,\n      pretty_name: \"Y alignment\",\n      default: \"top\",\n    },\n    inter_word_interval: {\n      type: ParameterType.INT,\n      pretty_name: \"inter-word-interval\",\n      default: 0,\n    },\n  },\n};\n\nfunction text_mask(txt: string, mask_character: string) {\n  return mask_character.repeat(txt.length);\n}\n\n// deal with mask type 1 and 2\nlet mask_operator = {\n  1: (a: number, b: number) => a !== b,\n  2: (a: number, b: number) => a > b,\n};\n\nfunction display_word(mask_type: number) {\n  return (words: string[], word_number: number) =>\n    words\n      .map((word, idx) =>\n        mask_operator[mask_type](idx, word_number) ? text_mask(word, \" \") : word\n      )\n      .join(\" \");\n}\n\nfunction display_mask(\n  mask_type: number,\n  mask_on_word: boolean,\n  mask_character: string,\n  mask_gap_character: string\n) {\n  return (words: string[], word_number: number) =>\n    words\n      .map((word: string, idx: number) =>\n        mask_operator[mask_type](idx, word_number)\n          ? text_mask(word, mask_character)\n          : text_mask(word, mask_on_word ? mask_character : \" \")\n      )\n      .join(mask_gap_character);\n}\n\nfunction set_canvas(\n  canvas: HTMLCanvasElement,\n  ctx: CanvasRenderingContext2D,\n  colour: string | CanvasGradient | CanvasPattern,\n  translate_origin: Boolean\n) {\n  let canvas_rect: number[];\n  if (translate_origin) {\n    ctx.translate(canvas.width / 2, canvas.height / 2); // make center (0, 0)\n    canvas_rect = [-canvas.width / 2, -canvas.height / 2, canvas.width, canvas.height];\n  } else {\n    canvas_rect = [0, 0, canvas.width, canvas.height];\n  }\n  ctx.fillStyle = colour;\n  ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n  return canvas_rect;\n}\n\ntype Info = typeof info;\n\n/**\n * **self-paced-reading**\n *\n * jsPsych plugin for self paced reading paradigms.\n *\n * @author igmmgi\n * @see {@link https://www.jspsych.org/plugins/jspsych-self-paced-reading/ self-paced-reading plugin documentation on jspsych.org}\n */\nclass SelfPacedReadingPlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    display_element.innerHTML =\n      \"<div>\" +\n      '<canvas id=\"canvas\" width=\"' +\n      trial.canvas_size[0] +\n      '\" height=\"' +\n      trial.canvas_size[1] +\n      '\" style=\"border: ' +\n      trial.canvas_border +\n      ';\"></canvas>' +\n      \"</div>\";\n\n    let canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n    let ctx = canvas.getContext(\"2d\");\n    let canvas_rect = set_canvas(canvas, ctx, trial.canvas_colour, trial.translate_origin);\n\n    // basic font style\n    ctx.textAlign = trial.x_align as CanvasTextAlign;\n    ctx.textBaseline = \"middle\";\n\n    // text properties\n    let words = [];\n    let line_length = [];\n    let sentence_length = 0;\n    let word_number = -1; // initialized to -1 because trial begins with no words displayed\n    let word_number_line = -1;\n    let line_number = 0;\n    let sentence = trial.sentence.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n    let sentence_split: string[];\n    let words_concat = sentence.split(\" \");\n    let sentence_font = trial.font_weight + \" \" + trial.font_size + \" \" + trial.font_family;\n    let mask_font = trial.mask_weight + \" \" + trial.font_size + \" \" + trial.font_family;\n\n    let rts: number[] = [0];\n\n    // if mask type = 3, repeat mask character x number of letters in first word\n    let mask_character =\n      trial.mask_type !== 3\n        ? trial.mask_character\n        : trial.mask_character.repeat(words_concat[0].length);\n\n    // deal with potential multi-line sentences with user defined splits\n    if (trial.mask_type !== 3) {\n      sentence_split = trial.sentence.split(\"\\n\").map((s) => s.trim());\n      for (let i = 0; i < sentence_split.length; i++) {\n        words[i] = sentence_split[i].split(\" \");\n        sentence_length += words[i].length;\n        line_length.push(words[i].length);\n      }\n      // center multi-line text on original y position\n      if (words.length > 1 && trial.y_align === \"center\") {\n        trial.xy_position[1] -= words.length * 0.5 * trial.line_height;\n      }\n    } else {\n      words = trial.sentence.split(\" \");\n      sentence_length = words.length;\n    }\n\n    const word = display_word(trial.mask_type);\n    const mask = display_mask(\n      trial.mask_type,\n      trial.mask_on_word,\n      mask_character,\n      trial.mask_gap_character\n    );\n\n    function clear_canvas() {\n      ctx.fillStyle = trial.canvas_colour;\n      ctx.font = trial.canvas_colour;\n      ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n    }\n\n    function draw_mask() {\n      ctx.font = mask_font;\n      ctx.fillStyle = trial.mask_colour;\n      if (trial.mask_type !== 3) {\n        for (let i = 0; i < words.length; i++) {\n          let mw = i === line_number ? word_number_line : -1;\n          ctx.fillText(\n            mask(words[i], mw),\n            trial.xy_position[0],\n            trial.xy_position[1] + i * trial.line_height + trial.mask_offset\n          );\n        }\n      } else if (trial.mask_type === 3 && word_number === -1) {\n        ctx.fillText(\n          mask_character,\n          trial.xy_position[0],\n          trial.xy_position[1] + trial.mask_offset\n        );\n      }\n    }\n\n    function draw_word() {\n      ctx.font = sentence_font;\n      ctx.fillStyle = trial.font_colour;\n      if (trial.mask_type !== 3) {\n        // previous lines in multi-line\n        for (let i = 0; i < line_number; i++) {\n          ctx.fillText(\n            word(words[i], words[i].length),\n            trial.xy_position[0],\n            trial.xy_position[1] + i * trial.line_height\n          );\n        }\n\n        // current line\n        ctx.fillText(\n          word(words[line_number], word_number_line),\n          trial.xy_position[0],\n          trial.xy_position[1] + line_number * trial.line_height\n        );\n      } else if (trial.mask_type === 3 && word_number > -1) {\n        ctx.fillText(words[word_number], trial.xy_position[0], trial.xy_position[1]);\n      }\n\n      // set line/word numbers\n      if (word_number_line + 1 < line_length[line_number]) {\n        word_number_line++;\n      } else if (line_number < words.length - 1) {\n        line_number++;\n        word_number_line = 0;\n      }\n    }\n\n    // store responses\n    // must be an object, as this is what jsPsych.finishTrial() expects\n    let trial_data = {\n      word: [],\n      rt: [],\n      rt_total: [],\n      sentence: sentence,\n    };\n\n    // initial draw\n    draw_mask();\n    draw_word();\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      if (trial.canvas_clear_border) {\n        display_element.innerHTML = \" \";\n      } else {\n        ctx.fillStyle = trial.canvas_colour;\n        ctx.fillRect(canvas_rect[0], canvas_rect[1], canvas_rect[2], canvas_rect[3]);\n      }\n\n      // kill any remaining setTimeout handlers + kill keyboard listeners\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n      this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    const after_response = (info: { rt: any }) => {\n      // gather/store data\n      rts.push(info.rt);\n\n      // trial.inter_word_interval not relevant for initial rt\n      let iwi = word_number === -1 ? 0 : trial.inter_word_interval;\n      // rts[rts.length - 1] is the cumulative rt for the trial\n      let current_rt = rts[rts.length - 1] - rts[rts.length - 2] - iwi;\n      // no words displayed at the start of trial\n      let current_word = word_number === -1 ? null : words_concat[word_number];\n\n      if (current_rt > 0) {\n        // valid rts\n        trial_data.rt.push(current_rt);\n        trial_data.rt_total.push(rts[rts.length - 1]);\n        trial_data.word.push(current_word);\n        // keep drawing until words in sentence complete\n        word_number++;\n        this.jsPsych.pluginAPI.setTimeout(function () {\n          // word_number will equal sentence_length after (valid) keypress on last word\n          if (word_number < sentence_length) {\n            clear_canvas();\n            draw_mask();\n            draw_word();\n          } else {\n            end_trial();\n          }\n        }, trial.inter_word_interval);\n      } else {\n        // invalid (i.e. negative) rts possible when trial.inter_word_interval is > 0\n        rts.pop(); // throw out invalid rt\n      }\n    };\n\n    let keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n      callback_function: after_response,\n      valid_responses: trial.choices,\n      rt_method: \"performance\",\n      persist: true,\n      allow_held_key: false,\n    });\n  }\n}\n\nexport default SelfPacedReadingPlugin;\n"],"names":["info","name","parameters","sentence","type","ParameterType","STRING","pretty_name","default","undefined","font_family","font_size","font_weight","font_colour","mask_type","INT","mask_character","mask_on_word","BOOL","mask_gap_character","mask_offset","mask_weight","mask_colour","line_height","canvas_colour","canvas_size","array","canvas_border","canvas_clear_border","translate_origin","choices","KEYS","xy_position","x_align","y_align","inter_word_interval","text_mask","txt","repeat","length","mask_operator","a","b","SelfPacedReadingPlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","innerHTML","canvas","document","getElementById","ctx","getContext","canvas_rect","colour","translate","width","height","fillStyle","fillRect","set_canvas","textAlign","textBaseline","sentence_split","words","line_length","sentence_length","word_number","word_number_line","line_number","replace","words_concat","split","sentence_font","mask_font","rts","map","s","trim","i","push","word","idx","join","mask","display_mask","draw_mask","font","mw","fillText","draw_word","trial_data","rt","rt_total","keyboardListener","pluginAPI","getKeyboardResponse","callback_function","iwi","current_rt","current_word","setTimeout","clearAllTimeouts","cancelKeyboardResponse","finishTrial","pop","valid_responses","rt_method","persist","allow_held_key"],"mappings":"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"}