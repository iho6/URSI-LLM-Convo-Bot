{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import interact from \"interactjs\";\nimport { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"html-swipe-response\",\n  parameters: {\n    /** The HTML string to be displayed. */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Stimulus\",\n      default: undefined,\n    },\n    /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n    keyboard_choices: {\n      type: ParameterType.KEYS,\n      pretty_name: \"Keyboard Choices\",\n      default: [\"ArrowLeft\", \"ArrowRight\"],\n    },\n    /** Any content here will be displayed below the stimulus. */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      pretty_name: \"Prompt\",\n      default: null,\n    },\n    /** How long to show the stimulus. */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Stimulus duration\",\n      default: null,\n    },\n    /** How long to show trial before it ends. */\n    trial_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Trial duration\",\n      default: null,\n    },\n    /** If true, trial will end when subject makes a response. */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      pretty_name: \"Response ends trial\",\n      default: true,\n    },\n    /** How far away from the center should the subject have to swipe for a\n     * left/right response to be recorded. */\n    swipe_threshold: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe translation threshold\",\n      default: 20,\n    },\n    /** The offscreen coordinate for the swipe animation */\n    swipe_offscreen_coordinate: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe offscreen coordinate\",\n      default: 1000,\n    },\n    /** How much should the swipe animation rotate the stimulus */\n    swipe_animation_max_rotation: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation max rotation\",\n      default: 20,\n    },\n    /** How long should the swipe animation last in milliseconds. Set this to\n     * zero to disable the animation. This will not be included in the reaction\n     * time. */\n    swipe_animation_duration: {\n      type: ParameterType.INT,\n      pretty_name: \"Swipe animation duration (ms)\",\n      default: 250,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **html-swipe-response**\n * jsPsych plugin for displaying a stimulus and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-swipe-response/ html-swipe-response plugin documentation on jspsych.org}\n */\nclass HtmlSwipeResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    // display stimulus\n    let new_html = '<div id=\"jspsych-html-swipe-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    let response = {\n      rt: null,\n      key: null,\n      swipe: null,\n      source: null,\n    };\n\n    const stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n\n    let position = {\n      x: 0,\n      y: 0,\n      rotation: 0,\n    };\n\n    const setPosition = (coordinates) => {\n      const { x = 0, y = 0, rotation = 0 } = coordinates;\n      position = { x, y, rotation };\n      stimulus_div.style.transform = `translate3D(${x}px, ${y}px, 0) rotate(${rotation}deg)`;\n    };\n\n    const resetPosition = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: 0, y: 0, rotation: 0 });\n      stimulus_div.style.transition = null;\n    };\n\n    const dragMoveListener = (event) => {\n      const x = position.x + event.delta.x;\n      const y = position.y + event.delta.y;\n      let rotation = 0;\n      if (position.x > 0) {\n        rotation = Math.min(trial.swipe_animation_max_rotation, position.x / 4);\n      } else {\n        rotation = Math.max(-trial.swipe_animation_max_rotation, position.x / 4);\n      }\n      setPosition({ x: x, y: y, rotation });\n    };\n\n    // start time\n    const start_time = performance.now();\n\n    const sendCardToLeft = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: -trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    const sendCardToRight = async () => {\n      stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${\n        trial.swipe_animation_duration / 1000\n      }s ease-in`;\n      setPosition({ x: trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n    };\n\n    // after a valid response, the stimulus will have the CSS class 'responded'\n    // which can be used to provide visual feedback that a response was recorded\n    const toggle_css_respond = () => {\n      display_element.querySelector(\"#jspsych-html-swipe-response-stimulus\").className +=\n        \" responded\";\n    };\n\n    // function to handle swipe responses by the subject\n    const after_swipe_response = (left_or_right) => {\n      toggle_css_respond();\n\n      if (left_or_right !== null) {\n        // measure rt\n        const end_time = performance.now();\n        const rt = Math.round(end_time - start_time);\n\n        response = {\n          rt: rt,\n          key: null,\n          swipe: left_or_right,\n          source: \"swipe\",\n        };\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    interact(stimulus_div).draggable({\n      inertia: false,\n      autoScroll: true,\n      modifiers: [\n        interact.modifiers.restrictRect({\n          endOnly: true,\n        }),\n      ],\n      listeners: {\n        move: dragMoveListener,\n        end: () => {\n          if (position.x < -trial.swipe_threshold) {\n            sendCardToLeft();\n            after_swipe_response(\"left\");\n          } else if (position.x > trial.swipe_threshold) {\n            sendCardToRight();\n            after_swipe_response(\"right\");\n          } else {\n            resetPosition();\n          }\n        },\n      },\n    });\n\n    // function to handle responses by the subject\n    const after_keyboard_response = (info) => {\n      toggle_css_respond();\n\n      // only record the first response\n      if (response.key == null) {\n        response = {\n          source: \"keyboard\",\n          swipe: null,\n          ...info,\n        };\n      }\n\n      if (response.key.toLowerCase() == trial.keyboard_choices[0].toLowerCase()) {\n        sendCardToLeft();\n      } else if (response.key.toLowerCase() == trial.keyboard_choices[1].toLowerCase()) {\n        sendCardToRight();\n      }\n\n      if (trial.response_ends_trial) {\n        if (trial.swipe_animation_duration > 0) {\n          this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n        } else {\n          end_trial();\n        }\n      }\n    };\n\n    let keyboardListener;\n\n    // start the response listener\n    if (trial.keyboard_choices != \"NO_KEYS\") {\n      keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_keyboard_response,\n        valid_responses: trial.keyboard_choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill any remaining setTimeout handlers\n      this.jsPsych.pluginAPI.clearAllTimeouts();\n\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      interact(stimulus_div).unset();\n\n      // gather the data to store for the trial\n      const trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        keyboard_response: response.key,\n        swipe_response: response.swipe,\n        response_source: response.source,\n      };\n\n      // clear the display\n      display_element.innerHTML = \"\";\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-swipe-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const keyboard_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n      swipe_response: null,\n      response_source: \"keyboard\",\n    };\n\n    const swipe_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      swipe_response: Math.random() < 0.5 ? \"left\" : \"right\",\n      keyboard_response: null,\n      response_source: \"swipe\",\n    };\n\n    const default_data = Math.random() < 0.5 ? keyboard_data : swipe_data;\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      if (data.swipe_response !== null) {\n        const test_stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n\n        let pageX = trial.swipe_threshold * 5;\n        if (data.swipe_response === \"left\") {\n          pageX *= -1;\n        }\n\n        setTimeout(() => {\n          interact(test_stimulus_div).fire({\n            type: \"dragstart\",\n            target: test_stimulus_div,\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragmove\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n\n          interact(test_stimulus_div).fire({\n            type: \"dragend\",\n            target: test_stimulus_div,\n            delta: { x: pageX, y: 0 },\n          });\n        }, data.rt);\n      } else {\n        this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n      }\n    }\n  }\n}\n\nexport default HtmlSwipeResponsePlugin;\n"],"names":["info","name","parameters","stimulus","type","ParameterType","HTML_STRING","pretty_name","default","undefined","keyboard_choices","KEYS","prompt","stimulus_duration","INT","trial_duration","response_ends_trial","BOOL","swipe_threshold","swipe_offscreen_coordinate","swipe_animation_max_rotation","swipe_animation_duration","HtmlSwipeResponsePlugin","jsPsych","_classCallCheck","this","key","value","display_element","trial","_this","new_html","innerHTML","keyboardListener","response","rt","swipe","source","stimulus_div","document","getElementById","position","x","y","rotation","setPosition","coordinates","_coordinates$x","_coordinates$y","_coordinates$rotation","style","transform","concat","start_time","performance","now","sendCardToLeft","__awaiter","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","transition","stop","sendCardToRight","_callee3","_context3","toggle_css_respond","querySelector","className","after_swipe_response","left_or_right","end_time","Math","round","pluginAPI","setTimeout","end_trial","interact","draggable","inertia","autoScroll","modifiers","restrictRect","endOnly","listeners","move","event","delta","min","max","end","_callee","_context","getKeyboardResponse","callback_function","Object","assign","toLowerCase","valid_responses","rt_method","persist","allow_held_key","clearAllTimeouts","cancelKeyboardResponse","unset","trial_data","keyboard_response","swipe_response","response_source","finishTrial","visibility","simulation_mode","simulation_options","load_callback","simulate_data_only","simulate_visual","keyboard_data","randomization","sampleExGaussian","getValidKey","swipe_data","random","default_data","data","mergeSimulationData","ensureSimulationDataConsistency","create_simulation_data","getDisplayElement","test_stimulus_div","pageX","fire","target","pressKey"],"mappings":"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"}