{"code":"import { __awaiter } from \"tslib\";\nimport interact from \"interactjs\";\nimport { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"html-swipe-response\",\n    parameters: {\n        /** The HTML string to be displayed. */\n        stimulus: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        keyboard_choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Keyboard Choices\",\n            default: [\"ArrowLeft\", \"ArrowRight\"],\n        },\n        /** Any content here will be displayed below the stimulus. */\n        prompt: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /** How long to show the stimulus. */\n        stimulus_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Stimulus duration\",\n            default: null,\n        },\n        /** How long to show trial before it ends. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** If true, trial will end when subject makes a response. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /** How far away from the center should the subject have to swipe for a\n         * left/right response to be recorded. */\n        swipe_threshold: {\n            type: ParameterType.INT,\n            pretty_name: \"Swipe translation threshold\",\n            default: 20,\n        },\n        /** The offscreen coordinate for the swipe animation */\n        swipe_offscreen_coordinate: {\n            type: ParameterType.INT,\n            pretty_name: \"Swipe offscreen coordinate\",\n            default: 1000,\n        },\n        /** How much should the swipe animation rotate the stimulus */\n        swipe_animation_max_rotation: {\n            type: ParameterType.INT,\n            pretty_name: \"Swipe animation max rotation\",\n            default: 20,\n        },\n        /** How long should the swipe animation last in milliseconds. Set this to\n         * zero to disable the animation. This will not be included in the reaction\n         * time. */\n        swipe_animation_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Swipe animation duration (ms)\",\n            default: 250,\n        },\n    },\n};\n/**\n * **html-swipe-response**\n * jsPsych plugin for displaying a stimulus and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-swipe-response/ html-swipe-response plugin documentation on jspsych.org}\n */\nclass HtmlSwipeResponsePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        // display stimulus\n        let new_html = '<div id=\"jspsych-html-swipe-response-stimulus\">' + trial.stimulus + \"</div>\";\n        // add prompt\n        if (trial.prompt !== null) {\n            new_html += trial.prompt;\n        }\n        // draw\n        display_element.innerHTML = new_html;\n        // store response\n        let response = {\n            rt: null,\n            key: null,\n            swipe: null,\n            source: null,\n        };\n        const stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n        let position = {\n            x: 0,\n            y: 0,\n            rotation: 0,\n        };\n        const setPosition = (coordinates) => {\n            const { x = 0, y = 0, rotation = 0 } = coordinates;\n            position = { x, y, rotation };\n            stimulus_div.style.transform = `translate3D(${x}px, ${y}px, 0) rotate(${rotation}deg)`;\n        };\n        const resetPosition = () => __awaiter(this, void 0, void 0, function* () {\n            stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${trial.swipe_animation_duration / 1000}s ease-in`;\n            setPosition({ x: 0, y: 0, rotation: 0 });\n            stimulus_div.style.transition = null;\n        });\n        const dragMoveListener = (event) => {\n            const x = position.x + event.delta.x;\n            const y = position.y + event.delta.y;\n            let rotation = 0;\n            if (position.x > 0) {\n                rotation = Math.min(trial.swipe_animation_max_rotation, position.x / 4);\n            }\n            else {\n                rotation = Math.max(-trial.swipe_animation_max_rotation, position.x / 4);\n            }\n            setPosition({ x: x, y: y, rotation });\n        };\n        // start time\n        const start_time = performance.now();\n        const sendCardToLeft = () => __awaiter(this, void 0, void 0, function* () {\n            stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${trial.swipe_animation_duration / 1000}s ease-in`;\n            setPosition({ x: -trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n        });\n        const sendCardToRight = () => __awaiter(this, void 0, void 0, function* () {\n            stimulus_div.style.transition = `${trial.swipe_animation_duration / 1000}s ease-in-out, ${trial.swipe_animation_duration / 1000}s ease-in`;\n            setPosition({ x: trial.swipe_offscreen_coordinate, y: position.y, rotation: 0 });\n        });\n        // after a valid response, the stimulus will have the CSS class 'responded'\n        // which can be used to provide visual feedback that a response was recorded\n        const toggle_css_respond = () => {\n            display_element.querySelector(\"#jspsych-html-swipe-response-stimulus\").className +=\n                \" responded\";\n        };\n        // function to handle swipe responses by the subject\n        const after_swipe_response = (left_or_right) => {\n            toggle_css_respond();\n            if (left_or_right !== null) {\n                // measure rt\n                const end_time = performance.now();\n                const rt = Math.round(end_time - start_time);\n                response = {\n                    rt: rt,\n                    key: null,\n                    swipe: left_or_right,\n                    source: \"swipe\",\n                };\n            }\n            if (trial.response_ends_trial) {\n                if (trial.swipe_animation_duration > 0) {\n                    this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n                }\n                else {\n                    end_trial();\n                }\n            }\n        };\n        interact(stimulus_div).draggable({\n            inertia: false,\n            autoScroll: true,\n            modifiers: [\n                interact.modifiers.restrictRect({\n                    endOnly: true,\n                }),\n            ],\n            listeners: {\n                move: dragMoveListener,\n                end: () => {\n                    if (position.x < -trial.swipe_threshold) {\n                        sendCardToLeft();\n                        after_swipe_response(\"left\");\n                    }\n                    else if (position.x > trial.swipe_threshold) {\n                        sendCardToRight();\n                        after_swipe_response(\"right\");\n                    }\n                    else {\n                        resetPosition();\n                    }\n                },\n            },\n        });\n        // function to handle responses by the subject\n        const after_keyboard_response = (info) => {\n            toggle_css_respond();\n            // only record the first response\n            if (response.key == null) {\n                response = Object.assign({ source: \"keyboard\", swipe: null }, info);\n            }\n            if (response.key.toLowerCase() == trial.keyboard_choices[0].toLowerCase()) {\n                sendCardToLeft();\n            }\n            else if (response.key.toLowerCase() == trial.keyboard_choices[1].toLowerCase()) {\n                sendCardToRight();\n            }\n            if (trial.response_ends_trial) {\n                if (trial.swipe_animation_duration > 0) {\n                    this.jsPsych.pluginAPI.setTimeout(end_trial, trial.swipe_animation_duration);\n                }\n                else {\n                    end_trial();\n                }\n            }\n        };\n        let keyboardListener;\n        // start the response listener\n        if (trial.keyboard_choices != \"NO_KEYS\") {\n            keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n                callback_function: after_keyboard_response,\n                valid_responses: trial.keyboard_choices,\n                rt_method: \"performance\",\n                persist: false,\n                allow_held_key: false,\n            });\n        }\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // kill keyboard listeners\n            if (typeof keyboardListener !== \"undefined\") {\n                this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n            }\n            interact(stimulus_div).unset();\n            // gather the data to store for the trial\n            const trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                keyboard_response: response.key,\n                swipe_response: response.swipe,\n                response_source: response.source,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n        };\n        // hide stimulus if stimulus_duration is set\n        if (trial.stimulus_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(() => {\n                display_element.querySelector(\"#jspsych-html-swipe-response-stimulus\").style.visibility = \"hidden\";\n            }, trial.stimulus_duration);\n        }\n        // end trial if trial_duration is set\n        if (trial.trial_duration !== null) {\n            this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n        }\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const keyboard_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n            swipe_response: null,\n            response_source: \"keyboard\",\n        };\n        const swipe_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            swipe_response: Math.random() < 0.5 ? \"left\" : \"right\",\n            keyboard_response: null,\n            response_source: \"swipe\",\n        };\n        const default_data = Math.random() < 0.5 ? keyboard_data : swipe_data;\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        this.trial(display_element, trial);\n        load_callback();\n        if (data.rt !== null) {\n            if (data.swipe_response !== null) {\n                const test_stimulus_div = document.getElementById(\"jspsych-html-swipe-response-stimulus\");\n                let pageX = trial.swipe_threshold * 5;\n                if (data.swipe_response === \"left\") {\n                    pageX *= -1;\n                }\n                setTimeout(() => {\n                    interact(test_stimulus_div).fire({\n                        type: \"dragstart\",\n                        target: test_stimulus_div,\n                    });\n                    interact(test_stimulus_div).fire({\n                        type: \"dragmove\",\n                        target: test_stimulus_div,\n                        delta: { x: pageX, y: 0 },\n                    });\n                    interact(test_stimulus_div).fire({\n                        type: \"dragend\",\n                        target: test_stimulus_div,\n                        delta: { x: pageX, y: 0 },\n                    });\n                }, data.rt);\n            }\n            else {\n                this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n            }\n        }\n    }\n}\nHtmlSwipeResponsePlugin.info = info;\nexport default HtmlSwipeResponsePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/interactjs/index.d.ts","/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-html-swipe-response/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"html-swipe-response\";\n    readonly parameters: {\n        /** The HTML string to be displayed. */\n        readonly stimulus: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        readonly keyboard_choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Keyboard Choices\";\n            readonly default: readonly [\"ArrowLeft\", \"ArrowRight\"];\n        };\n        /** Any content here will be displayed below the stimulus. */\n        readonly prompt: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /** How long to show the stimulus. */\n        readonly stimulus_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Stimulus duration\";\n            readonly default: any;\n        };\n        /** How long to show trial before it ends. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** If true, trial will end when subject makes a response. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /** How far away from the center should the subject have to swipe for a\n         * left/right response to be recorded. */\n        readonly swipe_threshold: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Swipe translation threshold\";\n            readonly default: 20;\n        };\n        /** The offscreen coordinate for the swipe animation */\n        readonly swipe_offscreen_coordinate: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Swipe offscreen coordinate\";\n            readonly default: 1000;\n        };\n        /** How much should the swipe animation rotate the stimulus */\n        readonly swipe_animation_max_rotation: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Swipe animation max rotation\";\n            readonly default: 20;\n        };\n        /** How long should the swipe animation last in milliseconds. Set this to\n         * zero to disable the animation. This will not be included in the reaction\n         * time. */\n        readonly swipe_animation_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Swipe animation duration (ms)\";\n            readonly default: 250;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **html-swipe-response**\n * jsPsych plugin for displaying a stimulus and getting a swipe response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-html-swipe-response/ html-swipe-response plugin documentation on jspsych.org}\n */\ndeclare class HtmlSwipeResponsePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"html-swipe-response\";\n        readonly parameters: {\n            /** The HTML string to be displayed. */\n            readonly stimulus: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n            readonly keyboard_choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Keyboard Choices\";\n                readonly default: readonly [\"ArrowLeft\", \"ArrowRight\"];\n            };\n            /** Any content here will be displayed below the stimulus. */\n            readonly prompt: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /** How long to show the stimulus. */\n            readonly stimulus_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Stimulus duration\";\n                readonly default: any;\n            };\n            /** How long to show trial before it ends. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** If true, trial will end when subject makes a response. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /** How far away from the center should the subject have to swipe for a\n             * left/right response to be recorded. */\n            readonly swipe_threshold: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Swipe translation threshold\";\n                readonly default: 20;\n            };\n            /** The offscreen coordinate for the swipe animation */\n            readonly swipe_offscreen_coordinate: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Swipe offscreen coordinate\";\n                readonly default: 1000;\n            };\n            /** How much should the swipe animation rotate the stimulus */\n            readonly swipe_animation_max_rotation: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Swipe animation max rotation\";\n                readonly default: 20;\n            };\n            /** How long should the swipe animation last in milliseconds. Set this to\n             * zero to disable the animation. This will not be included in the reaction\n             * time. */\n            readonly swipe_animation_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Swipe animation duration (ms)\";\n                readonly default: 250;\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private create_simulation_data;\n    private simulate_data_only;\n    private simulate_visual;\n}\nexport default HtmlSwipeResponsePlugin;\n"}}
