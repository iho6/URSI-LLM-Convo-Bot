{"code":"import { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"audio-multi-response\",\n    parameters: {\n        /** The HTML string to be displayed. */\n        stimulus: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Stimulus\",\n            default: undefined,\n        },\n        /** Array containing the label(s) for the button(s). */\n        button_choices: {\n            type: ParameterType.STRING,\n            pretty_name: \"Button Choices\",\n            default: [],\n            array: true,\n        },\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        keyboard_choices: {\n            type: ParameterType.KEYS,\n            pretty_name: \"Keyboard Choices\",\n            default: \"NO_KEYS\",\n        },\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n        button_html: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Button HTML\",\n            default: '<button class=\"jspsych-btn\">%choice%</button>',\n            array: true,\n        },\n        /** Any content here will be displayed below the stimulus. */\n        prompt: {\n            type: ParameterType.HTML_STRING,\n            pretty_name: \"Prompt\",\n            default: null,\n        },\n        /** Whether to display the prompt above the buttons. */\n        prompt_above_buttons: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Prompt above buttons\",\n            default: false,\n        },\n        /** How long to show trial before it ends. */\n        trial_duration: {\n            type: ParameterType.INT,\n            pretty_name: \"Trial duration\",\n            default: null,\n        },\n        /** The vertical margin of the button. */\n        margin_vertical: {\n            type: ParameterType.STRING,\n            pretty_name: \"Margin vertical\",\n            default: \"0px\",\n        },\n        /** The horizontal margin of the button. */\n        margin_horizontal: {\n            type: ParameterType.STRING,\n            pretty_name: \"Margin horizontal\",\n            default: \"8px\",\n        },\n        /** If true, trial will end when subject makes a response. */\n        response_ends_trial: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response ends trial\",\n            default: true,\n        },\n        /** If true, then the trial will end as soon as the audio file finishes playing. */\n        trial_ends_after_audio: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Trial ends after audio\",\n            default: false,\n        },\n        /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n        response_allowed_while_playing: {\n            type: ParameterType.BOOL,\n            pretty_name: \"Response allowed while playing\",\n            default: true,\n        },\n    },\n};\n/**\n * **audio-multi-response**\n * jsPsych plugin for playing an audio file and getting a button or keyboard response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-multi-response/ audio-multi-response plugin documentation on jspsych.org}\n */\nclass AudioMultiResponsePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial, on_load) {\n        // hold the .resolve() function from the Promise that ends the trial\n        let trial_complete;\n        // setup stimulus\n        var context = this.jsPsych.pluginAPI.audioContext();\n        // store response\n        let response = {\n            rt: null,\n            key: null,\n            button: null,\n            source: null,\n        };\n        // record webaudio context start time\n        var startTime;\n        // load audio file\n        this.jsPsych.pluginAPI\n            .getAudioBuffer(trial.stimulus)\n            .then((buffer) => {\n            if (context !== null) {\n                this.audio = context.createBufferSource();\n                this.audio.buffer = buffer;\n                this.audio.connect(context.destination);\n            }\n            else {\n                this.audio = buffer;\n                this.audio.currentTime = 0;\n            }\n            setupTrial();\n        })\n            .catch((err) => {\n            console.error(`Failed to load audio file \"${trial.stimulus}\". Try checking the file path. We recommend using the preload plugin to load audio files.`);\n            console.error(err);\n        });\n        const setupTrial = () => {\n            // set up end event if trial needs it\n            if (trial.trial_ends_after_audio) {\n                this.audio.addEventListener(\"ended\", end_trial);\n            }\n            // enable buttons after audio ends if necessary\n            if (!trial.response_allowed_while_playing && !trial.trial_ends_after_audio) {\n                this.audio.addEventListener(\"ended\", setup_keyboard_listener);\n                this.audio.addEventListener(\"ended\", enable_buttons);\n            }\n            //display buttons\n            var buttons = [];\n            if (Array.isArray(trial.button_html)) {\n                if (trial.button_html.length == trial.button_choices.length) {\n                    buttons = trial.button_html;\n                }\n                else {\n                    console.error(\"Error in audio-multi-response plugin. The length of the button_html array does not equal the length of the choices array\");\n                }\n            }\n            else {\n                for (var i = 0; i < trial.button_choices.length; i++) {\n                    buttons.push(trial.button_html);\n                }\n            }\n            let html = '<div id=\"jspsych-audio-multi-response-btngroup\">';\n            for (var i = 0; i < trial.button_choices.length; i++) {\n                var str = buttons[i].replace(/%choice%/g, trial.button_choices[i]);\n                html +=\n                    '<div class=\"jspsych-audio-multi-response-button\" style=\"cursor: pointer; display: inline-block; margin:' +\n                        trial.margin_vertical +\n                        \" \" +\n                        trial.margin_horizontal +\n                        '\" id=\"jspsych-audio-multi-response-button-' +\n                        i +\n                        '\" data-choice=\"' +\n                        i +\n                        '\">' +\n                        str +\n                        \"</div>\";\n            }\n            html += \"</div>\";\n            //show prompt if there is one\n            if (trial.prompt !== null) {\n                if (trial.prompt_above_buttons) {\n                    html = '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\" + html;\n                }\n                else {\n                    html += '<div id=\"jspsych-audio-multi-response-prompt\">' + trial.prompt + \"</div>\";\n                }\n            }\n            display_element.innerHTML = html;\n            if (trial.response_allowed_while_playing) {\n                enable_buttons();\n                setup_keyboard_listener();\n            }\n            else {\n                disable_buttons();\n            }\n            // start time\n            startTime = performance.now();\n            // start audio\n            if (context !== null) {\n                startTime = context.currentTime;\n                this.audio.start(startTime);\n            }\n            else {\n                this.audio.play();\n            }\n            // end trial if time limit is set\n            if (trial.trial_duration !== null) {\n                this.jsPsych.pluginAPI.setTimeout(() => {\n                    end_trial();\n                }, trial.trial_duration);\n            }\n            on_load();\n        };\n        // function to end trial when it is time\n        const end_trial = () => {\n            // kill any remaining setTimeout handlers\n            this.jsPsych.pluginAPI.clearAllTimeouts();\n            // stop the audio file if it is playing\n            // remove end event listeners if they exist\n            if (context !== null) {\n                this.audio.stop();\n            }\n            else {\n                this.audio.pause();\n            }\n            this.audio.removeEventListener(\"ended\", end_trial);\n            this.audio.removeEventListener(\"ended\", setup_keyboard_listener);\n            this.audio.removeEventListener(\"ended\", enable_buttons);\n            // kill keyboard listeners\n            this.jsPsych.pluginAPI.cancelAllKeyboardResponses();\n            // gather the data to store for the trial\n            const trial_data = {\n                rt: response.rt,\n                stimulus: trial.stimulus,\n                keyboard_response: response.key,\n                button_response: response.button,\n                response_source: response.source,\n            };\n            // clear the display\n            display_element.innerHTML = \"\";\n            // move on to the next trial\n            this.jsPsych.finishTrial(trial_data);\n            trial_complete();\n        };\n        function button_response(e) {\n            var choice = e.currentTarget.getAttribute(\"data-choice\"); // don't use dataset for jsdom compatibility\n            after_button_response(choice);\n        }\n        function disable_buttons() {\n            var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\n            for (var i = 0; i < btns.length; i++) {\n                var btn_el = btns[i].querySelector(\"button\");\n                if (btn_el) {\n                    btn_el.disabled = true;\n                }\n                btns[i].removeEventListener(\"click\", button_response);\n            }\n        }\n        function enable_buttons() {\n            var btns = document.querySelectorAll(\".jspsych-audio-multi-response-button\");\n            for (var i = 0; i < btns.length; i++) {\n                var btn_el = btns[i].querySelector(\"button\");\n                if (btn_el) {\n                    btn_el.disabled = false;\n                }\n                btns[i].addEventListener(\"click\", button_response);\n            }\n        }\n        // function to handle responses by the subject\n        function after_button_response(choice) {\n            // measure rt\n            var endTime = performance.now();\n            var rt = Math.round(endTime - startTime);\n            if (context !== null) {\n                endTime = context.currentTime;\n                rt = Math.round((endTime - startTime) * 1000);\n            }\n            response.button = parseInt(choice);\n            response.rt = rt;\n            response.source = \"button\";\n            // disable all the buttons after a response\n            disable_buttons();\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        }\n        // function to handle keyboard responses by the subject\n        const after_keyboard_response = (info) => {\n            // only record the first response\n            if (response.key == null) {\n                response = Object.assign({ source: \"keyboard\", button: null }, info);\n            }\n            if (trial.response_ends_trial) {\n                end_trial();\n            }\n        };\n        const setup_keyboard_listener = () => {\n            // start the keyboard response listener\n            if (trial.keyboard_choices != \"NO_KEYS\") {\n                let responseArgs;\n                if (context !== null) {\n                    responseArgs = {\n                        rt_method: \"audio\",\n                        audio_context: context,\n                        audio_context_start_time: startTime,\n                    };\n                }\n                else {\n                    responseArgs = {\n                        rt_method: \"performance\",\n                    };\n                }\n                this.jsPsych.pluginAPI.getKeyboardResponse(Object.assign({ callback_function: after_keyboard_response, valid_responses: trial.keyboard_choices, persist: false, allow_held_key: false }, responseArgs));\n            }\n        };\n        return new Promise((resolve) => {\n            trial_complete = resolve;\n        });\n    }\n    simulate(trial, simulation_mode, simulation_options, load_callback) {\n        if (simulation_mode == \"data-only\") {\n            load_callback();\n            this.simulate_data_only(trial, simulation_options);\n        }\n        if (simulation_mode == \"visual\") {\n            this.simulate_visual(trial, simulation_options, load_callback);\n        }\n    }\n    create_simulation_data(trial, simulation_options) {\n        const keyboard_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            keyboard_response: this.jsPsych.pluginAPI.getValidKey(trial.keyboard_choices),\n            button_response: null,\n            response_source: \"keyboard\",\n        };\n        const button_data = {\n            stimulus: trial.stimulus,\n            rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n            button_response: this.jsPsych.randomization.randomInt(0, trial.button_choices.length - 1),\n            keyboard_response: null,\n            response_source: \"button\",\n        };\n        const default_data = Math.random() < 0.5 ? keyboard_data : button_data;\n        const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n        this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n        return data;\n    }\n    simulate_data_only(trial, simulation_options) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        this.jsPsych.finishTrial(data);\n    }\n    simulate_visual(trial, simulation_options, load_callback) {\n        const data = this.create_simulation_data(trial, simulation_options);\n        const display_element = this.jsPsych.getDisplayElement();\n        const respond = () => {\n            if (data.rt !== null) {\n                if (data.button_response !== null) {\n                    this.jsPsych.pluginAPI.clickTarget(display_element.querySelector(`div[data-choice=\"${data.response}\"] button`), data.rt);\n                }\n                else {\n                    this.jsPsych.pluginAPI.pressKey(data.keyboard_response, data.rt);\n                }\n            }\n        };\n        this.trial(display_element, trial, () => {\n            load_callback();\n            if (!trial.response_allowed_while_playing) {\n                this.audio.addEventListener(\"ended\", respond);\n            }\n            else {\n                respond();\n            }\n        });\n    }\n}\nAudioMultiResponsePlugin.info = info;\nexport default AudioMultiResponsePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-audio-multi-response/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"audio-multi-response\";\n    readonly parameters: {\n        /** The HTML string to be displayed. */\n        readonly stimulus: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Stimulus\";\n            readonly default: any;\n        };\n        /** Array containing the label(s) for the button(s). */\n        readonly button_choices: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Button Choices\";\n            readonly default: readonly [];\n            readonly array: true;\n        };\n        /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n        readonly keyboard_choices: {\n            readonly type: ParameterType.KEYS;\n            readonly pretty_name: \"Keyboard Choices\";\n            readonly default: \"NO_KEYS\";\n        };\n        /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n        readonly button_html: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Button HTML\";\n            readonly default: \"<button class=\\\"jspsych-btn\\\">%choice%</button>\";\n            readonly array: true;\n        };\n        /** Any content here will be displayed below the stimulus. */\n        readonly prompt: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly pretty_name: \"Prompt\";\n            readonly default: any;\n        };\n        /** Whether to display the prompt above the buttons. */\n        readonly prompt_above_buttons: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Prompt above buttons\";\n            readonly default: false;\n        };\n        /** How long to show trial before it ends. */\n        readonly trial_duration: {\n            readonly type: ParameterType.INT;\n            readonly pretty_name: \"Trial duration\";\n            readonly default: any;\n        };\n        /** The vertical margin of the button. */\n        readonly margin_vertical: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Margin vertical\";\n            readonly default: \"0px\";\n        };\n        /** The horizontal margin of the button. */\n        readonly margin_horizontal: {\n            readonly type: ParameterType.STRING;\n            readonly pretty_name: \"Margin horizontal\";\n            readonly default: \"8px\";\n        };\n        /** If true, trial will end when subject makes a response. */\n        readonly response_ends_trial: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response ends trial\";\n            readonly default: true;\n        };\n        /** If true, then the trial will end as soon as the audio file finishes playing. */\n        readonly trial_ends_after_audio: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Trial ends after audio\";\n            readonly default: false;\n        };\n        /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n        readonly response_allowed_while_playing: {\n            readonly type: ParameterType.BOOL;\n            readonly pretty_name: \"Response allowed while playing\";\n            readonly default: true;\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **audio-multi-response**\n * jsPsych plugin for playing an audio file and getting a button or keyboard response\n * @author Adam Richie-Halford\n * @see {@link https://www.jspsych.org/plugins/jspsych-audio-multi-response/ audio-multi-response plugin documentation on jspsych.org}\n */\ndeclare class AudioMultiResponsePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"audio-multi-response\";\n        readonly parameters: {\n            /** The HTML string to be displayed. */\n            readonly stimulus: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Stimulus\";\n                readonly default: any;\n            };\n            /** Array containing the label(s) for the button(s). */\n            readonly button_choices: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Button Choices\";\n                readonly default: readonly [];\n                readonly array: true;\n            };\n            /** Array containing the key(s) the subject is allowed to press to respond to the stimulus. */\n            readonly keyboard_choices: {\n                readonly type: ParameterType.KEYS;\n                readonly pretty_name: \"Keyboard Choices\";\n                readonly default: \"NO_KEYS\";\n            };\n            /** The HTML for creating button. Can create own style. Use the \"%choice%\" string to indicate where the label from the choices parameter should be inserted. */\n            readonly button_html: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Button HTML\";\n                readonly default: \"<button class=\\\"jspsych-btn\\\">%choice%</button>\";\n                readonly array: true;\n            };\n            /** Any content here will be displayed below the stimulus. */\n            readonly prompt: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly pretty_name: \"Prompt\";\n                readonly default: any;\n            };\n            /** Whether to display the prompt above the buttons. */\n            readonly prompt_above_buttons: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Prompt above buttons\";\n                readonly default: false;\n            };\n            /** How long to show trial before it ends. */\n            readonly trial_duration: {\n                readonly type: ParameterType.INT;\n                readonly pretty_name: \"Trial duration\";\n                readonly default: any;\n            };\n            /** The vertical margin of the button. */\n            readonly margin_vertical: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Margin vertical\";\n                readonly default: \"0px\";\n            };\n            /** The horizontal margin of the button. */\n            readonly margin_horizontal: {\n                readonly type: ParameterType.STRING;\n                readonly pretty_name: \"Margin horizontal\";\n                readonly default: \"8px\";\n            };\n            /** If true, trial will end when subject makes a response. */\n            readonly response_ends_trial: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response ends trial\";\n                readonly default: true;\n            };\n            /** If true, then the trial will end as soon as the audio file finishes playing. */\n            readonly trial_ends_after_audio: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Trial ends after audio\";\n                readonly default: false;\n            };\n            /** If true, then responses are allowed while the audio is playing. If false, then the audio must finish playing before a response is accepted. */\n            readonly response_allowed_while_playing: {\n                readonly type: ParameterType.BOOL;\n                readonly pretty_name: \"Response allowed while playing\";\n                readonly default: true;\n            };\n        };\n    };\n    private audio;\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>, on_load: () => void): Promise<unknown>;\n    simulate(trial: TrialType<Info>, simulation_mode: any, simulation_options: any, load_callback: () => void): void;\n    private create_simulation_data;\n    private simulate_data_only;\n    private simulate_visual;\n}\nexport default AudioMultiResponsePlugin;\n"}}
