{"version":3,"file":"index.browser.min.js","sources":["../src/index.ts"],"sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nconst info = <const>{\n  name: \"pipe\",\n  parameters: {\n    /**\n     * The 12-character experiment ID provided by pipe.jspsych.org.\n     */\n    experiment_id: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /**\n     * The action to take. Can be `\"save\"`, `\"saveBase64\"`, or `\"condition\"`.\n     * If `\"save\"`, the data will be saved to the OSF.\n     * If `\"saveBase64\"`, the data should be a base64-encoded string and will be decoded to binary before being saved to the OSF.\n     * If `\"condition\"`, this will get the next condition for the experiment and save it in the data for this trial.\n     */\n    action: {\n      type: ParameterType.STRING,\n      default: undefined,\n    },\n    /**\n     * Name of the file to create on the OSF. It should include the extension.\n     * If the file already exists, no data will be saved.\n     */\n    filename: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /**\n     * A string-based representation of the data to save.\n     *\n     * To save JSON, you can use `()=>jsPsych.data.get().json()`.\n     * To save CSV, you can use `()=>jsPsych.data.get().csv()`.\n     *\n     * The use of a function is necessary to get the updated data at\n     * the time of saving.\n     */\n    data_string: {\n      type: ParameterType.STRING,\n      default: null,\n    },\n    /**\n     * An html message to be displayed above the loading graphics in the experiment during data save.\n     */\n    wait_message: {\n      type: ParameterType.HTML_STRING,\n      default: `<p>Saving data. Please do not close this page.</p>`,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * **jsPsychPipe**\n *\n * This plugin facilitates communication with DataPipe (https://pipe.jspsych.org), a tool for\n * sending data from jsPsych experiments to the OSF (https://osf.io/). You will need a DataPipe\n * account to use this plugin.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass PipePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    this.run(display_element, trial);\n  }\n\n  private async run(display_element: HTMLElement, trial: TrialType<Info>) {\n    // show circular progress bar\n    const progressCSS = `\n      .spinner {\n        animation: rotate 2s linear infinite;\n        width: 50px;\n        height: 50px;\n      }\n        \n      .spinner .path {\n        stroke: rgb(25,25,25);\n        stroke-linecap: round;\n        animation: dash 1.5s ease-in-out infinite;\n      }\n\n      @keyframes rotate {\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n      \n      @keyframes dash {\n        0% {\n          stroke-dasharray: 1, 150;\n          stroke-dashoffset: 0;\n        }\n        50% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -35;\n        }\n        100% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -124;\n        }\n      }\n    `;\n\n    const progressHTML = `\n    <style>${progressCSS}</style>\n      ${trial.wait_message}\n      <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n        <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n      </svg>`;\n\n    display_element.innerHTML = progressHTML;\n\n    let result: any;\n    if (trial.action === \"save\") {\n      result = await PipePlugin.saveData(trial.experiment_id, trial.filename, trial.data_string);\n    }\n    if (trial.action === \"saveBase64\") {\n      result = await PipePlugin.saveBase64Data(\n        trial.experiment_id,\n        trial.filename,\n        trial.data_string\n      );\n    }\n    if (trial.action === \"condition\") {\n      result = await PipePlugin.getCondition(trial.experiment_id);\n    }\n\n    display_element.innerHTML = \"\";\n\n    // data saving\n    var trial_data = {\n      result: result,\n      success: result.error ? false : true,\n    };\n\n    // end trial\n    this.jsPsych.finishTrial(trial_data);\n  }\n\n  /**\n   * Save data to the OSF using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @param filename A unique filename to save the data to. It should include the extension.\n   * @param data The data as a string. Any text-basd format (e.g., JSON, CSV, TXT) is acceptable.\n   * @returns The response from the server.\n   */\n  static async saveData(expID: string, filename: string, data: string): Promise<any> {\n    if (!expID || !filename || !data) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"https://pipe.jspsych.org/api/data/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n          filename: filename,\n          data: data,\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    return await response.json();\n  }\n\n  /**\n   * Save base64-encoded data to the OSF using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @param filename A unique filename to save the data to. It should include the extension.\n   * @param data The data as a base64-encoded string. It will be decoded by the server before being stored in the OSF.\n   * @returns The response from the server.\n   */\n  static async saveBase64Data(expID: string, filename: string, data: string): Promise<any> {\n    if (!expID || !filename || !data) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"https://pipe.jspsych.org/api/base64/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n          filename: filename,\n          data: data,\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    return await response.json();\n  }\n\n  /**\n   * Get the condition assignment for the current participant using pipe.jspsych.org.\n   *\n   * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n   * @returns The condition assignment as an integer.\n   */\n  static async getCondition(expID: string): Promise<any> {\n    if (!expID) {\n      throw new Error(\"Missing required parameter(s).\");\n    }\n    let response: Response;\n    try {\n      response = await fetch(\"https://pipe.jspsych.org/api/condition/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"*/*\",\n        },\n        body: JSON.stringify({\n          experimentID: expID,\n        }),\n      });\n    } catch (error) {\n      return error;\n    }\n    const result = await response.json();\n    return result.condition;\n  }\n}\n\nexport default PipePlugin;\n"],"names":["info","name","parameters","experiment_id","type","ParameterType","STRING","default","undefined","action","filename","data_string","wait_message","HTML_STRING","PipePlugin","jsPsych","_classCallCheck","this","key","value","expID","data","_context2","next","Error","prev","fetch","method","headers","Accept","body","JSON","stringify","experimentID","response","sent","t0","abrupt","json","stop","_callee2","_context3","_callee3","_context4","result","condition","_callee4","display_element","trial","run","progressHTML","concat","innerHTML","_context","saveData","saveBase64Data","getCondition","trial_data","success","error","finishTrial","_callee"],"mappings":"quOAEA,IAAMA,EAAc,CAClBC,KAAM,OACNC,WAAY,CAIVC,cAAe,CACbC,KAAMC,EAAaA,cAACC,OACpBC,aAASC,GAQXC,OAAQ,CACNL,KAAMC,EAAaA,cAACC,OACpBC,aAASC,GAMXE,SAAU,CACRN,KAAMC,EAAaA,cAACC,OACpBC,QAAS,MAWXI,YAAa,CACXP,KAAMC,EAAaA,cAACC,OACpBC,QAAS,MAKXK,aAAc,CACZR,KAAMC,EAAaA,cAACQ,YACpBN,QAAA,wDAiBAO,EAAU,WAGd,SAAAA,EAAoBC,gGAAgBC,MAAAF,GAAhBG,KAAOF,QAAPA,CAAmB,WA0KtC,SA1KuCD,IA+ExC,CAAA,CAAAI,IAAA,WAAAC,MAQA,SAAsBC,EAAeV,EAAkBW,gIAChDD,GAAUV,GAAaW,EAAI,CAAAC,EAAAC,KAAA,EAAA,KAAA,CAAA,MACxB,IAAIC,MAAM,kCAAiC,KAAA,EAItC,OAJsCF,EAAAG,KAAA,EAAAH,EAAAC,KAAA,EAIhCG,MAAM,qCAAsC,CAC3DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,OAEVC,KAAMC,KAAKC,UAAU,CACnBC,aAAcb,EACdV,SAAUA,EACVW,KAAMA,MAER,KAAA,EAXFa,EAAQZ,EAAAa,KAAAb,EAAAC,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAD,EAAAG,KAAA,EAAAH,EAAAc,GAAAd,EAAA,MAAA,GAAAA,EAAAe,OAAAf,SAAAA,EAAAc,IAAA,KAAA,GAeH,OAfGd,EAAAC,KAAA,GAeGW,EAASI,OAAM,KAAA,GAAA,OAAAhB,EAAAe,OAAAf,SAAAA,EAAAa,MAAA,KAAA,GAAA,IAAA,MAAA,OAAAb,EAAAiB,OAAA,GAAAC,EAAA,KAAA,CAAA,CAAA,EAAA,IAC7B,IAAA,GAED,CAAAtB,IAAA,iBAAAC,MAQA,SAA4BC,EAAeV,EAAkBW,gIACtDD,GAAUV,GAAaW,EAAI,CAAAoB,EAAAlB,KAAA,EAAA,KAAA,CAAA,MACxB,IAAIC,MAAM,kCAAiC,KAAA,EAItC,OAJsCiB,EAAAhB,KAAA,EAAAgB,EAAAlB,KAAA,EAIhCG,MAAM,uCAAwC,CAC7DC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,OAEVC,KAAMC,KAAKC,UAAU,CACnBC,aAAcb,EACdV,SAAUA,EACVW,KAAMA,MAER,KAAA,EAXFa,EAAQO,EAAAN,KAAAM,EAAAlB,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAkB,EAAAhB,KAAA,EAAAgB,EAAAL,GAAAK,EAAA,MAAA,GAAAA,EAAAJ,OAAAI,SAAAA,EAAAL,IAAA,KAAA,GAeH,OAfGK,EAAAlB,KAAA,GAeGW,EAASI,OAAM,KAAA,GAAA,OAAAG,EAAAJ,OAAAI,SAAAA,EAAAN,MAAA,KAAA,GAAA,IAAA,MAAA,OAAAM,EAAAF,OAAA,GAAAG,EAAA,KAAA,CAAA,CAAA,EAAA,IAC7B,IAAA,GAED,CAAAxB,IAAA,eAAAC,MAMA,SAA0BC,kIACnBA,EAAK,CAAAuB,EAAApB,KAAA,EAAA,KAAA,CAAA,MACF,IAAIC,MAAM,kCAAiC,KAAA,EAItC,OAJsCmB,EAAAlB,KAAA,EAAAkB,EAAApB,KAAA,EAIhCG,MAAM,0CAA2C,CAChEC,OAAQ,OACRC,QAAS,CACP,eAAgB,mBAChBC,OAAQ,OAEVC,KAAMC,KAAKC,UAAU,CACnBC,aAAcb,MAEhB,KAAA,EATFc,EAAQS,EAAAR,KAAAQ,EAAApB,KAAA,GAAA,MAAA,KAAA,EAAA,OAAAoB,EAAAlB,KAAA,EAAAkB,EAAAP,GAAAO,EAAA,MAAA,GAAAA,EAAAN,OAAAM,SAAAA,EAAAP,IAAA,KAAA,GAaK,OAbLO,EAAApB,KAAA,GAaWW,EAASI,OAAM,KAAA,GAAxB,OAANM,EAAMD,EAAAR,KAAAQ,EAAAN,OACLO,SAAAA,EAAOC,WAAS,KAAA,GAAA,IAAA,MAAA,OAAAF,EAAAJ,OAAA,GAAAO,EAAA,KAAA,CAAA,CAAA,EAAA,IACxB,IAAA,OA1KuC,CAAA,CAAA5B,IAAA,QAAAC,MAExC,SAAM4B,EAA8BC,GAClC/B,KAAKgC,IAAIF,EAAiBC,EAC5B,GAAC,CAAA9B,IAAA,MAAAC,MAEa,SAAI4B,EAA8BC,iIA4CL,GAPnCE,EAAY,gBAAAC,OAnCD,2uBAoCGA,OAChBH,EAAMpC,aAAY,+JAKtBmC,EAAgBK,UAAYF,EAGP,SAAjBF,EAAMvC,OAAiB,CAAA4C,EAAA9B,KAAA,EAAA,KAAA,CAChB,OADgB8B,EAAA9B,KAAA,EACVT,EAAWwC,SAASN,EAAM7C,cAAe6C,EAAMtC,SAAUsC,EAAMrC,aAAY,KAAA,EAA1FiC,EAAMS,EAAAlB,KAAA,KAAA,EAAA,GAEa,eAAjBa,EAAMvC,OAAuB,CAAA4C,EAAA9B,KAAA,GAAA,KAAA,CACtB,OADsB8B,EAAA9B,KAAA,GAChBT,EAAWyC,eACxBP,EAAM7C,cACN6C,EAAMtC,SACNsC,EAAMrC,aACP,KAAA,GAJDiC,EAAMS,EAAAlB,KAAA,KAAA,GAAA,GAMa,cAAjBa,EAAMvC,OAAsB,CAAA4C,EAAA9B,KAAA,GAAA,KAAA,CACrB,OADqB8B,EAAA9B,KAAA,GACfT,EAAW0C,aAAaR,EAAM7C,eAAc,KAAA,GAA3DyC,EAAMS,EAAAlB,KAAA,KAAA,GAGRY,EAAgBK,UAAY,GAGxBK,EAAa,CACfb,OAAQA,EACRc,SAASd,EAAOe,OAIlB1C,KAAKF,QAAQ6C,YAAYH,GAAY,KAAA,GAAA,IAAA,MAAA,OAAAJ,EAAAd,OAAA,GAAAsB,EAAA5C,KACtC,IAAA,oFA6FAH,CAAA,CA7Ka,UACPA,EAAId,KAAGA"}