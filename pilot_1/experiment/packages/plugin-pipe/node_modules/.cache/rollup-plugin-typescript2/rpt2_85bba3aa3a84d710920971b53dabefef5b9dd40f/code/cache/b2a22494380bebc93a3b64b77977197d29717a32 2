{"code":"import { __awaiter } from \"tslib\";\nimport { ParameterType } from \"jspsych\";\nconst info = {\n    name: \"pipe\",\n    parameters: {\n        /**\n         * The 12-character experiment ID provided by pipe.jspsych.org.\n         */\n        experiment_id: {\n            type: ParameterType.STRING,\n            default: undefined,\n        },\n        /**\n         * The action to take. Can be `\"save\"`, `\"saveBase64\"`, or `\"condition\"`.\n         * If `\"save\"`, the data will be saved to the OSF.\n         * If `\"saveBase64\"`, the data should be a base64-encoded string and will be decoded to binary before being saved to the OSF.\n         * If `\"condition\"`, this will get the next condition for the experiment and save it in the data for this trial.\n         */\n        action: {\n            type: ParameterType.STRING,\n            default: undefined,\n        },\n        /**\n         * Name of the file to create on the OSF. It should include the extension.\n         * If the file already exists, no data will be saved.\n         */\n        filename: {\n            type: ParameterType.STRING,\n            default: null,\n        },\n        /**\n         * A string-based representation of the data to save.\n         *\n         * To save JSON, you can use `()=>jsPsych.data.get().json()`.\n         * To save CSV, you can use `()=>jsPsych.data.get().csv()`.\n         *\n         * The use of a function is necessary to get the updated data at\n         * the time of saving.\n         */\n        data_string: {\n            type: ParameterType.STRING,\n            default: null,\n        },\n        /**\n         * An html message to be displayed above the loading graphics in the experiment during data save.\n         */\n        wait_message: {\n            type: ParameterType.HTML_STRING,\n            default: `<p>Saving data. Please do not close this page.</p>`,\n        },\n    },\n};\n/**\n * **jsPsychPipe**\n *\n * This plugin facilitates communication with DataPipe (https://pipe.jspsych.org), a tool for\n * sending data from jsPsych experiments to the OSF (https://osf.io/). You will need a DataPipe\n * account to use this plugin.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\nclass PipePlugin {\n    constructor(jsPsych) {\n        this.jsPsych = jsPsych;\n    }\n    trial(display_element, trial) {\n        this.run(display_element, trial);\n    }\n    run(display_element, trial) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // show circular progress bar\n            const progressCSS = `\n      .spinner {\n        animation: rotate 2s linear infinite;\n        width: 50px;\n        height: 50px;\n      }\n        \n      .spinner .path {\n        stroke: rgb(25,25,25);\n        stroke-linecap: round;\n        animation: dash 1.5s ease-in-out infinite;\n      }\n\n      @keyframes rotate {\n        100% {\n          transform: rotate(360deg);\n        }\n      }\n      \n      @keyframes dash {\n        0% {\n          stroke-dasharray: 1, 150;\n          stroke-dashoffset: 0;\n        }\n        50% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -35;\n        }\n        100% {\n          stroke-dasharray: 90, 150;\n          stroke-dashoffset: -124;\n        }\n      }\n    `;\n            const progressHTML = `\n    <style>${progressCSS}</style>\n      ${trial.wait_message}\n      <svg class=\"spinner\" viewBox=\"0 0 50 50\">\n        <circle class=\"path\" cx=\"25\" cy=\"25\" r=\"20\" fill=\"none\" stroke-width=\"5\"></circle>\n      </svg>`;\n            display_element.innerHTML = progressHTML;\n            let result;\n            if (trial.action === \"save\") {\n                result = yield PipePlugin.saveData(trial.experiment_id, trial.filename, trial.data_string);\n            }\n            if (trial.action === \"saveBase64\") {\n                result = yield PipePlugin.saveBase64Data(trial.experiment_id, trial.filename, trial.data_string);\n            }\n            if (trial.action === \"condition\") {\n                result = yield PipePlugin.getCondition(trial.experiment_id);\n            }\n            display_element.innerHTML = \"\";\n            // data saving\n            var trial_data = {\n                result: result,\n                success: result.error ? false : true,\n            };\n            // end trial\n            this.jsPsych.finishTrial(trial_data);\n        });\n    }\n    /**\n     * Save data to the OSF using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @param filename A unique filename to save the data to. It should include the extension.\n     * @param data The data as a string. Any text-basd format (e.g., JSON, CSV, TXT) is acceptable.\n     * @returns The response from the server.\n     */\n    static saveData(expID, filename, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!expID || !filename || !data) {\n                throw new Error(\"Missing required parameter(s).\");\n            }\n            let response;\n            try {\n                response = yield fetch(\"https://pipe.jspsych.org/api/data/\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"*/*\",\n                    },\n                    body: JSON.stringify({\n                        experimentID: expID,\n                        filename: filename,\n                        data: data,\n                    }),\n                });\n            }\n            catch (error) {\n                return error;\n            }\n            return yield response.json();\n        });\n    }\n    /**\n     * Save base64-encoded data to the OSF using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @param filename A unique filename to save the data to. It should include the extension.\n     * @param data The data as a base64-encoded string. It will be decoded by the server before being stored in the OSF.\n     * @returns The response from the server.\n     */\n    static saveBase64Data(expID, filename, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!expID || !filename || !data) {\n                throw new Error(\"Missing required parameter(s).\");\n            }\n            let response;\n            try {\n                response = yield fetch(\"https://pipe.jspsych.org/api/base64/\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"*/*\",\n                    },\n                    body: JSON.stringify({\n                        experimentID: expID,\n                        filename: filename,\n                        data: data,\n                    }),\n                });\n            }\n            catch (error) {\n                return error;\n            }\n            return yield response.json();\n        });\n    }\n    /**\n     * Get the condition assignment for the current participant using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @returns The condition assignment as an integer.\n     */\n    static getCondition(expID) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!expID) {\n                throw new Error(\"Missing required parameter(s).\");\n            }\n            let response;\n            try {\n                response = yield fetch(\"https://pipe.jspsych.org/api/condition/\", {\n                    method: \"POST\",\n                    headers: {\n                        \"Content-Type\": \"application/json\",\n                        Accept: \"*/*\",\n                    },\n                    body: JSON.stringify({\n                        experimentID: expID,\n                    }),\n                });\n            }\n            catch (error) {\n                return error;\n            }\n            const result = yield response.json();\n            return result.condition;\n        });\n    }\n}\nPipePlugin.info = info;\nexport default PipePlugin;\n//# sourceMappingURL=index.js.map","references":["/Users/jackie3/Desktop/URSI/jspsych-contrib/node_modules/jspsych/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/jackie3/Desktop/URSI/jspsych-contrib/packages/plugin-pipe/node_modules/.cache/rollup-plugin-typescript2/placeholder/index.d.ts","writeByteOrderMark":false,"text":"import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\ndeclare const info: {\n    readonly name: \"pipe\";\n    readonly parameters: {\n        /**\n         * The 12-character experiment ID provided by pipe.jspsych.org.\n         */\n        readonly experiment_id: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        /**\n         * The action to take. Can be `\"save\"`, `\"saveBase64\"`, or `\"condition\"`.\n         * If `\"save\"`, the data will be saved to the OSF.\n         * If `\"saveBase64\"`, the data should be a base64-encoded string and will be decoded to binary before being saved to the OSF.\n         * If `\"condition\"`, this will get the next condition for the experiment and save it in the data for this trial.\n         */\n        readonly action: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        /**\n         * Name of the file to create on the OSF. It should include the extension.\n         * If the file already exists, no data will be saved.\n         */\n        readonly filename: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        /**\n         * A string-based representation of the data to save.\n         *\n         * To save JSON, you can use `()=>jsPsych.data.get().json()`.\n         * To save CSV, you can use `()=>jsPsych.data.get().csv()`.\n         *\n         * The use of a function is necessary to get the updated data at\n         * the time of saving.\n         */\n        readonly data_string: {\n            readonly type: ParameterType.STRING;\n            readonly default: any;\n        };\n        /**\n         * An html message to be displayed above the loading graphics in the experiment during data save.\n         */\n        readonly wait_message: {\n            readonly type: ParameterType.HTML_STRING;\n            readonly default: \"<p>Saving data. Please do not close this page.</p>\";\n        };\n    };\n};\ntype Info = typeof info;\n/**\n * **jsPsychPipe**\n *\n * This plugin facilitates communication with DataPipe (https://pipe.jspsych.org), a tool for\n * sending data from jsPsych experiments to the OSF (https://osf.io/). You will need a DataPipe\n * account to use this plugin.\n *\n * @author Josh de Leeuw\n * @see {@link https://DOCUMENTATION_URL DOCUMENTATION LINK TEXT}\n */\ndeclare class PipePlugin implements JsPsychPlugin<Info> {\n    private jsPsych;\n    static info: {\n        readonly name: \"pipe\";\n        readonly parameters: {\n            /**\n             * The 12-character experiment ID provided by pipe.jspsych.org.\n             */\n            readonly experiment_id: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            /**\n             * The action to take. Can be `\"save\"`, `\"saveBase64\"`, or `\"condition\"`.\n             * If `\"save\"`, the data will be saved to the OSF.\n             * If `\"saveBase64\"`, the data should be a base64-encoded string and will be decoded to binary before being saved to the OSF.\n             * If `\"condition\"`, this will get the next condition for the experiment and save it in the data for this trial.\n             */\n            readonly action: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            /**\n             * Name of the file to create on the OSF. It should include the extension.\n             * If the file already exists, no data will be saved.\n             */\n            readonly filename: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            /**\n             * A string-based representation of the data to save.\n             *\n             * To save JSON, you can use `()=>jsPsych.data.get().json()`.\n             * To save CSV, you can use `()=>jsPsych.data.get().csv()`.\n             *\n             * The use of a function is necessary to get the updated data at\n             * the time of saving.\n             */\n            readonly data_string: {\n                readonly type: ParameterType.STRING;\n                readonly default: any;\n            };\n            /**\n             * An html message to be displayed above the loading graphics in the experiment during data save.\n             */\n            readonly wait_message: {\n                readonly type: ParameterType.HTML_STRING;\n                readonly default: \"<p>Saving data. Please do not close this page.</p>\";\n            };\n        };\n    };\n    constructor(jsPsych: JsPsych);\n    trial(display_element: HTMLElement, trial: TrialType<Info>): void;\n    private run;\n    /**\n     * Save data to the OSF using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @param filename A unique filename to save the data to. It should include the extension.\n     * @param data The data as a string. Any text-basd format (e.g., JSON, CSV, TXT) is acceptable.\n     * @returns The response from the server.\n     */\n    static saveData(expID: string, filename: string, data: string): Promise<any>;\n    /**\n     * Save base64-encoded data to the OSF using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @param filename A unique filename to save the data to. It should include the extension.\n     * @param data The data as a base64-encoded string. It will be decoded by the server before being stored in the OSF.\n     * @returns The response from the server.\n     */\n    static saveBase64Data(expID: string, filename: string, data: string): Promise<any>;\n    /**\n     * Get the condition assignment for the current participant using pipe.jspsych.org.\n     *\n     * @param expID The 12-character experiment ID provided by pipe.jspsych.org.\n     * @returns The condition assignment as an integer.\n     */\n    static getCondition(expID: string): Promise<any>;\n}\nexport default PipePlugin;\n"}}
