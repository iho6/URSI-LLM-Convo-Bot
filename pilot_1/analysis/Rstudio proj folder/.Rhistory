grepl("Medicaid should be expanded to cover more low-income individuals", question) |
grepl("Prescription drug prices should be regulated to make them more affordable", question) |
grepl("Government subsidies should be provided for private health insurance", question) |
grepl("The government should negotiate drug prices with pharmaceutical companies", question) |
grepl("Government funding should be increased for mental health services", question) |
grepl("The competitive market should drive healthcare prices", question)
) %>%
filter(phase == 'post-convo') %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_bombing_depolarization_statements_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("A memorial should be established in the U.S. to honor the victims of the bombings", question)  |
grepl("The U.S. government should provide financial reparations to the survivors and their families", question) |
grepl("The bombings were justified to bring a swift end to the war", question) |
grepl("The bombings were morally wrong", question) |
grepl("Learning about the atomic bombings of Hiroshima and Nagasaki is essential for understanding the consequences of nuclear warfare", question) |
grepl("The U.S. should take responsibility for the humanitarian impact of the bombings", question) |
grepl("The U.S. should participate in international efforts to promote nuclear disarmament and non-proliferation", question)
) %>%
filter(phase == 'post-convo') %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer)),
max_score = max(as.numeric(answer))
)
post_vaccines_depolarization_statements_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("Preventing people without vaccinations from entering public spaces and transportation would do more harm than good", question)  |
grepl("Vaccines should be mandated for healthcare workers", question) |
grepl("Businesses should be allowed to require proof of vaccination for entry", question) |
grepl("Businesses and institutions should be barred from discriminating based on vaccination status", question) |
grepl("Schools should be allowed to require vaccinations for attendance", question) |
grepl("All government-approved vaccines should be mandated", question)
) %>%
filter(phase == 'post-convo') %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_criminal_depolarization_statements_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("Implementing comprehensive background checks for all individuals entering the criminal justice system is necessary", question)  |
grepl("Enhancing mental health support services for incarcerated individuals would be worth the cost and resources", question) |
grepl("The use of solitary confinement as a punishment should be banned", question) |
grepl("Inmates should have greater access to educational programs", question) |
grepl("Non-violent offenders should be permitted to serve sentences through community service or house arrest", question) |
grepl("The use of private prisons should be restricted", question)
) %>%
filter(phase == 'post-convo') %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_same_sex_depolarization_statements_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("Same-sex marriage should remain legalized nationwide", question)  |
grepl("Adoption rights should be granted to married same-sex couples", question) |
grepl("Employment non-discrimination protections should be provided for gay and lesbian individuals", question) |
grepl("Same-sex couples should receive spousal benefits (e.g. health insurance; survivor benefits)", question) |
grepl("It is not right to provide the same federal rights and support for same-sex couples as opposite-sex couples", question) |
grepl("Discrimination against same-sex couples in housing and public accommodations should be banned", question)
) %>%
filter(phase == 'post-convo') %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
#| label: For full experiment code- Get post-intervention aggregate scores for slider questions
#| include: false
post_euthanasia_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("euthanasia-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_gender_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("gender-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_healthcare_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("healthcare-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_bombing_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("bombing-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_vaccines_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("vaccines-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_criminal_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("criminal-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_same_sex_sliders_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("same-sex-slider", question)) %>%
filter(condition != 'control free reflection') %>%
filter(grepl("post-convo", phase)) %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
#| label: For full experiment code- Get post-intervention aggregate scores for willingness offending reason questin
#| include: false
#|
post_euthanasia_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("euthanasia-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_gender_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("gender-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_healthcare_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("healthcare-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_bombing_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("bombing-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_vaccines_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("vaccines-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_criminal_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("criminal-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_same_sex_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("same-sex-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
post_same_sex_offending_reason_df <- reverse_coded_scores_df %>%
group_by(prolific_subject_id) %>%
filter(grepl("same-sex-offending-reason-post", question)) %>%
filter(condition != 'control free reflection') %>%
group_by(prolific_subject_id) %>%
summarize(
total_score = sum(as.numeric(answer), na.rm = TRUE),
post_mean_score = mean(as.numeric(answer), na.rm = TRUE),
min_score = min(as.numeric(answer), na.rm = TRUE),
max_score = max(as.numeric(answer), na.rm = TRUE)
)
#| label: For full experiment code- Run paired t-tests on each pre- and post- intervention political party mean to look for significant differences
#| include: false
t_test_republicans <- t.test(pre_republicans_df$pre_mean_score, post_republicans_df$post_mean_score, paired = TRUE)
t_test_democrats <- t.test(pre_democrats_df$pre_mean_score, post_democrats_df$post_mean_score, paired = TRUE)
#| label: For full experiment code- Run paired t-tests on each pre- and post- intervention polarization mean to look for significant differences
#| include: false
#not enough observations yet
#t_test_euthanasia_polarization_general <- t.test(pre_euthanasia_polarization_general_df$pre_mean_score, post_euthanasia_polarization_general_df$post_mean_score, paired = TRUE)
#t_test_gender_polarization_general <- t.test(pre_gender_polarization_general_df$pre_mean_score, post_gender_polarization_general_df$post_mean_score, paired = TRUE)
#t_test_healthcare_polarization_general <- t.test(pre_healthcare_polarization_general_df$pre_mean_score, post_healthcare_polarization_general_df$post_mean_score, paired = TRUE)
#t_test_bombing_polarization_general <- t.test(pre_bombing_polarization_general_df$pre_mean_score, post_bombing_polarization_general_df$post_mean_score, paired = TRUE)
#t_test_vaccines_polarization_general <- t.test(pre_vaccines_polarization_general_df$pre_mean_score, post_vaccines_polarization_general_df$post_mean_score, paired = TRUE)
#t_test_criminal_polarization_general <- t.test(pre_criminal_polarization_general_df$pre_mean_score, post_criminal_polarization_general_df$post_mean_score, paired = TRUE)
t_test_same_sex_polarization_general <- t.test(pre_same_sex_polarization_general_df$pre_mean_score, post_same_sex_polarization_general_df$post_mean_score, paired = TRUE)
#| label: For full experiment code- Run paired t-tests on each pre- and post- intervention slider mean to look for significant differences
#| include: false
#not enough observations yet
#t_test_euthanasia_sliders <- t.test(pre_euthanasia_sliders_df$pre_mean_score, post_euthanasia_sliders_df$post_mean_score, paired = TRUE)
#t_test_gender_sliders <- t.test(pre_gender_sliders_df$pre_mean_score, post_gender_sliders_df$post_mean_score, paired = TRUE)
#t_test_healthcare_sliders <- t.test(pre_healthcare_sliders_df$pre_mean_score, post_healthcare_sliders_df$post_mean_score, paired = TRUE)
#t_test_bombing_sliders <- t.test(pre_bombing_sliders_df$pre_mean_score, post_bombing_sliders_df$post_mean_score, paired = TRUE)
#t_test_vaccines_sliders <- t.test(pre_vaccines_sliders_df$pre_mean_score, post_vaccines_sliders_df$post_mean_score, paired = TRUE)
#t_test_criminal_sliders <- t.test(pre_criminal_sliders_df$pre_mean_score, post_criminal_sliders_df$post_mean_score, paired = TRUE)
t_test_same_sex_sliders <- t.test(pre_same_sex_sliders_df$pre_mean_score, post_same_sex_sliders_df$post_mean_score, paired = TRUE)
#| label: For full experiment code- Run paired t-tests on each pre- and post- intervention offending reason mean to look for significant differences
#| include: false
#not enough observations yet
#t_test_euthanasia_offending_reason <- t.test(pre_euthanasia_offending_reason_df$pre_mean_score, post_euthanasia_sliders_df$post_mean_score, paired = TRUE)
#t_test_gender_offending_reason <- t.test(pre_gender_sliders_df$pre_mean_score, post_gender_sliders_df$post_mean_score, paired = TRUE)
#t_test_healthcare_offending_reason <- t.test(pre_healthcare_offending_reason_df$pre_mean_score, post_healthcare_offending_reason_df$post_mean_score, paired = TRUE)
#t_test_bombing_offending_reason <- t.test(pre_bombing_offending_reason_df$pre_mean_score, post_bombing_offending_reason_df$post_mean_score, paired = TRUE)
#t_test_vaccines_offending_reason <- t.test(pre_vaccines_offending_reason_df$pre_mean_score, post_vaccines_offending_reason_df$post_mean_score, paired = TRUE)
#t_test_criminal_offending_reason <- t.test(pre_criminal_offending_reason_df$pre_mean_score, post_criminal_offending_reason_df$post_mean_score, paired = TRUE)
t_test_same_sex_offending_reason <- t.test(pre_same_sex_offending_reason_df$pre_mean_score, post_same_sex_offending_reason_df$post_mean_score, paired = TRUE)
#| label: T-tests with all topics lumped together
#| echo: false
t_test_politics <- t.test(pre_politics_df$pre_mean_score, post_politics_df$post_mean_score, paired = TRUE)
t_test_polarization_general <- t.test(pre_polarization_general_df$pre_mean_score, post_polarization_general_df$post_mean_score, paired = TRUE)
t_test_polarization <- t.test(pre_polarization_general_df$pre_mean_score, post_polarization_general_df$post_mean_score, paired = TRUE)
t_test_sliders <- t.test(pre_sliders_df$pre_mean_score, post_sliders_df$post_mean_score, paired = TRUE)
t_test_offending_reason <- t.test(pre_offending_reason_df$pre_mean_score, post_offending_reason_df$post_mean_score, paired = TRUE)
t_test_openmindedness <- t.test(pre_openmindedness_df$pre_mean_score, post_openmindedness_df$post_mean_score, paired = TRUE)
#| label: Political party graph
#| echo: false
print(t_test_politics)
merged_politics_df <- merge(pre_politics_df, post_politics_df, by = "prolific_subject_id")
politics_scatterplot <- ggplot(merged_politics_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in opinions of the opposite party") +
theme_bw()
print(politics_scatterplot)
#| label: General polarization graph
#| echo: false
print(t_test_polarization)
merged_polarization_general_df <- merge(pre_polarization_general_df, post_polarization_general_df, by = "prolific_subject_id")
general_polarization_scatterplot <- ggplot(merged_polarization_general_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in general polarization of topic-specific beliefs") +
theme_bw()
print(general_polarization_scatterplot)
#| label: Specific polarization graph
#| echo: false
print(t_test_polarization_general)
merged_polarization_df <- merge(pre_polarization_df, post_polarization_df, by = "prolific_subject_id")
polarization_scatterplot <- ggplot(merged_polarization_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in polarization of topic-specific beliefs") +
theme_bw()
print(polarization_scatterplot)
#| label: Offending reason graph
#| echo: false
print(t_test_offending_reason)
merged_offending_reason_df <- merge(pre_offending_reason_df, post_offending_reason_df, by = "prolific_subject_id")
offending_reason_scatterplot <- ggplot(merged_offending_reason_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in how much different concerns affect willingness to converse") +
theme_bw()
print(offending_reason_scatterplot)
#| label: Sliders graph
#| echo: false
print(t_test_sliders)
merged_sliders_df <- merge(pre_sliders_df, post_sliders_df, by = "prolific_subject_id")
sliders_scatterplot <- ggplot(merged_sliders_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in willingness to converse about selected topic with others") +
theme_bw()
print(sliders_scatterplot)
#| label: Openmindedness graph
#| include: false
print(t_test_openmindedness)
merged_openmindedness_df <- merge(pre_openmindedness_df, post_openmindedness_df, by = "prolific_subject_id")
sliders_scatterplot <- ggplot(merged_openmindedness_df, aes(x = pre_mean_score, y = post_mean_score)) +
geom_point() +  # Add points
geom_abline(intercept = 0, slope = 1, color = "darkseagreen", linetype = "dashed") +  # Line of equality +
geom_ribbon(aes(ymin = 0, ymax = pmin(pre_mean_score, post_mean_score)), fill = "gray", alpha = 0.3) +  # Shaded area
labs(x = "Pre-intervention mean rating", y = "Post-intervention mean rating", title = "Change in willingness to converse about selected topic with others") +
theme_bw()
print(sliders_scatterplot)
#| label: Wrangling feedback data for readability
#| include: false
#| label: Create data frames that are just for the conversation transcripts and free reflections to make them more readable. Remove columns that aren't necessary. Export as csv's
#| echo: false
conversations_raw_df <- raw_df %>%
filter(trial_type == "chat") %>%
select(prolific_subject_id, logs, condition)
reflections_raw_df <- raw_df %>%
filter(phase == "control-intervention")%>%
select(prolific_subject_id, response, time_elapsed, phase, condition, trial_type)
write.csv(conversations_raw_df, "conversation_transcripts.csv", row.names = FALSE)
write.csv(reflections_raw_df, "reflection_transcripts.csv", row.names = FALSE)
#| include: false
# reflections_df <- reflections_raw_df %>%
#   mutate(word_count = str_count(answer, "\\w+"))
#| label: Created automated process for flagging transcripts that might have been pasted in
#| label: Make an example table of changes
#| echo: false
processing_example_table_of_changes <- surveys_df
processing_example_table_of_changes <- processing_example_table_of_changes %>%
filter(prolific_subject_id == "662c7cce4d3e84ac2f284706") %>%
filter(grepl("rating-democrats", question)) %>%
rename("Subject's opinions on the opposite party"  = "question") %>%
mutate(across(everything(), ~ gsub('@R@', '', .))) %>%
mutate(across(everything(), ~ gsub('rating-democrats-post-', '', .))) %>%
mutate(across(everything(), ~ gsub('pre-rating-democrats-', '', .)))
part1_processing_example_table_of_changes <-processing_example_table_of_changes[1:6, ]
part2_processing_example_table_of_changes <-processing_example_table_of_changes[7:12, ]
example_table_of_changes <- part1_processing_example_table_of_changes %>%
left_join(part2_processing_example_table_of_changes, by = "Subject's opinions on the opposite party", suffix = c("", "_new")) %>%
rename("Pre-Convo Ratings" = answer, "Post-Convo Ratings" =  answer_new) %>%
select("Subject's opinions on the opposite party", "Pre-Convo Ratings", "Post-Convo Ratings")
print(example_table_of_changes)
#| label: Create table of basic demographics. The current code is just a rough idea with commented out examples from an old project
#| echo: false
#read in prolific demographics files
demo1 <- read_csv("prolific_export_6697dedd0a9f0e1820436c12.csv")
demo2 <- read_csv("prolific_export_6699817273833cff743f502e.csv")
demo1 <- demo1 %>% mutate(Age = as.numeric(Age))
demo2 <- demo2 %>% mutate(Age = as.numeric(Age)) %>% select(-'U.s. political affiliation')
#merge prolific demographics files, filter out people who returned the experiment, and convert time into minutes for readability
prolific_demographics_df <- bind_rows(demo1, demo2)
prolific_demographics_df <- prolific_demographics_df %>%
rename("prolific_subject_id" = "Participant id") %>%
filter(Status != "RETURNED") %>%
mutate(`Time taken (minutes)` = as.numeric(`Time taken`) / 60) %>%
select(- "Time taken")
#create a demographics table from the demographics questions in our survey. turn the demographics questions from question column into their own columns with answer as the entries within the column
survey_demographics_df <- surveys_df %>%
filter(question == 'ethnicity' | question == 'political-affiliation' | question == 'gender-identification' | question == 'education-level' | question == 'religious-affiliation' | question == 'political-ideology') %>%
select(question, answer, prolific_subject_id, condition) %>%
pivot_wider(names_from = question, values_from = answer)
#merge our two demographics tables
full_demographics_df <- prolific_demographics_df %>%
left_join(survey_demographics_df, by = "prolific_subject_id", suffix = c("_prolific", ""))
#make a region column because graphic each state is excessive
full_demographics_df$Region <- ifelse(full_demographics_df$`Current u.s state of residence` %in% c("California (CA)", "Colorado (CO)", "Utah (UT)", "Utah(UT)", "Idaho (ID)", "Alaska (AK)", "Hawaii (HI)", "Washington (WA)", "Oregon (OR)", "Nevada (NV)", "New Mexico (NM)", "Montana (MT)", "Arizona (AZ)", "Wyoming (WY)"), "West",
ifelse(full_demographics_df$`Current u.s state of residence` %in% c("Texas (TX)", "Florida (FL)", "Georgia (GA)", "North Carolina (NC)", "Tennessee (TN)", "South Carolina (SC)", "Alabama (AL)", "Mississippi (MS)", "Louisiana (LA)", "Delaware (DE)", "Maryland (MD)", "Virginia (VA)", "Washington, D.C. (DC)", "West Virginia (WV)", "Kentucky (KY)", "Arkansas (AR)", "Oklahoma (OK)"), "South",
ifelse(full_demographics_df$`Current u.s state of residence` %in% c("New York (NY)", "New Jersey (NJ)", "Massachusetts (MA)", "Pennsylvania (PA)", "Connecticut (CT)", "Rhode Island (RI)", "Vermont (VT)", "New Hampshire (NH)", "Maine (ME)"), "Northeast",
ifelse(full_demographics_df$`Current u.s state of residence` %in% c("Michigan (MI)", "Illinois (IL)", "Ohio (OH)", "Indiana (IN)", "Wisconsin (WI)", "Minnesota (MN)", "Iowa (IA)", "Missouri (MO)", "Kansas (KS)", "Nebraska (NE)", "South Dakota (SD)", "North Dakota (ND)"), "Midwest", NA))))
# define the levels in categorical variables so that they are organized in the table
full_demographics_df$'political-affiliation' <- fct_relevel(
full_demographics_df$'political-affiliation',
"Republican",
"Democrat",
"Independent"
)
full_demographics_df$'education-level' <- fct_relevel(
full_demographics_df$'education-level',
"High school diploma or GED",
"Some college; no degree",
"Associate degree",
"Bachelor's degree",
"Master's degree",
)
full_demographics_df$'political-ideology' <- fct_relevel(
full_demographics_df$'political-ideology',
"Very conservative",
"Conservative",
"Somewhat conservative",
"Moderate",
"Somewhat liberal",
"Liberal",
"Very liberal"
)
demographics_table <- tbl_summary(full_demographics_df,
by = NULL,
label = list(
`Time taken (minutes)` = "Time taken (minutes)",
`Region` = "Current U.S. region of residence",
Age = "Age (years)",
Sex = "Sex",
`Ethnicity simplified` = "Ethnicity simplified",
`political-affiliation` = "Political affiliation",
`education-level` = "Education level",
`religious-affiliation` = "Religious affiliation",
`political-ideology` = "Political ideology"
),
statistic = NULL,
#list(
#  all_continuous() ~ "{mean} ({sd})",
#  all_categorical() ~ "{n} ({p}%)"
#),
type = list(
`Time taken (minutes)` = "continuous",
`Region` = "categorical",
`Age` = "continuous",
`gender-identification` = "categorical",
`Sex` = "categorical",
`Ethnicity simplified` = "categorical",
`political-affiliation` = "categorical",
`education-level` = "categorical",
`religious-affiliation` = "categorical",
`political-ideology` = "categorical"
),
digits = list(
all_continuous() ~ 2,
all_categorical() ~ 0
),
value = NULL,
missing = NULL,
missing_text = NULL,
sort = NULL,
percent = NULL,
include = c(
'Time taken (minutes)',
'Region',
'Age',
'Sex',
'Ethnicity simplified',
'political-affiliation',
'education-level',
'religious-affiliation',
'political-ideology'
))
# %>%  modify_header(label = "**Predictor Variable**")
# Print the table
as_gt(demographics_table)
